/*
 * API Reference
 * Sentry Public API
 *
 * The version of the OpenAPI document: v0
 * Contact: partners@sentry.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sentry.api.client.java;

import com.sentry.api.client.ApiCallback;
import com.sentry.api.client.ApiClient;
import com.sentry.api.client.ApiException;
import com.sentry.api.client.ApiResponse;
import com.sentry.api.client.Configuration;
import com.sentry.api.client.Pair;
import com.sentry.api.client.ProgressRequestBody;
import com.sentry.api.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateAMonitorRequest;
import org.openapitools.client.model.CreateANewCheckInRequest;
import org.openapitools.client.model.RetrieveCheckInsForAMonitor200ResponseInner;
import org.openapitools.client.model.RetrieveMonitorsForAnOrganization200ResponseInner;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CronsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CronsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CronsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createAMonitor
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param createAMonitorRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAMonitorCall(String organizationSlug, CreateAMonitorRequest createAMonitorRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAMonitorRequest;

        // create path and map variables
        String localVarPath = "/api/0/organizations/{organization_slug}/monitors/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAMonitorValidateBeforeCall(String organizationSlug, CreateAMonitorRequest createAMonitorRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling createAMonitor(Async)");
        }

        // verify the required parameter 'createAMonitorRequest' is set
        if (createAMonitorRequest == null) {
            throw new ApiException("Missing the required parameter 'createAMonitorRequest' when calling createAMonitor(Async)");
        }

        return createAMonitorCall(organizationSlug, createAMonitorRequest, _callback);

    }

    /**
     * 
     * Create a new monitor.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param createAMonitorRequest  (required)
     * @return RetrieveMonitorsForAnOrganization200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveMonitorsForAnOrganization200ResponseInner createAMonitor(String organizationSlug, CreateAMonitorRequest createAMonitorRequest) throws ApiException {
        ApiResponse<RetrieveMonitorsForAnOrganization200ResponseInner> localVarResp = createAMonitorWithHttpInfo(organizationSlug, createAMonitorRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new monitor.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param createAMonitorRequest  (required)
     * @return ApiResponse&lt;RetrieveMonitorsForAnOrganization200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveMonitorsForAnOrganization200ResponseInner> createAMonitorWithHttpInfo(String organizationSlug, CreateAMonitorRequest createAMonitorRequest) throws ApiException {
        okhttp3.Call localVarCall = createAMonitorValidateBeforeCall(organizationSlug, createAMonitorRequest, null);
        Type localVarReturnType = new TypeToken<RetrieveMonitorsForAnOrganization200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new monitor.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param createAMonitorRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAMonitorAsync(String organizationSlug, CreateAMonitorRequest createAMonitorRequest, final ApiCallback<RetrieveMonitorsForAnOrganization200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAMonitorValidateBeforeCall(organizationSlug, createAMonitorRequest, _callback);
        Type localVarReturnType = new TypeToken<RetrieveMonitorsForAnOrganization200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createANewCheckIn
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param monitorSlug The slug of the monitor (required)
     * @param createANewCheckInRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createANewCheckInCall(String organizationSlug, String monitorSlug, CreateANewCheckInRequest createANewCheckInRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createANewCheckInRequest;

        // create path and map variables
        String localVarPath = "/api/0/organization/{organization_slug}/monitors/{monitor_slug}/checkins/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "monitor_slug" + "}", localVarApiClient.escapeString(monitorSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createANewCheckInValidateBeforeCall(String organizationSlug, String monitorSlug, CreateANewCheckInRequest createANewCheckInRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling createANewCheckIn(Async)");
        }

        // verify the required parameter 'monitorSlug' is set
        if (monitorSlug == null) {
            throw new ApiException("Missing the required parameter 'monitorSlug' when calling createANewCheckIn(Async)");
        }

        // verify the required parameter 'createANewCheckInRequest' is set
        if (createANewCheckInRequest == null) {
            throw new ApiException("Missing the required parameter 'createANewCheckInRequest' when calling createANewCheckIn(Async)");
        }

        return createANewCheckInCall(organizationSlug, monitorSlug, createANewCheckInRequest, _callback);

    }

    /**
     * 
     * Creates a new check-in for a monitor.  If &#x60;status&#x60; is not present, it will be assumed that the check-in is starting, and be marked as &#x60;in_progress&#x60;.  To achieve a ping-like behavior, you can simply define &#x60;status&#x60; and optionally &#x60;duration&#x60; and this check-in will be automatically marked as finished.  Note: If a DSN is utilized for authentication, the response will be limited in details.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param monitorSlug The slug of the monitor (required)
     * @param createANewCheckInRequest  (required)
     * @return RetrieveCheckInsForAMonitor200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveCheckInsForAMonitor200ResponseInner createANewCheckIn(String organizationSlug, String monitorSlug, CreateANewCheckInRequest createANewCheckInRequest) throws ApiException {
        ApiResponse<RetrieveCheckInsForAMonitor200ResponseInner> localVarResp = createANewCheckInWithHttpInfo(organizationSlug, monitorSlug, createANewCheckInRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new check-in for a monitor.  If &#x60;status&#x60; is not present, it will be assumed that the check-in is starting, and be marked as &#x60;in_progress&#x60;.  To achieve a ping-like behavior, you can simply define &#x60;status&#x60; and optionally &#x60;duration&#x60; and this check-in will be automatically marked as finished.  Note: If a DSN is utilized for authentication, the response will be limited in details.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param monitorSlug The slug of the monitor (required)
     * @param createANewCheckInRequest  (required)
     * @return ApiResponse&lt;RetrieveCheckInsForAMonitor200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveCheckInsForAMonitor200ResponseInner> createANewCheckInWithHttpInfo(String organizationSlug, String monitorSlug, CreateANewCheckInRequest createANewCheckInRequest) throws ApiException {
        okhttp3.Call localVarCall = createANewCheckInValidateBeforeCall(organizationSlug, monitorSlug, createANewCheckInRequest, null);
        Type localVarReturnType = new TypeToken<RetrieveCheckInsForAMonitor200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new check-in for a monitor.  If &#x60;status&#x60; is not present, it will be assumed that the check-in is starting, and be marked as &#x60;in_progress&#x60;.  To achieve a ping-like behavior, you can simply define &#x60;status&#x60; and optionally &#x60;duration&#x60; and this check-in will be automatically marked as finished.  Note: If a DSN is utilized for authentication, the response will be limited in details.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param monitorSlug The slug of the monitor (required)
     * @param createANewCheckInRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createANewCheckInAsync(String organizationSlug, String monitorSlug, CreateANewCheckInRequest createANewCheckInRequest, final ApiCallback<RetrieveCheckInsForAMonitor200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = createANewCheckInValidateBeforeCall(organizationSlug, monitorSlug, createANewCheckInRequest, _callback);
        Type localVarReturnType = new TypeToken<RetrieveCheckInsForAMonitor200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAMonitorOrMonitorEnvironments
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param monitorSlug The slug of the monitor (required)
     * @param environment The name of environments to filter by. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAMonitorOrMonitorEnvironmentsCall(String organizationSlug, String monitorSlug, List<String> environment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/organizations/{organization_slug}/monitors/{monitor_slug}/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "monitor_slug" + "}", localVarApiClient.escapeString(monitorSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (environment != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "environment", environment));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAMonitorOrMonitorEnvironmentsValidateBeforeCall(String organizationSlug, String monitorSlug, List<String> environment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling deleteAMonitorOrMonitorEnvironments(Async)");
        }

        // verify the required parameter 'monitorSlug' is set
        if (monitorSlug == null) {
            throw new ApiException("Missing the required parameter 'monitorSlug' when calling deleteAMonitorOrMonitorEnvironments(Async)");
        }

        return deleteAMonitorOrMonitorEnvironmentsCall(organizationSlug, monitorSlug, environment, _callback);

    }

    /**
     * 
     * Delete a monitor or monitor environments.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param monitorSlug The slug of the monitor (required)
     * @param environment The name of environments to filter by. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAMonitorOrMonitorEnvironments(String organizationSlug, String monitorSlug, List<String> environment) throws ApiException {
        deleteAMonitorOrMonitorEnvironmentsWithHttpInfo(organizationSlug, monitorSlug, environment);
    }

    /**
     * 
     * Delete a monitor or monitor environments.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param monitorSlug The slug of the monitor (required)
     * @param environment The name of environments to filter by. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAMonitorOrMonitorEnvironmentsWithHttpInfo(String organizationSlug, String monitorSlug, List<String> environment) throws ApiException {
        okhttp3.Call localVarCall = deleteAMonitorOrMonitorEnvironmentsValidateBeforeCall(organizationSlug, monitorSlug, environment, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a monitor or monitor environments.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param monitorSlug The slug of the monitor (required)
     * @param environment The name of environments to filter by. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAMonitorOrMonitorEnvironmentsAsync(String organizationSlug, String monitorSlug, List<String> environment, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAMonitorOrMonitorEnvironmentsValidateBeforeCall(organizationSlug, monitorSlug, environment, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveAMonitor
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param monitorSlug The slug of the monitor (required)
     * @param environment The name of environments to filter by. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAMonitorCall(String organizationSlug, String monitorSlug, List<String> environment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/organizations/{organization_slug}/monitors/{monitor_slug}/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "monitor_slug" + "}", localVarApiClient.escapeString(monitorSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (environment != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "environment", environment));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveAMonitorValidateBeforeCall(String organizationSlug, String monitorSlug, List<String> environment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling retrieveAMonitor(Async)");
        }

        // verify the required parameter 'monitorSlug' is set
        if (monitorSlug == null) {
            throw new ApiException("Missing the required parameter 'monitorSlug' when calling retrieveAMonitor(Async)");
        }

        return retrieveAMonitorCall(organizationSlug, monitorSlug, environment, _callback);

    }

    /**
     * 
     * Retrieves details for a monitor.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param monitorSlug The slug of the monitor (required)
     * @param environment The name of environments to filter by. (optional)
     * @return RetrieveMonitorsForAnOrganization200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveMonitorsForAnOrganization200ResponseInner retrieveAMonitor(String organizationSlug, String monitorSlug, List<String> environment) throws ApiException {
        ApiResponse<RetrieveMonitorsForAnOrganization200ResponseInner> localVarResp = retrieveAMonitorWithHttpInfo(organizationSlug, monitorSlug, environment);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves details for a monitor.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param monitorSlug The slug of the monitor (required)
     * @param environment The name of environments to filter by. (optional)
     * @return ApiResponse&lt;RetrieveMonitorsForAnOrganization200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveMonitorsForAnOrganization200ResponseInner> retrieveAMonitorWithHttpInfo(String organizationSlug, String monitorSlug, List<String> environment) throws ApiException {
        okhttp3.Call localVarCall = retrieveAMonitorValidateBeforeCall(organizationSlug, monitorSlug, environment, null);
        Type localVarReturnType = new TypeToken<RetrieveMonitorsForAnOrganization200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves details for a monitor.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param monitorSlug The slug of the monitor (required)
     * @param environment The name of environments to filter by. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAMonitorAsync(String organizationSlug, String monitorSlug, List<String> environment, final ApiCallback<RetrieveMonitorsForAnOrganization200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveAMonitorValidateBeforeCall(organizationSlug, monitorSlug, environment, _callback);
        Type localVarReturnType = new TypeToken<RetrieveMonitorsForAnOrganization200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveCheckInsForAMonitor
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param monitorSlug The slug of the monitor (required)
     * @param checkinId The id of the check-in (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveCheckInsForAMonitorCall(String organizationSlug, String monitorSlug, UUID checkinId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/organization/{organization_slug}/monitors/{monitor_slug}/checkins/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "monitor_slug" + "}", localVarApiClient.escapeString(monitorSlug.toString()))
            .replace("{" + "checkin_id" + "}", localVarApiClient.escapeString(checkinId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveCheckInsForAMonitorValidateBeforeCall(String organizationSlug, String monitorSlug, UUID checkinId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling retrieveCheckInsForAMonitor(Async)");
        }

        // verify the required parameter 'monitorSlug' is set
        if (monitorSlug == null) {
            throw new ApiException("Missing the required parameter 'monitorSlug' when calling retrieveCheckInsForAMonitor(Async)");
        }

        // verify the required parameter 'checkinId' is set
        if (checkinId == null) {
            throw new ApiException("Missing the required parameter 'checkinId' when calling retrieveCheckInsForAMonitor(Async)");
        }

        return retrieveCheckInsForAMonitorCall(organizationSlug, monitorSlug, checkinId, _callback);

    }

    /**
     * 
     * Retrieve a list of check-ins for a monitor
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param monitorSlug The slug of the monitor (required)
     * @param checkinId The id of the check-in (required)
     * @return List&lt;RetrieveCheckInsForAMonitor200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<RetrieveCheckInsForAMonitor200ResponseInner> retrieveCheckInsForAMonitor(String organizationSlug, String monitorSlug, UUID checkinId) throws ApiException {
        ApiResponse<List<RetrieveCheckInsForAMonitor200ResponseInner>> localVarResp = retrieveCheckInsForAMonitorWithHttpInfo(organizationSlug, monitorSlug, checkinId);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of check-ins for a monitor
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param monitorSlug The slug of the monitor (required)
     * @param checkinId The id of the check-in (required)
     * @return ApiResponse&lt;List&lt;RetrieveCheckInsForAMonitor200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RetrieveCheckInsForAMonitor200ResponseInner>> retrieveCheckInsForAMonitorWithHttpInfo(String organizationSlug, String monitorSlug, UUID checkinId) throws ApiException {
        okhttp3.Call localVarCall = retrieveCheckInsForAMonitorValidateBeforeCall(organizationSlug, monitorSlug, checkinId, null);
        Type localVarReturnType = new TypeToken<List<RetrieveCheckInsForAMonitor200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of check-ins for a monitor
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param monitorSlug The slug of the monitor (required)
     * @param checkinId The id of the check-in (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveCheckInsForAMonitorAsync(String organizationSlug, String monitorSlug, UUID checkinId, final ApiCallback<List<RetrieveCheckInsForAMonitor200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveCheckInsForAMonitorValidateBeforeCall(organizationSlug, monitorSlug, checkinId, _callback);
        Type localVarReturnType = new TypeToken<List<RetrieveCheckInsForAMonitor200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveMonitorsForAnOrganization
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param project The ids of projects to filter by. &#x60;-1&#x60; means all available projects. If this parameter is omitted, the request will default to using &#39;My Projects&#39; (optional)
     * @param environment The name of environments to filter by. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveMonitorsForAnOrganizationCall(String organizationSlug, List<Integer> project, List<String> environment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/organizations/{organization_slug}/monitors/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (project != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "project", project));
        }

        if (environment != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "environment", environment));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveMonitorsForAnOrganizationValidateBeforeCall(String organizationSlug, List<Integer> project, List<String> environment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling retrieveMonitorsForAnOrganization(Async)");
        }

        return retrieveMonitorsForAnOrganizationCall(organizationSlug, project, environment, _callback);

    }

    /**
     * 
     * Lists monitors, including nested monitor enviroments. May be filtered to a project or environment.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param project The ids of projects to filter by. &#x60;-1&#x60; means all available projects. If this parameter is omitted, the request will default to using &#39;My Projects&#39; (optional)
     * @param environment The name of environments to filter by. (optional)
     * @return List&lt;RetrieveMonitorsForAnOrganization200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<RetrieveMonitorsForAnOrganization200ResponseInner> retrieveMonitorsForAnOrganization(String organizationSlug, List<Integer> project, List<String> environment) throws ApiException {
        ApiResponse<List<RetrieveMonitorsForAnOrganization200ResponseInner>> localVarResp = retrieveMonitorsForAnOrganizationWithHttpInfo(organizationSlug, project, environment);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists monitors, including nested monitor enviroments. May be filtered to a project or environment.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param project The ids of projects to filter by. &#x60;-1&#x60; means all available projects. If this parameter is omitted, the request will default to using &#39;My Projects&#39; (optional)
     * @param environment The name of environments to filter by. (optional)
     * @return ApiResponse&lt;List&lt;RetrieveMonitorsForAnOrganization200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RetrieveMonitorsForAnOrganization200ResponseInner>> retrieveMonitorsForAnOrganizationWithHttpInfo(String organizationSlug, List<Integer> project, List<String> environment) throws ApiException {
        okhttp3.Call localVarCall = retrieveMonitorsForAnOrganizationValidateBeforeCall(organizationSlug, project, environment, null);
        Type localVarReturnType = new TypeToken<List<RetrieveMonitorsForAnOrganization200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists monitors, including nested monitor enviroments. May be filtered to a project or environment.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param project The ids of projects to filter by. &#x60;-1&#x60; means all available projects. If this parameter is omitted, the request will default to using &#39;My Projects&#39; (optional)
     * @param environment The name of environments to filter by. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveMonitorsForAnOrganizationAsync(String organizationSlug, List<Integer> project, List<String> environment, final ApiCallback<List<RetrieveMonitorsForAnOrganization200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveMonitorsForAnOrganizationValidateBeforeCall(organizationSlug, project, environment, _callback);
        Type localVarReturnType = new TypeToken<List<RetrieveMonitorsForAnOrganization200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateACheckIn
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param monitorSlug The slug of the monitor (required)
     * @param checkinId The id of the check-in (required)
     * @param createANewCheckInRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 208 </td><td> Already Reported </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateACheckInCall(String organizationSlug, String monitorSlug, UUID checkinId, CreateANewCheckInRequest createANewCheckInRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createANewCheckInRequest;

        // create path and map variables
        String localVarPath = "/api/0/organization/{organization_slug}/monitors/{monitor_slug}/checkins/{checkin_id}/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "monitor_slug" + "}", localVarApiClient.escapeString(monitorSlug.toString()))
            .replace("{" + "checkin_id" + "}", localVarApiClient.escapeString(checkinId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateACheckInValidateBeforeCall(String organizationSlug, String monitorSlug, UUID checkinId, CreateANewCheckInRequest createANewCheckInRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling updateACheckIn(Async)");
        }

        // verify the required parameter 'monitorSlug' is set
        if (monitorSlug == null) {
            throw new ApiException("Missing the required parameter 'monitorSlug' when calling updateACheckIn(Async)");
        }

        // verify the required parameter 'checkinId' is set
        if (checkinId == null) {
            throw new ApiException("Missing the required parameter 'checkinId' when calling updateACheckIn(Async)");
        }

        // verify the required parameter 'createANewCheckInRequest' is set
        if (createANewCheckInRequest == null) {
            throw new ApiException("Missing the required parameter 'createANewCheckInRequest' when calling updateACheckIn(Async)");
        }

        return updateACheckInCall(organizationSlug, monitorSlug, checkinId, createANewCheckInRequest, _callback);

    }

    /**
     * 
     * Updates a check-in.  Once a check-in is finished (indicated via an &#x60;ok&#x60; or &#x60;error&#x60; status) it can no longer be changed.  If you simply wish to update that the task is still running, you can simply send an empty payload.  You may use &#x60;latest&#x60; for the &#x60;checkin_id&#x60; parameter in order to retrieve the most recent (by creation date) check-in which is still mutable (not marked as finished).
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param monitorSlug The slug of the monitor (required)
     * @param checkinId The id of the check-in (required)
     * @param createANewCheckInRequest  (required)
     * @return RetrieveCheckInsForAMonitor200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 208 </td><td> Already Reported </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveCheckInsForAMonitor200ResponseInner updateACheckIn(String organizationSlug, String monitorSlug, UUID checkinId, CreateANewCheckInRequest createANewCheckInRequest) throws ApiException {
        ApiResponse<RetrieveCheckInsForAMonitor200ResponseInner> localVarResp = updateACheckInWithHttpInfo(organizationSlug, monitorSlug, checkinId, createANewCheckInRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a check-in.  Once a check-in is finished (indicated via an &#x60;ok&#x60; or &#x60;error&#x60; status) it can no longer be changed.  If you simply wish to update that the task is still running, you can simply send an empty payload.  You may use &#x60;latest&#x60; for the &#x60;checkin_id&#x60; parameter in order to retrieve the most recent (by creation date) check-in which is still mutable (not marked as finished).
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param monitorSlug The slug of the monitor (required)
     * @param checkinId The id of the check-in (required)
     * @param createANewCheckInRequest  (required)
     * @return ApiResponse&lt;RetrieveCheckInsForAMonitor200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 208 </td><td> Already Reported </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveCheckInsForAMonitor200ResponseInner> updateACheckInWithHttpInfo(String organizationSlug, String monitorSlug, UUID checkinId, CreateANewCheckInRequest createANewCheckInRequest) throws ApiException {
        okhttp3.Call localVarCall = updateACheckInValidateBeforeCall(organizationSlug, monitorSlug, checkinId, createANewCheckInRequest, null);
        Type localVarReturnType = new TypeToken<RetrieveCheckInsForAMonitor200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a check-in.  Once a check-in is finished (indicated via an &#x60;ok&#x60; or &#x60;error&#x60; status) it can no longer be changed.  If you simply wish to update that the task is still running, you can simply send an empty payload.  You may use &#x60;latest&#x60; for the &#x60;checkin_id&#x60; parameter in order to retrieve the most recent (by creation date) check-in which is still mutable (not marked as finished).
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param monitorSlug The slug of the monitor (required)
     * @param checkinId The id of the check-in (required)
     * @param createANewCheckInRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 208 </td><td> Already Reported </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateACheckInAsync(String organizationSlug, String monitorSlug, UUID checkinId, CreateANewCheckInRequest createANewCheckInRequest, final ApiCallback<RetrieveCheckInsForAMonitor200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateACheckInValidateBeforeCall(organizationSlug, monitorSlug, checkinId, createANewCheckInRequest, _callback);
        Type localVarReturnType = new TypeToken<RetrieveCheckInsForAMonitor200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAMonitor
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param monitorSlug The slug of the monitor (required)
     * @param createAMonitorRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAMonitorCall(String organizationSlug, String monitorSlug, CreateAMonitorRequest createAMonitorRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAMonitorRequest;

        // create path and map variables
        String localVarPath = "/api/0/organizations/{organization_slug}/monitors/{monitor_slug}/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "monitor_slug" + "}", localVarApiClient.escapeString(monitorSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAMonitorValidateBeforeCall(String organizationSlug, String monitorSlug, CreateAMonitorRequest createAMonitorRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling updateAMonitor(Async)");
        }

        // verify the required parameter 'monitorSlug' is set
        if (monitorSlug == null) {
            throw new ApiException("Missing the required parameter 'monitorSlug' when calling updateAMonitor(Async)");
        }

        // verify the required parameter 'createAMonitorRequest' is set
        if (createAMonitorRequest == null) {
            throw new ApiException("Missing the required parameter 'createAMonitorRequest' when calling updateAMonitor(Async)");
        }

        return updateAMonitorCall(organizationSlug, monitorSlug, createAMonitorRequest, _callback);

    }

    /**
     * 
     * Update a monitor.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param monitorSlug The slug of the monitor (required)
     * @param createAMonitorRequest  (required)
     * @return RetrieveMonitorsForAnOrganization200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveMonitorsForAnOrganization200ResponseInner updateAMonitor(String organizationSlug, String monitorSlug, CreateAMonitorRequest createAMonitorRequest) throws ApiException {
        ApiResponse<RetrieveMonitorsForAnOrganization200ResponseInner> localVarResp = updateAMonitorWithHttpInfo(organizationSlug, monitorSlug, createAMonitorRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a monitor.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param monitorSlug The slug of the monitor (required)
     * @param createAMonitorRequest  (required)
     * @return ApiResponse&lt;RetrieveMonitorsForAnOrganization200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveMonitorsForAnOrganization200ResponseInner> updateAMonitorWithHttpInfo(String organizationSlug, String monitorSlug, CreateAMonitorRequest createAMonitorRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAMonitorValidateBeforeCall(organizationSlug, monitorSlug, createAMonitorRequest, null);
        Type localVarReturnType = new TypeToken<RetrieveMonitorsForAnOrganization200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a monitor.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param monitorSlug The slug of the monitor (required)
     * @param createAMonitorRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAMonitorAsync(String organizationSlug, String monitorSlug, CreateAMonitorRequest createAMonitorRequest, final ApiCallback<RetrieveMonitorsForAnOrganization200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAMonitorValidateBeforeCall(organizationSlug, monitorSlug, createAMonitorRequest, _callback);
        Type localVarReturnType = new TypeToken<RetrieveMonitorsForAnOrganization200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
