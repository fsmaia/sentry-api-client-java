/*
 * API Reference
 * Sentry Public API
 *
 * The version of the OpenAPI document: v0
 * Contact: partners@sentry.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sentry.api.client.java;

import com.sentry.api.client.ApiCallback;
import com.sentry.api.client.ApiClient;
import com.sentry.api.client.ApiException;
import com.sentry.api.client.ApiResponse;
import com.sentry.api.client.Configuration;
import com.sentry.api.client.Pair;
import com.sentry.api.client.ProgressRequestBody;
import com.sentry.api.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateANewDeployForAnOrganizationRequest;
import org.openapitools.client.model.CreateANewReleaseForAnOrganizationRequest;
import java.io.File;
import org.openapitools.client.model.ListARepositorySCommits200ResponseInner;
import org.openapitools.client.model.ListAnOrganizationSReleaseFiles200ResponseInner;
import java.time.OffsetDateTime;
import org.openapitools.client.model.RetrieveAnEventForAProject200ResponseReleaseOneOf;
import org.openapitools.client.model.RetrieveAnEventForAProject200ResponseReleaseOneOfLastDeployOneOf;
import org.openapitools.client.model.RetrieveReleaseHealthSessionStatistics200Response;
import org.openapitools.client.model.RetrieveReleaseHealthSessionStatistics400Response;
import org.openapitools.client.model.UpdateAnOrganizationReleaseFileRequest;
import org.openapitools.client.model.UpdateAnOrganizationSReleaseRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ReleasesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReleasesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReleasesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createANewDeployForAnOrganization
     * @param organizationSlug The slug of the organization. (required)
     * @param version The version identifier of the release. (required)
     * @param createANewDeployForAnOrganizationRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 208 </td><td> Already Reported </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createANewDeployForAnOrganizationCall(String organizationSlug, String version, CreateANewDeployForAnOrganizationRequest createANewDeployForAnOrganizationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createANewDeployForAnOrganizationRequest;

        // create path and map variables
        String localVarPath = "/api/0/organizations/{organization_slug}/releases/{version}/deploys/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createANewDeployForAnOrganizationValidateBeforeCall(String organizationSlug, String version, CreateANewDeployForAnOrganizationRequest createANewDeployForAnOrganizationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling createANewDeployForAnOrganization(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling createANewDeployForAnOrganization(Async)");
        }

        return createANewDeployForAnOrganizationCall(organizationSlug, version, createANewDeployForAnOrganizationRequest, _callback);

    }

    /**
     * 
     * Create a deploy.
     * @param organizationSlug The slug of the organization. (required)
     * @param version The version identifier of the release. (required)
     * @param createANewDeployForAnOrganizationRequest  (optional)
     * @return RetrieveAnEventForAProject200ResponseReleaseOneOfLastDeployOneOf
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 208 </td><td> Already Reported </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveAnEventForAProject200ResponseReleaseOneOfLastDeployOneOf createANewDeployForAnOrganization(String organizationSlug, String version, CreateANewDeployForAnOrganizationRequest createANewDeployForAnOrganizationRequest) throws ApiException {
        ApiResponse<RetrieveAnEventForAProject200ResponseReleaseOneOfLastDeployOneOf> localVarResp = createANewDeployForAnOrganizationWithHttpInfo(organizationSlug, version, createANewDeployForAnOrganizationRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a deploy.
     * @param organizationSlug The slug of the organization. (required)
     * @param version The version identifier of the release. (required)
     * @param createANewDeployForAnOrganizationRequest  (optional)
     * @return ApiResponse&lt;RetrieveAnEventForAProject200ResponseReleaseOneOfLastDeployOneOf&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 208 </td><td> Already Reported </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveAnEventForAProject200ResponseReleaseOneOfLastDeployOneOf> createANewDeployForAnOrganizationWithHttpInfo(String organizationSlug, String version, CreateANewDeployForAnOrganizationRequest createANewDeployForAnOrganizationRequest) throws ApiException {
        okhttp3.Call localVarCall = createANewDeployForAnOrganizationValidateBeforeCall(organizationSlug, version, createANewDeployForAnOrganizationRequest, null);
        Type localVarReturnType = new TypeToken<RetrieveAnEventForAProject200ResponseReleaseOneOfLastDeployOneOf>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a deploy.
     * @param organizationSlug The slug of the organization. (required)
     * @param version The version identifier of the release. (required)
     * @param createANewDeployForAnOrganizationRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 208 </td><td> Already Reported </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createANewDeployForAnOrganizationAsync(String organizationSlug, String version, CreateANewDeployForAnOrganizationRequest createANewDeployForAnOrganizationRequest, final ApiCallback<RetrieveAnEventForAProject200ResponseReleaseOneOfLastDeployOneOf> _callback) throws ApiException {

        okhttp3.Call localVarCall = createANewDeployForAnOrganizationValidateBeforeCall(organizationSlug, version, createANewDeployForAnOrganizationRequest, _callback);
        Type localVarReturnType = new TypeToken<RetrieveAnEventForAProject200ResponseReleaseOneOfLastDeployOneOf>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createANewReleaseForAnOrganization
     * @param organizationSlug The slug of the organization. (required)
     * @param createANewReleaseForAnOrganizationRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Input </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createANewReleaseForAnOrganizationCall(String organizationSlug, CreateANewReleaseForAnOrganizationRequest createANewReleaseForAnOrganizationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createANewReleaseForAnOrganizationRequest;

        // create path and map variables
        String localVarPath = "/api/0/organizations/{organization_slug}/releases/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createANewReleaseForAnOrganizationValidateBeforeCall(String organizationSlug, CreateANewReleaseForAnOrganizationRequest createANewReleaseForAnOrganizationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling createANewReleaseForAnOrganization(Async)");
        }

        return createANewReleaseForAnOrganizationCall(organizationSlug, createANewReleaseForAnOrganizationRequest, _callback);

    }

    /**
     * 
     * Create a new release for the given organization.  Releases are used by Sentry to improve its error reporting abilities by correlating first seen events with the release that might have introduced the problem. Releases are also necessary for source maps and other debug features that require manual upload for functioning well.
     * @param organizationSlug The slug of the organization. (required)
     * @param createANewReleaseForAnOrganizationRequest  (optional)
     * @return RetrieveAnEventForAProject200ResponseReleaseOneOf
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Input </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveAnEventForAProject200ResponseReleaseOneOf createANewReleaseForAnOrganization(String organizationSlug, CreateANewReleaseForAnOrganizationRequest createANewReleaseForAnOrganizationRequest) throws ApiException {
        ApiResponse<RetrieveAnEventForAProject200ResponseReleaseOneOf> localVarResp = createANewReleaseForAnOrganizationWithHttpInfo(organizationSlug, createANewReleaseForAnOrganizationRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new release for the given organization.  Releases are used by Sentry to improve its error reporting abilities by correlating first seen events with the release that might have introduced the problem. Releases are also necessary for source maps and other debug features that require manual upload for functioning well.
     * @param organizationSlug The slug of the organization. (required)
     * @param createANewReleaseForAnOrganizationRequest  (optional)
     * @return ApiResponse&lt;RetrieveAnEventForAProject200ResponseReleaseOneOf&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Input </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveAnEventForAProject200ResponseReleaseOneOf> createANewReleaseForAnOrganizationWithHttpInfo(String organizationSlug, CreateANewReleaseForAnOrganizationRequest createANewReleaseForAnOrganizationRequest) throws ApiException {
        okhttp3.Call localVarCall = createANewReleaseForAnOrganizationValidateBeforeCall(organizationSlug, createANewReleaseForAnOrganizationRequest, null);
        Type localVarReturnType = new TypeToken<RetrieveAnEventForAProject200ResponseReleaseOneOf>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new release for the given organization.  Releases are used by Sentry to improve its error reporting abilities by correlating first seen events with the release that might have introduced the problem. Releases are also necessary for source maps and other debug features that require manual upload for functioning well.
     * @param organizationSlug The slug of the organization. (required)
     * @param createANewReleaseForAnOrganizationRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Input </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createANewReleaseForAnOrganizationAsync(String organizationSlug, CreateANewReleaseForAnOrganizationRequest createANewReleaseForAnOrganizationRequest, final ApiCallback<RetrieveAnEventForAProject200ResponseReleaseOneOf> _callback) throws ApiException {

        okhttp3.Call localVarCall = createANewReleaseForAnOrganizationValidateBeforeCall(organizationSlug, createANewReleaseForAnOrganizationRequest, _callback);
        Type localVarReturnType = new TypeToken<RetrieveAnEventForAProject200ResponseReleaseOneOf>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAProjectReleasesFile
     * @param organizationSlug The slug of the organization the release belongs to. (required)
     * @param projectSlug The slug of the project. (required)
     * @param version The version identifier of the release. (required)
     * @param fileId The ID of the file to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAProjectReleasesFileCall(String organizationSlug, String projectSlug, String version, String fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/projects/{organization_slug}/{project_slug}/releases/{version}/files/{file_id}/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()))
            .replace("{" + "file_id" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAProjectReleasesFileValidateBeforeCall(String organizationSlug, String projectSlug, String version, String fileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling deleteAProjectReleasesFile(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling deleteAProjectReleasesFile(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling deleteAProjectReleasesFile(Async)");
        }

        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteAProjectReleasesFile(Async)");
        }

        return deleteAProjectReleasesFileCall(organizationSlug, projectSlug, version, fileId, _callback);

    }

    /**
     * 
     * Delete a file for a given release.
     * @param organizationSlug The slug of the organization the release belongs to. (required)
     * @param projectSlug The slug of the project. (required)
     * @param version The version identifier of the release. (required)
     * @param fileId The ID of the file to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAProjectReleasesFile(String organizationSlug, String projectSlug, String version, String fileId) throws ApiException {
        deleteAProjectReleasesFileWithHttpInfo(organizationSlug, projectSlug, version, fileId);
    }

    /**
     * 
     * Delete a file for a given release.
     * @param organizationSlug The slug of the organization the release belongs to. (required)
     * @param projectSlug The slug of the project. (required)
     * @param version The version identifier of the release. (required)
     * @param fileId The ID of the file to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAProjectReleasesFileWithHttpInfo(String organizationSlug, String projectSlug, String version, String fileId) throws ApiException {
        okhttp3.Call localVarCall = deleteAProjectReleasesFileValidateBeforeCall(organizationSlug, projectSlug, version, fileId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a file for a given release.
     * @param organizationSlug The slug of the organization the release belongs to. (required)
     * @param projectSlug The slug of the project. (required)
     * @param version The version identifier of the release. (required)
     * @param fileId The ID of the file to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAProjectReleasesFileAsync(String organizationSlug, String projectSlug, String version, String fileId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAProjectReleasesFileValidateBeforeCall(organizationSlug, projectSlug, version, fileId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAnOrganizationReleasesFile
     * @param organizationSlug The slug of the organization the release belongs to. (required)
     * @param version The version identifier of the release. (required)
     * @param fileId The ID of the file to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAnOrganizationReleasesFileCall(String organizationSlug, String version, String fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/organizations/{organization_slug}/releases/{version}/files/{file_id}/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()))
            .replace("{" + "file_id" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAnOrganizationReleasesFileValidateBeforeCall(String organizationSlug, String version, String fileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling deleteAnOrganizationReleasesFile(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling deleteAnOrganizationReleasesFile(Async)");
        }

        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteAnOrganizationReleasesFile(Async)");
        }

        return deleteAnOrganizationReleasesFileCall(organizationSlug, version, fileId, _callback);

    }

    /**
     * 
     * Delete a file for a given release.
     * @param organizationSlug The slug of the organization the release belongs to. (required)
     * @param version The version identifier of the release. (required)
     * @param fileId The ID of the file to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAnOrganizationReleasesFile(String organizationSlug, String version, String fileId) throws ApiException {
        deleteAnOrganizationReleasesFileWithHttpInfo(organizationSlug, version, fileId);
    }

    /**
     * 
     * Delete a file for a given release.
     * @param organizationSlug The slug of the organization the release belongs to. (required)
     * @param version The version identifier of the release. (required)
     * @param fileId The ID of the file to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAnOrganizationReleasesFileWithHttpInfo(String organizationSlug, String version, String fileId) throws ApiException {
        okhttp3.Call localVarCall = deleteAnOrganizationReleasesFileValidateBeforeCall(organizationSlug, version, fileId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a file for a given release.
     * @param organizationSlug The slug of the organization the release belongs to. (required)
     * @param version The version identifier of the release. (required)
     * @param fileId The ID of the file to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAnOrganizationReleasesFileAsync(String organizationSlug, String version, String fileId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAnOrganizationReleasesFileValidateBeforeCall(organizationSlug, version, fileId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAnOrganizationsRelease
     * @param organizationSlug The slug of the organization the release belongs to. (required)
     * @param version The version identifier of the release. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAnOrganizationsReleaseCall(String organizationSlug, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/organizations/{organization_slug}/releases/{version}/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAnOrganizationsReleaseValidateBeforeCall(String organizationSlug, String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling deleteAnOrganizationsRelease(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling deleteAnOrganizationsRelease(Async)");
        }

        return deleteAnOrganizationsReleaseCall(organizationSlug, version, _callback);

    }

    /**
     * 
     * Delete a release for a given organization.
     * @param organizationSlug The slug of the organization the release belongs to. (required)
     * @param version The version identifier of the release. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAnOrganizationsRelease(String organizationSlug, String version) throws ApiException {
        deleteAnOrganizationsReleaseWithHttpInfo(organizationSlug, version);
    }

    /**
     * 
     * Delete a release for a given organization.
     * @param organizationSlug The slug of the organization the release belongs to. (required)
     * @param version The version identifier of the release. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAnOrganizationsReleaseWithHttpInfo(String organizationSlug, String version) throws ApiException {
        okhttp3.Call localVarCall = deleteAnOrganizationsReleaseValidateBeforeCall(organizationSlug, version, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a release for a given organization.
     * @param organizationSlug The slug of the organization the release belongs to. (required)
     * @param version The version identifier of the release. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAnOrganizationsReleaseAsync(String organizationSlug, String version, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAnOrganizationsReleaseValidateBeforeCall(organizationSlug, version, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAProjectReleasesCommits
     * @param organizationSlug The slug of the organization the release belongs to. (required)
     * @param projectSlug The slug of the project the release belongs to. (required)
     * @param version The version identifier of the release. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAProjectReleasesCommitsCall(String organizationSlug, String projectSlug, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/projects/{organization_slug}/{project_slug}/releases/{version}/commits/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAProjectReleasesCommitsValidateBeforeCall(String organizationSlug, String projectSlug, String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling listAProjectReleasesCommits(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling listAProjectReleasesCommits(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling listAProjectReleasesCommits(Async)");
        }

        return listAProjectReleasesCommitsCall(organizationSlug, projectSlug, version, _callback);

    }

    /**
     * 
     * List a project release&#39;s commits.
     * @param organizationSlug The slug of the organization the release belongs to. (required)
     * @param projectSlug The slug of the project the release belongs to. (required)
     * @param version The version identifier of the release. (required)
     * @return List&lt;ListARepositorySCommits200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<ListARepositorySCommits200ResponseInner> listAProjectReleasesCommits(String organizationSlug, String projectSlug, String version) throws ApiException {
        ApiResponse<List<ListARepositorySCommits200ResponseInner>> localVarResp = listAProjectReleasesCommitsWithHttpInfo(organizationSlug, projectSlug, version);
        return localVarResp.getData();
    }

    /**
     * 
     * List a project release&#39;s commits.
     * @param organizationSlug The slug of the organization the release belongs to. (required)
     * @param projectSlug The slug of the project the release belongs to. (required)
     * @param version The version identifier of the release. (required)
     * @return ApiResponse&lt;List&lt;ListARepositorySCommits200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListARepositorySCommits200ResponseInner>> listAProjectReleasesCommitsWithHttpInfo(String organizationSlug, String projectSlug, String version) throws ApiException {
        okhttp3.Call localVarCall = listAProjectReleasesCommitsValidateBeforeCall(organizationSlug, projectSlug, version, null);
        Type localVarReturnType = new TypeToken<List<ListARepositorySCommits200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List a project release&#39;s commits.
     * @param organizationSlug The slug of the organization the release belongs to. (required)
     * @param projectSlug The slug of the project the release belongs to. (required)
     * @param version The version identifier of the release. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAProjectReleasesCommitsAsync(String organizationSlug, String projectSlug, String version, final ApiCallback<List<ListARepositorySCommits200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAProjectReleasesCommitsValidateBeforeCall(organizationSlug, projectSlug, version, _callback);
        Type localVarReturnType = new TypeToken<List<ListARepositorySCommits200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAProjectsReleaseFiles
     * @param organizationSlug The slug of the organization. (required)
     * @param projectSlug The slug of the project. (required)
     * @param version The version identifier of the release. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAProjectsReleaseFilesCall(String organizationSlug, String projectSlug, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/projects/{organization_slug}/{project_slug}/releases/{version}/files/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAProjectsReleaseFilesValidateBeforeCall(String organizationSlug, String projectSlug, String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling listAProjectsReleaseFiles(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling listAProjectsReleaseFiles(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling listAProjectsReleaseFiles(Async)");
        }

        return listAProjectsReleaseFilesCall(organizationSlug, projectSlug, version, _callback);

    }

    /**
     * 
     * Return a list of files for a given release.
     * @param organizationSlug The slug of the organization. (required)
     * @param projectSlug The slug of the project. (required)
     * @param version The version identifier of the release. (required)
     * @return List&lt;ListAnOrganizationSReleaseFiles200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<ListAnOrganizationSReleaseFiles200ResponseInner> listAProjectsReleaseFiles(String organizationSlug, String projectSlug, String version) throws ApiException {
        ApiResponse<List<ListAnOrganizationSReleaseFiles200ResponseInner>> localVarResp = listAProjectsReleaseFilesWithHttpInfo(organizationSlug, projectSlug, version);
        return localVarResp.getData();
    }

    /**
     * 
     * Return a list of files for a given release.
     * @param organizationSlug The slug of the organization. (required)
     * @param projectSlug The slug of the project. (required)
     * @param version The version identifier of the release. (required)
     * @return ApiResponse&lt;List&lt;ListAnOrganizationSReleaseFiles200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListAnOrganizationSReleaseFiles200ResponseInner>> listAProjectsReleaseFilesWithHttpInfo(String organizationSlug, String projectSlug, String version) throws ApiException {
        okhttp3.Call localVarCall = listAProjectsReleaseFilesValidateBeforeCall(organizationSlug, projectSlug, version, null);
        Type localVarReturnType = new TypeToken<List<ListAnOrganizationSReleaseFiles200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return a list of files for a given release.
     * @param organizationSlug The slug of the organization. (required)
     * @param projectSlug The slug of the project. (required)
     * @param version The version identifier of the release. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAProjectsReleaseFilesAsync(String organizationSlug, String projectSlug, String version, final ApiCallback<List<ListAnOrganizationSReleaseFiles200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAProjectsReleaseFilesValidateBeforeCall(organizationSlug, projectSlug, version, _callback);
        Type localVarReturnType = new TypeToken<List<ListAnOrganizationSReleaseFiles200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAReleasesDeploys
     * @param organizationSlug The slug of the organization. (required)
     * @param version The version identifier of the release. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAReleasesDeploysCall(String organizationSlug, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/organizations/{organization_slug}/releases/{version}/deploys/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAReleasesDeploysValidateBeforeCall(String organizationSlug, String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling listAReleasesDeploys(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling listAReleasesDeploys(Async)");
        }

        return listAReleasesDeploysCall(organizationSlug, version, _callback);

    }

    /**
     * 
     * Return a list of deploys for a given release.
     * @param organizationSlug The slug of the organization. (required)
     * @param version The version identifier of the release. (required)
     * @return List&lt;RetrieveAnEventForAProject200ResponseReleaseOneOfLastDeployOneOf&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<RetrieveAnEventForAProject200ResponseReleaseOneOfLastDeployOneOf> listAReleasesDeploys(String organizationSlug, String version) throws ApiException {
        ApiResponse<List<RetrieveAnEventForAProject200ResponseReleaseOneOfLastDeployOneOf>> localVarResp = listAReleasesDeploysWithHttpInfo(organizationSlug, version);
        return localVarResp.getData();
    }

    /**
     * 
     * Return a list of deploys for a given release.
     * @param organizationSlug The slug of the organization. (required)
     * @param version The version identifier of the release. (required)
     * @return ApiResponse&lt;List&lt;RetrieveAnEventForAProject200ResponseReleaseOneOfLastDeployOneOf&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RetrieveAnEventForAProject200ResponseReleaseOneOfLastDeployOneOf>> listAReleasesDeploysWithHttpInfo(String organizationSlug, String version) throws ApiException {
        okhttp3.Call localVarCall = listAReleasesDeploysValidateBeforeCall(organizationSlug, version, null);
        Type localVarReturnType = new TypeToken<List<RetrieveAnEventForAProject200ResponseReleaseOneOfLastDeployOneOf>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return a list of deploys for a given release.
     * @param organizationSlug The slug of the organization. (required)
     * @param version The version identifier of the release. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAReleasesDeploysAsync(String organizationSlug, String version, final ApiCallback<List<RetrieveAnEventForAProject200ResponseReleaseOneOfLastDeployOneOf>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAReleasesDeploysValidateBeforeCall(organizationSlug, version, _callback);
        Type localVarReturnType = new TypeToken<List<RetrieveAnEventForAProject200ResponseReleaseOneOfLastDeployOneOf>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAnOrganizationReleasesCommits
     * @param organizationSlug The slug of the organization the release belongs to. (required)
     * @param version The version identifier of the release. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAnOrganizationReleasesCommitsCall(String organizationSlug, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/organizations/{organization_slug}/releases/{version}/commits/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAnOrganizationReleasesCommitsValidateBeforeCall(String organizationSlug, String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling listAnOrganizationReleasesCommits(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling listAnOrganizationReleasesCommits(Async)");
        }

        return listAnOrganizationReleasesCommitsCall(organizationSlug, version, _callback);

    }

    /**
     * 
     * List an organization release&#39;s commits.
     * @param organizationSlug The slug of the organization the release belongs to. (required)
     * @param version The version identifier of the release. (required)
     * @return List&lt;ListARepositorySCommits200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<ListARepositorySCommits200ResponseInner> listAnOrganizationReleasesCommits(String organizationSlug, String version) throws ApiException {
        ApiResponse<List<ListARepositorySCommits200ResponseInner>> localVarResp = listAnOrganizationReleasesCommitsWithHttpInfo(organizationSlug, version);
        return localVarResp.getData();
    }

    /**
     * 
     * List an organization release&#39;s commits.
     * @param organizationSlug The slug of the organization the release belongs to. (required)
     * @param version The version identifier of the release. (required)
     * @return ApiResponse&lt;List&lt;ListARepositorySCommits200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListARepositorySCommits200ResponseInner>> listAnOrganizationReleasesCommitsWithHttpInfo(String organizationSlug, String version) throws ApiException {
        okhttp3.Call localVarCall = listAnOrganizationReleasesCommitsValidateBeforeCall(organizationSlug, version, null);
        Type localVarReturnType = new TypeToken<List<ListARepositorySCommits200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List an organization release&#39;s commits.
     * @param organizationSlug The slug of the organization the release belongs to. (required)
     * @param version The version identifier of the release. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAnOrganizationReleasesCommitsAsync(String organizationSlug, String version, final ApiCallback<List<ListARepositorySCommits200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAnOrganizationReleasesCommitsValidateBeforeCall(organizationSlug, version, _callback);
        Type localVarReturnType = new TypeToken<List<ListARepositorySCommits200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAnOrganizationsReleaseFiles
     * @param organizationSlug The slug of the organization. (required)
     * @param version The version identifier of the release. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAnOrganizationsReleaseFilesCall(String organizationSlug, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/organizations/{organization_slug}/releases/{version}/files/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAnOrganizationsReleaseFilesValidateBeforeCall(String organizationSlug, String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling listAnOrganizationsReleaseFiles(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling listAnOrganizationsReleaseFiles(Async)");
        }

        return listAnOrganizationsReleaseFilesCall(organizationSlug, version, _callback);

    }

    /**
     * 
     * Return a list of files for a given release.
     * @param organizationSlug The slug of the organization. (required)
     * @param version The version identifier of the release. (required)
     * @return List&lt;ListAnOrganizationSReleaseFiles200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<ListAnOrganizationSReleaseFiles200ResponseInner> listAnOrganizationsReleaseFiles(String organizationSlug, String version) throws ApiException {
        ApiResponse<List<ListAnOrganizationSReleaseFiles200ResponseInner>> localVarResp = listAnOrganizationsReleaseFilesWithHttpInfo(organizationSlug, version);
        return localVarResp.getData();
    }

    /**
     * 
     * Return a list of files for a given release.
     * @param organizationSlug The slug of the organization. (required)
     * @param version The version identifier of the release. (required)
     * @return ApiResponse&lt;List&lt;ListAnOrganizationSReleaseFiles200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListAnOrganizationSReleaseFiles200ResponseInner>> listAnOrganizationsReleaseFilesWithHttpInfo(String organizationSlug, String version) throws ApiException {
        okhttp3.Call localVarCall = listAnOrganizationsReleaseFilesValidateBeforeCall(organizationSlug, version, null);
        Type localVarReturnType = new TypeToken<List<ListAnOrganizationSReleaseFiles200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return a list of files for a given release.
     * @param organizationSlug The slug of the organization. (required)
     * @param version The version identifier of the release. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAnOrganizationsReleaseFilesAsync(String organizationSlug, String version, final ApiCallback<List<ListAnOrganizationSReleaseFiles200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAnOrganizationsReleaseFilesValidateBeforeCall(organizationSlug, version, _callback);
        Type localVarReturnType = new TypeToken<List<ListAnOrganizationSReleaseFiles200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAnOrganizationsReleases
     * @param organizationSlug The slug of the organization. (required)
     * @param query This parameter can be used to create a \&quot;starts with\&quot; filter for the version. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Permission Denied </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAnOrganizationsReleasesCall(String organizationSlug, String query, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/organizations/{organization_slug}/releases/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAnOrganizationsReleasesValidateBeforeCall(String organizationSlug, String query, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling listAnOrganizationsReleases(Async)");
        }

        return listAnOrganizationsReleasesCall(organizationSlug, query, _callback);

    }

    /**
     * 
     * Return a list of releases for a given organization.
     * @param organizationSlug The slug of the organization. (required)
     * @param query This parameter can be used to create a \&quot;starts with\&quot; filter for the version. (optional)
     * @return List&lt;RetrieveAnEventForAProject200ResponseReleaseOneOf&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Permission Denied </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<RetrieveAnEventForAProject200ResponseReleaseOneOf> listAnOrganizationsReleases(String organizationSlug, String query) throws ApiException {
        ApiResponse<List<RetrieveAnEventForAProject200ResponseReleaseOneOf>> localVarResp = listAnOrganizationsReleasesWithHttpInfo(organizationSlug, query);
        return localVarResp.getData();
    }

    /**
     * 
     * Return a list of releases for a given organization.
     * @param organizationSlug The slug of the organization. (required)
     * @param query This parameter can be used to create a \&quot;starts with\&quot; filter for the version. (optional)
     * @return ApiResponse&lt;List&lt;RetrieveAnEventForAProject200ResponseReleaseOneOf&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Permission Denied </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RetrieveAnEventForAProject200ResponseReleaseOneOf>> listAnOrganizationsReleasesWithHttpInfo(String organizationSlug, String query) throws ApiException {
        okhttp3.Call localVarCall = listAnOrganizationsReleasesValidateBeforeCall(organizationSlug, query, null);
        Type localVarReturnType = new TypeToken<List<RetrieveAnEventForAProject200ResponseReleaseOneOf>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return a list of releases for a given organization.
     * @param organizationSlug The slug of the organization. (required)
     * @param query This parameter can be used to create a \&quot;starts with\&quot; filter for the version. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Permission Denied </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAnOrganizationsReleasesAsync(String organizationSlug, String query, final ApiCallback<List<RetrieveAnEventForAProject200ResponseReleaseOneOf>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAnOrganizationsReleasesValidateBeforeCall(organizationSlug, query, _callback);
        Type localVarReturnType = new TypeToken<List<RetrieveAnEventForAProject200ResponseReleaseOneOf>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listIssuesToBeResolvedInAParticularRelease
     * @param organizationSlug The slug of the organization. (required)
     * @param projectSlug The slug of the project. (required)
     * @param version The version identifier of the release. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listIssuesToBeResolvedInAParticularReleaseCall(String organizationSlug, String projectSlug, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/projects/{organization_slug}/{project_slug}/releases/{version}/resolved/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listIssuesToBeResolvedInAParticularReleaseValidateBeforeCall(String organizationSlug, String projectSlug, String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling listIssuesToBeResolvedInAParticularRelease(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling listIssuesToBeResolvedInAParticularRelease(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling listIssuesToBeResolvedInAParticularRelease(Async)");
        }

        return listIssuesToBeResolvedInAParticularReleaseCall(organizationSlug, projectSlug, version, _callback);

    }

    /**
     * 
     * List issues to be resolved in a particular release.
     * @param organizationSlug The slug of the organization. (required)
     * @param projectSlug The slug of the project. (required)
     * @param version The version identifier of the release. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void listIssuesToBeResolvedInAParticularRelease(String organizationSlug, String projectSlug, String version) throws ApiException {
        listIssuesToBeResolvedInAParticularReleaseWithHttpInfo(organizationSlug, projectSlug, version);
    }

    /**
     * 
     * List issues to be resolved in a particular release.
     * @param organizationSlug The slug of the organization. (required)
     * @param projectSlug The slug of the project. (required)
     * @param version The version identifier of the release. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> listIssuesToBeResolvedInAParticularReleaseWithHttpInfo(String organizationSlug, String projectSlug, String version) throws ApiException {
        okhttp3.Call localVarCall = listIssuesToBeResolvedInAParticularReleaseValidateBeforeCall(organizationSlug, projectSlug, version, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * List issues to be resolved in a particular release.
     * @param organizationSlug The slug of the organization. (required)
     * @param projectSlug The slug of the project. (required)
     * @param version The version identifier of the release. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listIssuesToBeResolvedInAParticularReleaseAsync(String organizationSlug, String projectSlug, String version, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listIssuesToBeResolvedInAParticularReleaseValidateBeforeCall(organizationSlug, projectSlug, version, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveAProjectReleasesFile
     * @param organizationSlug The slug of the organization. (required)
     * @param projectSlug The slug of the project. (required)
     * @param version The version identifier of the release. (required)
     * @param fileId The ID of the file to retrieve. (required)
     * @param download If this is set to true, then the response payload will be the raw file contents. Otherwise, the response will be the file metadata as JSON. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAProjectReleasesFileCall(String organizationSlug, String projectSlug, String version, String fileId, Boolean download, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/projects/{organization_slug}/{project_slug}/releases/{version}/files/{file_id}/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()))
            .replace("{" + "file_id" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (download != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("download", download));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveAProjectReleasesFileValidateBeforeCall(String organizationSlug, String projectSlug, String version, String fileId, Boolean download, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling retrieveAProjectReleasesFile(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling retrieveAProjectReleasesFile(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling retrieveAProjectReleasesFile(Async)");
        }

        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling retrieveAProjectReleasesFile(Async)");
        }

        return retrieveAProjectReleasesFileCall(organizationSlug, projectSlug, version, fileId, download, _callback);

    }

    /**
     * 
     * Retrieve a file for a given release.
     * @param organizationSlug The slug of the organization. (required)
     * @param projectSlug The slug of the project. (required)
     * @param version The version identifier of the release. (required)
     * @param fileId The ID of the file to retrieve. (required)
     * @param download If this is set to true, then the response payload will be the raw file contents. Otherwise, the response will be the file metadata as JSON. (optional)
     * @return ListAnOrganizationSReleaseFiles200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ListAnOrganizationSReleaseFiles200ResponseInner retrieveAProjectReleasesFile(String organizationSlug, String projectSlug, String version, String fileId, Boolean download) throws ApiException {
        ApiResponse<ListAnOrganizationSReleaseFiles200ResponseInner> localVarResp = retrieveAProjectReleasesFileWithHttpInfo(organizationSlug, projectSlug, version, fileId, download);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a file for a given release.
     * @param organizationSlug The slug of the organization. (required)
     * @param projectSlug The slug of the project. (required)
     * @param version The version identifier of the release. (required)
     * @param fileId The ID of the file to retrieve. (required)
     * @param download If this is set to true, then the response payload will be the raw file contents. Otherwise, the response will be the file metadata as JSON. (optional)
     * @return ApiResponse&lt;ListAnOrganizationSReleaseFiles200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAnOrganizationSReleaseFiles200ResponseInner> retrieveAProjectReleasesFileWithHttpInfo(String organizationSlug, String projectSlug, String version, String fileId, Boolean download) throws ApiException {
        okhttp3.Call localVarCall = retrieveAProjectReleasesFileValidateBeforeCall(organizationSlug, projectSlug, version, fileId, download, null);
        Type localVarReturnType = new TypeToken<ListAnOrganizationSReleaseFiles200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a file for a given release.
     * @param organizationSlug The slug of the organization. (required)
     * @param projectSlug The slug of the project. (required)
     * @param version The version identifier of the release. (required)
     * @param fileId The ID of the file to retrieve. (required)
     * @param download If this is set to true, then the response payload will be the raw file contents. Otherwise, the response will be the file metadata as JSON. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAProjectReleasesFileAsync(String organizationSlug, String projectSlug, String version, String fileId, Boolean download, final ApiCallback<ListAnOrganizationSReleaseFiles200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveAProjectReleasesFileValidateBeforeCall(organizationSlug, projectSlug, version, fileId, download, _callback);
        Type localVarReturnType = new TypeToken<ListAnOrganizationSReleaseFiles200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveAnOrganizationReleasesFile
     * @param organizationSlug The slug of the organization. (required)
     * @param version The version identifier of the release. (required)
     * @param fileId The ID of the file to retrieve. (required)
     * @param download If this is set to true, then the response payload will be the raw file contents. Otherwise, the response will be the file metadata as JSON. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAnOrganizationReleasesFileCall(String organizationSlug, String version, String fileId, Boolean download, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/organizations/{organization_slug}/releases/{version}/files/{file_id}/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()))
            .replace("{" + "file_id" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (download != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("download", download));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveAnOrganizationReleasesFileValidateBeforeCall(String organizationSlug, String version, String fileId, Boolean download, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling retrieveAnOrganizationReleasesFile(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling retrieveAnOrganizationReleasesFile(Async)");
        }

        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling retrieveAnOrganizationReleasesFile(Async)");
        }

        return retrieveAnOrganizationReleasesFileCall(organizationSlug, version, fileId, download, _callback);

    }

    /**
     * 
     * Retrieve a file for a given release.
     * @param organizationSlug The slug of the organization. (required)
     * @param version The version identifier of the release. (required)
     * @param fileId The ID of the file to retrieve. (required)
     * @param download If this is set to true, then the response payload will be the raw file contents. Otherwise, the response will be the file metadata as JSON. (optional)
     * @return ListAnOrganizationSReleaseFiles200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ListAnOrganizationSReleaseFiles200ResponseInner retrieveAnOrganizationReleasesFile(String organizationSlug, String version, String fileId, Boolean download) throws ApiException {
        ApiResponse<ListAnOrganizationSReleaseFiles200ResponseInner> localVarResp = retrieveAnOrganizationReleasesFileWithHttpInfo(organizationSlug, version, fileId, download);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a file for a given release.
     * @param organizationSlug The slug of the organization. (required)
     * @param version The version identifier of the release. (required)
     * @param fileId The ID of the file to retrieve. (required)
     * @param download If this is set to true, then the response payload will be the raw file contents. Otherwise, the response will be the file metadata as JSON. (optional)
     * @return ApiResponse&lt;ListAnOrganizationSReleaseFiles200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAnOrganizationSReleaseFiles200ResponseInner> retrieveAnOrganizationReleasesFileWithHttpInfo(String organizationSlug, String version, String fileId, Boolean download) throws ApiException {
        okhttp3.Call localVarCall = retrieveAnOrganizationReleasesFileValidateBeforeCall(organizationSlug, version, fileId, download, null);
        Type localVarReturnType = new TypeToken<ListAnOrganizationSReleaseFiles200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a file for a given release.
     * @param organizationSlug The slug of the organization. (required)
     * @param version The version identifier of the release. (required)
     * @param fileId The ID of the file to retrieve. (required)
     * @param download If this is set to true, then the response payload will be the raw file contents. Otherwise, the response will be the file metadata as JSON. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAnOrganizationReleasesFileAsync(String organizationSlug, String version, String fileId, Boolean download, final ApiCallback<ListAnOrganizationSReleaseFiles200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveAnOrganizationReleasesFileValidateBeforeCall(organizationSlug, version, fileId, download, _callback);
        Type localVarReturnType = new TypeToken<ListAnOrganizationSReleaseFiles200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveAnOrganizationsReleases
     * @param organizationSlug The slug of the organization the release belongs to. (required)
     * @param version The version identifier of the release. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAnOrganizationsReleasesCall(String organizationSlug, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/organizations/{organization_slug}/releases/{version}/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveAnOrganizationsReleasesValidateBeforeCall(String organizationSlug, String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling retrieveAnOrganizationsReleases(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling retrieveAnOrganizationsReleases(Async)");
        }

        return retrieveAnOrganizationsReleasesCall(organizationSlug, version, _callback);

    }

    /**
     * 
     * Return a release for a given organization.
     * @param organizationSlug The slug of the organization the release belongs to. (required)
     * @param version The version identifier of the release. (required)
     * @return RetrieveAnEventForAProject200ResponseReleaseOneOf
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveAnEventForAProject200ResponseReleaseOneOf retrieveAnOrganizationsReleases(String organizationSlug, String version) throws ApiException {
        ApiResponse<RetrieveAnEventForAProject200ResponseReleaseOneOf> localVarResp = retrieveAnOrganizationsReleasesWithHttpInfo(organizationSlug, version);
        return localVarResp.getData();
    }

    /**
     * 
     * Return a release for a given organization.
     * @param organizationSlug The slug of the organization the release belongs to. (required)
     * @param version The version identifier of the release. (required)
     * @return ApiResponse&lt;RetrieveAnEventForAProject200ResponseReleaseOneOf&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveAnEventForAProject200ResponseReleaseOneOf> retrieveAnOrganizationsReleasesWithHttpInfo(String organizationSlug, String version) throws ApiException {
        okhttp3.Call localVarCall = retrieveAnOrganizationsReleasesValidateBeforeCall(organizationSlug, version, null);
        Type localVarReturnType = new TypeToken<RetrieveAnEventForAProject200ResponseReleaseOneOf>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return a release for a given organization.
     * @param organizationSlug The slug of the organization the release belongs to. (required)
     * @param version The version identifier of the release. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAnOrganizationsReleasesAsync(String organizationSlug, String version, final ApiCallback<RetrieveAnEventForAProject200ResponseReleaseOneOf> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveAnOrganizationsReleasesValidateBeforeCall(organizationSlug, version, _callback);
        Type localVarReturnType = new TypeToken<RetrieveAnEventForAProject200ResponseReleaseOneOf>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveFilesChangedInAReleasesCommits
     * @param organizationSlug The slug of the organization the release belongs to. (required)
     * @param version The version identifier of the release. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveFilesChangedInAReleasesCommitsCall(String organizationSlug, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/organizations/{organization_slug}/releases/{version}/commitfiles/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveFilesChangedInAReleasesCommitsValidateBeforeCall(String organizationSlug, String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling retrieveFilesChangedInAReleasesCommits(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling retrieveFilesChangedInAReleasesCommits(Async)");
        }

        return retrieveFilesChangedInAReleasesCommitsCall(organizationSlug, version, _callback);

    }

    /**
     * 
     * Retrieve files changed in a release&#39;s commits
     * @param organizationSlug The slug of the organization the release belongs to. (required)
     * @param version The version identifier of the release. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void retrieveFilesChangedInAReleasesCommits(String organizationSlug, String version) throws ApiException {
        retrieveFilesChangedInAReleasesCommitsWithHttpInfo(organizationSlug, version);
    }

    /**
     * 
     * Retrieve files changed in a release&#39;s commits
     * @param organizationSlug The slug of the organization the release belongs to. (required)
     * @param version The version identifier of the release. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> retrieveFilesChangedInAReleasesCommitsWithHttpInfo(String organizationSlug, String version) throws ApiException {
        okhttp3.Call localVarCall = retrieveFilesChangedInAReleasesCommitsValidateBeforeCall(organizationSlug, version, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Retrieve files changed in a release&#39;s commits
     * @param organizationSlug The slug of the organization the release belongs to. (required)
     * @param version The version identifier of the release. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveFilesChangedInAReleasesCommitsAsync(String organizationSlug, String version, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveFilesChangedInAReleasesCommitsValidateBeforeCall(organizationSlug, version, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveReleaseHealthSessionStatistics
     * @param organizationSlug The slug of the organization. (required)
     * @param project The ID of the projects to filter by.  Use &#x60;-1&#x60; to include all accessible projects. (required)
     * @param field The list of fields to query.  The available fields are   - &#x60;sum(session)&#x60;   - &#x60;count_unique(user)&#x60;   - &#x60;avg&#x60;, &#x60;p50&#x60;, &#x60;p75&#x60;, &#x60;p90&#x60;, &#x60;p95&#x60;, &#x60;p99&#x60;, &#x60;max&#x60; applied to &#x60;session.duration&#x60;. For example, &#x60;p99(session.duration)&#x60;. Session duration is [no longer being recorded](https://github.com/getsentry/sentry/discussions/42716) as of on Jan 12, 2023. Returned data may be incomplete.   - &#x60;crash_rate&#x60;, &#x60;crash_free_rate&#x60; applied to &#x60;user&#x60; or &#x60;session&#x60;. For example, &#x60;crash_free_rate(user)&#x60; (required)
     * @param environment The name of environments to filter by. (optional)
     * @param groupBy The list of properties to group by.  The available groupBy conditions are &#x60;project&#x60;, &#x60;release&#x60;, &#x60;environment&#x60; and &#x60;session.status&#x60;.  Grouping by &#x60;session.status&#x60; does not work when &#x60;crash_rate&#x60; or &#x60;crash_free_rate&#x60; are queried. (optional)
     * @param orderBy An optional field to order by, which must be one of the fields provided in &#x60;field&#x60;. Use &#x60;-&#x60; for descending order, for example &#x60;-sum(session)&#x60;.   This alters the order of the &#x60;groups&#x60; returned, so it only makes sense in combination with &#x60;groupBy&#x60;.   Ordering by more than one field is currently not supported. (optional)
     * @param query A free-form query that is applied as a filter.  An example query could be &#x60;release:\&quot;1.1.0\&quot; or release:\&quot;1.2.0\&quot;&#x60;. (optional)
     * @param statsPeriod This defines the range of the time series, relative to now.  The range is given in a &#x60;\&quot;&lt;number&gt;&lt;unit&gt;\&quot;&#x60; format.  For example &#x60;1d&#x60; for a one day range. Possible units are &#x60;m&#x60; for minutes, &#x60;h&#x60; for hours, &#x60;d&#x60; for days and &#x60;w&#x60; for weeks.  It defaults to &#x60;90d&#x60;. (optional)
     * @param interval This is the resolution of the time series, given in the same format as &#x60;statsPeriod&#x60;.  The default resolution is &#x60;1h&#x60; and the minimum resolution is currently restricted to &#x60;1h&#x60; as well.  Intervals larger than &#x60;1d&#x60; are not supported, and the interval has to cleanly divide one day. (optional)
     * @param statsPeriodStart This defines the start of the time series range, in the same format as the &#x60;interval&#x60;, relative to now. (optional)
     * @param statsPeriodEnd This defines the end of the time series range, in the same format as the &#x60;interval&#x60;, relative to now. (optional)
     * @param start This defines the start of the time series range as an explicit datetime. (optional)
     * @param end This defines the inclusive end of the time series range as an explicit datetime. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Time-series Session Statistics. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Wrong Parameters </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveReleaseHealthSessionStatisticsCall(String organizationSlug, List<Integer> project, List<String> field, List<String> environment, List<String> groupBy, String orderBy, String query, String statsPeriod, String interval, String statsPeriodStart, String statsPeriodEnd, OffsetDateTime start, OffsetDateTime end, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/organizations/{organization_slug}/sessions/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (project != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "project", project));
        }

        if (field != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "field", field));
        }

        if (environment != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "environment", environment));
        }

        if (groupBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "groupBy", groupBy));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (statsPeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("statsPeriod", statsPeriod));
        }

        if (interval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval", interval));
        }

        if (statsPeriodStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("statsPeriodStart", statsPeriodStart));
        }

        if (statsPeriodEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("statsPeriodEnd", statsPeriodEnd));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveReleaseHealthSessionStatisticsValidateBeforeCall(String organizationSlug, List<Integer> project, List<String> field, List<String> environment, List<String> groupBy, String orderBy, String query, String statsPeriod, String interval, String statsPeriodStart, String statsPeriodEnd, OffsetDateTime start, OffsetDateTime end, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling retrieveReleaseHealthSessionStatistics(Async)");
        }

        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling retrieveReleaseHealthSessionStatistics(Async)");
        }

        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling retrieveReleaseHealthSessionStatistics(Async)");
        }

        return retrieveReleaseHealthSessionStatisticsCall(organizationSlug, project, field, environment, groupBy, orderBy, query, statsPeriod, interval, statsPeriodStart, statsPeriodEnd, start, end, _callback);

    }

    /**
     * 
     * Returns a time series of release health session statistics for projects bound to an organization.  The interval and date range are subject to certain restrictions and rounding rules.  The date range is rounded to align with the interval, and is rounded to at least one hour. The interval can at most be one day and at least one hour currently. It has to cleanly divide one day, for rounding reasons.  Apart from the query parameters listed below, this endpoint also supports the usual [pagination parameters](https://docs.sentry.io/api/pagination/).
     * @param organizationSlug The slug of the organization. (required)
     * @param project The ID of the projects to filter by.  Use &#x60;-1&#x60; to include all accessible projects. (required)
     * @param field The list of fields to query.  The available fields are   - &#x60;sum(session)&#x60;   - &#x60;count_unique(user)&#x60;   - &#x60;avg&#x60;, &#x60;p50&#x60;, &#x60;p75&#x60;, &#x60;p90&#x60;, &#x60;p95&#x60;, &#x60;p99&#x60;, &#x60;max&#x60; applied to &#x60;session.duration&#x60;. For example, &#x60;p99(session.duration)&#x60;. Session duration is [no longer being recorded](https://github.com/getsentry/sentry/discussions/42716) as of on Jan 12, 2023. Returned data may be incomplete.   - &#x60;crash_rate&#x60;, &#x60;crash_free_rate&#x60; applied to &#x60;user&#x60; or &#x60;session&#x60;. For example, &#x60;crash_free_rate(user)&#x60; (required)
     * @param environment The name of environments to filter by. (optional)
     * @param groupBy The list of properties to group by.  The available groupBy conditions are &#x60;project&#x60;, &#x60;release&#x60;, &#x60;environment&#x60; and &#x60;session.status&#x60;.  Grouping by &#x60;session.status&#x60; does not work when &#x60;crash_rate&#x60; or &#x60;crash_free_rate&#x60; are queried. (optional)
     * @param orderBy An optional field to order by, which must be one of the fields provided in &#x60;field&#x60;. Use &#x60;-&#x60; for descending order, for example &#x60;-sum(session)&#x60;.   This alters the order of the &#x60;groups&#x60; returned, so it only makes sense in combination with &#x60;groupBy&#x60;.   Ordering by more than one field is currently not supported. (optional)
     * @param query A free-form query that is applied as a filter.  An example query could be &#x60;release:\&quot;1.1.0\&quot; or release:\&quot;1.2.0\&quot;&#x60;. (optional)
     * @param statsPeriod This defines the range of the time series, relative to now.  The range is given in a &#x60;\&quot;&lt;number&gt;&lt;unit&gt;\&quot;&#x60; format.  For example &#x60;1d&#x60; for a one day range. Possible units are &#x60;m&#x60; for minutes, &#x60;h&#x60; for hours, &#x60;d&#x60; for days and &#x60;w&#x60; for weeks.  It defaults to &#x60;90d&#x60;. (optional)
     * @param interval This is the resolution of the time series, given in the same format as &#x60;statsPeriod&#x60;.  The default resolution is &#x60;1h&#x60; and the minimum resolution is currently restricted to &#x60;1h&#x60; as well.  Intervals larger than &#x60;1d&#x60; are not supported, and the interval has to cleanly divide one day. (optional)
     * @param statsPeriodStart This defines the start of the time series range, in the same format as the &#x60;interval&#x60;, relative to now. (optional)
     * @param statsPeriodEnd This defines the end of the time series range, in the same format as the &#x60;interval&#x60;, relative to now. (optional)
     * @param start This defines the start of the time series range as an explicit datetime. (optional)
     * @param end This defines the inclusive end of the time series range as an explicit datetime. (optional)
     * @return RetrieveReleaseHealthSessionStatistics200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Time-series Session Statistics. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Wrong Parameters </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveReleaseHealthSessionStatistics200Response retrieveReleaseHealthSessionStatistics(String organizationSlug, List<Integer> project, List<String> field, List<String> environment, List<String> groupBy, String orderBy, String query, String statsPeriod, String interval, String statsPeriodStart, String statsPeriodEnd, OffsetDateTime start, OffsetDateTime end) throws ApiException {
        ApiResponse<RetrieveReleaseHealthSessionStatistics200Response> localVarResp = retrieveReleaseHealthSessionStatisticsWithHttpInfo(organizationSlug, project, field, environment, groupBy, orderBy, query, statsPeriod, interval, statsPeriodStart, statsPeriodEnd, start, end);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a time series of release health session statistics for projects bound to an organization.  The interval and date range are subject to certain restrictions and rounding rules.  The date range is rounded to align with the interval, and is rounded to at least one hour. The interval can at most be one day and at least one hour currently. It has to cleanly divide one day, for rounding reasons.  Apart from the query parameters listed below, this endpoint also supports the usual [pagination parameters](https://docs.sentry.io/api/pagination/).
     * @param organizationSlug The slug of the organization. (required)
     * @param project The ID of the projects to filter by.  Use &#x60;-1&#x60; to include all accessible projects. (required)
     * @param field The list of fields to query.  The available fields are   - &#x60;sum(session)&#x60;   - &#x60;count_unique(user)&#x60;   - &#x60;avg&#x60;, &#x60;p50&#x60;, &#x60;p75&#x60;, &#x60;p90&#x60;, &#x60;p95&#x60;, &#x60;p99&#x60;, &#x60;max&#x60; applied to &#x60;session.duration&#x60;. For example, &#x60;p99(session.duration)&#x60;. Session duration is [no longer being recorded](https://github.com/getsentry/sentry/discussions/42716) as of on Jan 12, 2023. Returned data may be incomplete.   - &#x60;crash_rate&#x60;, &#x60;crash_free_rate&#x60; applied to &#x60;user&#x60; or &#x60;session&#x60;. For example, &#x60;crash_free_rate(user)&#x60; (required)
     * @param environment The name of environments to filter by. (optional)
     * @param groupBy The list of properties to group by.  The available groupBy conditions are &#x60;project&#x60;, &#x60;release&#x60;, &#x60;environment&#x60; and &#x60;session.status&#x60;.  Grouping by &#x60;session.status&#x60; does not work when &#x60;crash_rate&#x60; or &#x60;crash_free_rate&#x60; are queried. (optional)
     * @param orderBy An optional field to order by, which must be one of the fields provided in &#x60;field&#x60;. Use &#x60;-&#x60; for descending order, for example &#x60;-sum(session)&#x60;.   This alters the order of the &#x60;groups&#x60; returned, so it only makes sense in combination with &#x60;groupBy&#x60;.   Ordering by more than one field is currently not supported. (optional)
     * @param query A free-form query that is applied as a filter.  An example query could be &#x60;release:\&quot;1.1.0\&quot; or release:\&quot;1.2.0\&quot;&#x60;. (optional)
     * @param statsPeriod This defines the range of the time series, relative to now.  The range is given in a &#x60;\&quot;&lt;number&gt;&lt;unit&gt;\&quot;&#x60; format.  For example &#x60;1d&#x60; for a one day range. Possible units are &#x60;m&#x60; for minutes, &#x60;h&#x60; for hours, &#x60;d&#x60; for days and &#x60;w&#x60; for weeks.  It defaults to &#x60;90d&#x60;. (optional)
     * @param interval This is the resolution of the time series, given in the same format as &#x60;statsPeriod&#x60;.  The default resolution is &#x60;1h&#x60; and the minimum resolution is currently restricted to &#x60;1h&#x60; as well.  Intervals larger than &#x60;1d&#x60; are not supported, and the interval has to cleanly divide one day. (optional)
     * @param statsPeriodStart This defines the start of the time series range, in the same format as the &#x60;interval&#x60;, relative to now. (optional)
     * @param statsPeriodEnd This defines the end of the time series range, in the same format as the &#x60;interval&#x60;, relative to now. (optional)
     * @param start This defines the start of the time series range as an explicit datetime. (optional)
     * @param end This defines the inclusive end of the time series range as an explicit datetime. (optional)
     * @return ApiResponse&lt;RetrieveReleaseHealthSessionStatistics200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Time-series Session Statistics. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Wrong Parameters </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveReleaseHealthSessionStatistics200Response> retrieveReleaseHealthSessionStatisticsWithHttpInfo(String organizationSlug, List<Integer> project, List<String> field, List<String> environment, List<String> groupBy, String orderBy, String query, String statsPeriod, String interval, String statsPeriodStart, String statsPeriodEnd, OffsetDateTime start, OffsetDateTime end) throws ApiException {
        okhttp3.Call localVarCall = retrieveReleaseHealthSessionStatisticsValidateBeforeCall(organizationSlug, project, field, environment, groupBy, orderBy, query, statsPeriod, interval, statsPeriodStart, statsPeriodEnd, start, end, null);
        Type localVarReturnType = new TypeToken<RetrieveReleaseHealthSessionStatistics200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a time series of release health session statistics for projects bound to an organization.  The interval and date range are subject to certain restrictions and rounding rules.  The date range is rounded to align with the interval, and is rounded to at least one hour. The interval can at most be one day and at least one hour currently. It has to cleanly divide one day, for rounding reasons.  Apart from the query parameters listed below, this endpoint also supports the usual [pagination parameters](https://docs.sentry.io/api/pagination/).
     * @param organizationSlug The slug of the organization. (required)
     * @param project The ID of the projects to filter by.  Use &#x60;-1&#x60; to include all accessible projects. (required)
     * @param field The list of fields to query.  The available fields are   - &#x60;sum(session)&#x60;   - &#x60;count_unique(user)&#x60;   - &#x60;avg&#x60;, &#x60;p50&#x60;, &#x60;p75&#x60;, &#x60;p90&#x60;, &#x60;p95&#x60;, &#x60;p99&#x60;, &#x60;max&#x60; applied to &#x60;session.duration&#x60;. For example, &#x60;p99(session.duration)&#x60;. Session duration is [no longer being recorded](https://github.com/getsentry/sentry/discussions/42716) as of on Jan 12, 2023. Returned data may be incomplete.   - &#x60;crash_rate&#x60;, &#x60;crash_free_rate&#x60; applied to &#x60;user&#x60; or &#x60;session&#x60;. For example, &#x60;crash_free_rate(user)&#x60; (required)
     * @param environment The name of environments to filter by. (optional)
     * @param groupBy The list of properties to group by.  The available groupBy conditions are &#x60;project&#x60;, &#x60;release&#x60;, &#x60;environment&#x60; and &#x60;session.status&#x60;.  Grouping by &#x60;session.status&#x60; does not work when &#x60;crash_rate&#x60; or &#x60;crash_free_rate&#x60; are queried. (optional)
     * @param orderBy An optional field to order by, which must be one of the fields provided in &#x60;field&#x60;. Use &#x60;-&#x60; for descending order, for example &#x60;-sum(session)&#x60;.   This alters the order of the &#x60;groups&#x60; returned, so it only makes sense in combination with &#x60;groupBy&#x60;.   Ordering by more than one field is currently not supported. (optional)
     * @param query A free-form query that is applied as a filter.  An example query could be &#x60;release:\&quot;1.1.0\&quot; or release:\&quot;1.2.0\&quot;&#x60;. (optional)
     * @param statsPeriod This defines the range of the time series, relative to now.  The range is given in a &#x60;\&quot;&lt;number&gt;&lt;unit&gt;\&quot;&#x60; format.  For example &#x60;1d&#x60; for a one day range. Possible units are &#x60;m&#x60; for minutes, &#x60;h&#x60; for hours, &#x60;d&#x60; for days and &#x60;w&#x60; for weeks.  It defaults to &#x60;90d&#x60;. (optional)
     * @param interval This is the resolution of the time series, given in the same format as &#x60;statsPeriod&#x60;.  The default resolution is &#x60;1h&#x60; and the minimum resolution is currently restricted to &#x60;1h&#x60; as well.  Intervals larger than &#x60;1d&#x60; are not supported, and the interval has to cleanly divide one day. (optional)
     * @param statsPeriodStart This defines the start of the time series range, in the same format as the &#x60;interval&#x60;, relative to now. (optional)
     * @param statsPeriodEnd This defines the end of the time series range, in the same format as the &#x60;interval&#x60;, relative to now. (optional)
     * @param start This defines the start of the time series range as an explicit datetime. (optional)
     * @param end This defines the inclusive end of the time series range as an explicit datetime. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Time-series Session Statistics. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Wrong Parameters </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveReleaseHealthSessionStatisticsAsync(String organizationSlug, List<Integer> project, List<String> field, List<String> environment, List<String> groupBy, String orderBy, String query, String statsPeriod, String interval, String statsPeriodStart, String statsPeriodEnd, OffsetDateTime start, OffsetDateTime end, final ApiCallback<RetrieveReleaseHealthSessionStatistics200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveReleaseHealthSessionStatisticsValidateBeforeCall(organizationSlug, project, field, environment, groupBy, orderBy, query, statsPeriod, interval, statsPeriodStart, statsPeriodEnd, start, end, _callback);
        Type localVarReturnType = new TypeToken<RetrieveReleaseHealthSessionStatistics200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAProjectReleaseFile
     * @param organizationSlug The slug of the organization. (required)
     * @param projectSlug The slug of the project. (required)
     * @param version The version identifier of the release. (required)
     * @param fileId The ID of the file to retrieve. (required)
     * @param updateAnOrganizationReleaseFileRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAProjectReleaseFileCall(String organizationSlug, String projectSlug, String version, String fileId, UpdateAnOrganizationReleaseFileRequest updateAnOrganizationReleaseFileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAnOrganizationReleaseFileRequest;

        // create path and map variables
        String localVarPath = "/api/0/projects/{organization_slug}/{project_slug}/releases/{version}/files/{file_id}/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()))
            .replace("{" + "file_id" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAProjectReleaseFileValidateBeforeCall(String organizationSlug, String projectSlug, String version, String fileId, UpdateAnOrganizationReleaseFileRequest updateAnOrganizationReleaseFileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling updateAProjectReleaseFile(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling updateAProjectReleaseFile(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling updateAProjectReleaseFile(Async)");
        }

        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling updateAProjectReleaseFile(Async)");
        }

        return updateAProjectReleaseFileCall(organizationSlug, projectSlug, version, fileId, updateAnOrganizationReleaseFileRequest, _callback);

    }

    /**
     * 
     * Update a project release file.
     * @param organizationSlug The slug of the organization. (required)
     * @param projectSlug The slug of the project. (required)
     * @param version The version identifier of the release. (required)
     * @param fileId The ID of the file to retrieve. (required)
     * @param updateAnOrganizationReleaseFileRequest  (optional)
     * @return ListAnOrganizationSReleaseFiles200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ListAnOrganizationSReleaseFiles200ResponseInner updateAProjectReleaseFile(String organizationSlug, String projectSlug, String version, String fileId, UpdateAnOrganizationReleaseFileRequest updateAnOrganizationReleaseFileRequest) throws ApiException {
        ApiResponse<ListAnOrganizationSReleaseFiles200ResponseInner> localVarResp = updateAProjectReleaseFileWithHttpInfo(organizationSlug, projectSlug, version, fileId, updateAnOrganizationReleaseFileRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a project release file.
     * @param organizationSlug The slug of the organization. (required)
     * @param projectSlug The slug of the project. (required)
     * @param version The version identifier of the release. (required)
     * @param fileId The ID of the file to retrieve. (required)
     * @param updateAnOrganizationReleaseFileRequest  (optional)
     * @return ApiResponse&lt;ListAnOrganizationSReleaseFiles200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAnOrganizationSReleaseFiles200ResponseInner> updateAProjectReleaseFileWithHttpInfo(String organizationSlug, String projectSlug, String version, String fileId, UpdateAnOrganizationReleaseFileRequest updateAnOrganizationReleaseFileRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAProjectReleaseFileValidateBeforeCall(organizationSlug, projectSlug, version, fileId, updateAnOrganizationReleaseFileRequest, null);
        Type localVarReturnType = new TypeToken<ListAnOrganizationSReleaseFiles200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a project release file.
     * @param organizationSlug The slug of the organization. (required)
     * @param projectSlug The slug of the project. (required)
     * @param version The version identifier of the release. (required)
     * @param fileId The ID of the file to retrieve. (required)
     * @param updateAnOrganizationReleaseFileRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAProjectReleaseFileAsync(String organizationSlug, String projectSlug, String version, String fileId, UpdateAnOrganizationReleaseFileRequest updateAnOrganizationReleaseFileRequest, final ApiCallback<ListAnOrganizationSReleaseFiles200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAProjectReleaseFileValidateBeforeCall(organizationSlug, projectSlug, version, fileId, updateAnOrganizationReleaseFileRequest, _callback);
        Type localVarReturnType = new TypeToken<ListAnOrganizationSReleaseFiles200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAnOrganizationReleaseFile
     * @param organizationSlug The slug of the organization. (required)
     * @param version The version identifier of the release. (required)
     * @param fileId The ID of the file to retrieve. (required)
     * @param updateAnOrganizationReleaseFileRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAnOrganizationReleaseFileCall(String organizationSlug, String version, String fileId, UpdateAnOrganizationReleaseFileRequest updateAnOrganizationReleaseFileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAnOrganizationReleaseFileRequest;

        // create path and map variables
        String localVarPath = "/api/0/organizations/{organization_slug}/releases/{version}/files/{file_id}/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()))
            .replace("{" + "file_id" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAnOrganizationReleaseFileValidateBeforeCall(String organizationSlug, String version, String fileId, UpdateAnOrganizationReleaseFileRequest updateAnOrganizationReleaseFileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling updateAnOrganizationReleaseFile(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling updateAnOrganizationReleaseFile(Async)");
        }

        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling updateAnOrganizationReleaseFile(Async)");
        }

        return updateAnOrganizationReleaseFileCall(organizationSlug, version, fileId, updateAnOrganizationReleaseFileRequest, _callback);

    }

    /**
     * 
     * Update an organization release file.
     * @param organizationSlug The slug of the organization. (required)
     * @param version The version identifier of the release. (required)
     * @param fileId The ID of the file to retrieve. (required)
     * @param updateAnOrganizationReleaseFileRequest  (optional)
     * @return ListAnOrganizationSReleaseFiles200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ListAnOrganizationSReleaseFiles200ResponseInner updateAnOrganizationReleaseFile(String organizationSlug, String version, String fileId, UpdateAnOrganizationReleaseFileRequest updateAnOrganizationReleaseFileRequest) throws ApiException {
        ApiResponse<ListAnOrganizationSReleaseFiles200ResponseInner> localVarResp = updateAnOrganizationReleaseFileWithHttpInfo(organizationSlug, version, fileId, updateAnOrganizationReleaseFileRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Update an organization release file.
     * @param organizationSlug The slug of the organization. (required)
     * @param version The version identifier of the release. (required)
     * @param fileId The ID of the file to retrieve. (required)
     * @param updateAnOrganizationReleaseFileRequest  (optional)
     * @return ApiResponse&lt;ListAnOrganizationSReleaseFiles200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAnOrganizationSReleaseFiles200ResponseInner> updateAnOrganizationReleaseFileWithHttpInfo(String organizationSlug, String version, String fileId, UpdateAnOrganizationReleaseFileRequest updateAnOrganizationReleaseFileRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAnOrganizationReleaseFileValidateBeforeCall(organizationSlug, version, fileId, updateAnOrganizationReleaseFileRequest, null);
        Type localVarReturnType = new TypeToken<ListAnOrganizationSReleaseFiles200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update an organization release file.
     * @param organizationSlug The slug of the organization. (required)
     * @param version The version identifier of the release. (required)
     * @param fileId The ID of the file to retrieve. (required)
     * @param updateAnOrganizationReleaseFileRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAnOrganizationReleaseFileAsync(String organizationSlug, String version, String fileId, UpdateAnOrganizationReleaseFileRequest updateAnOrganizationReleaseFileRequest, final ApiCallback<ListAnOrganizationSReleaseFiles200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAnOrganizationReleaseFileValidateBeforeCall(organizationSlug, version, fileId, updateAnOrganizationReleaseFileRequest, _callback);
        Type localVarReturnType = new TypeToken<ListAnOrganizationSReleaseFiles200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAnOrganizationsRelease
     * @param organizationSlug The slug of the organization the release belongs to. (required)
     * @param version The version identifier of the release. (required)
     * @param updateAnOrganizationSReleaseRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAnOrganizationsReleaseCall(String organizationSlug, String version, UpdateAnOrganizationSReleaseRequest updateAnOrganizationSReleaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAnOrganizationSReleaseRequest;

        // create path and map variables
        String localVarPath = "/api/0/organizations/{organization_slug}/releases/{version}/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAnOrganizationsReleaseValidateBeforeCall(String organizationSlug, String version, UpdateAnOrganizationSReleaseRequest updateAnOrganizationSReleaseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling updateAnOrganizationsRelease(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling updateAnOrganizationsRelease(Async)");
        }

        return updateAnOrganizationsReleaseCall(organizationSlug, version, updateAnOrganizationSReleaseRequest, _callback);

    }

    /**
     * 
     * Update a release for a given organization.
     * @param organizationSlug The slug of the organization the release belongs to. (required)
     * @param version The version identifier of the release. (required)
     * @param updateAnOrganizationSReleaseRequest  (optional)
     * @return RetrieveAnEventForAProject200ResponseReleaseOneOf
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveAnEventForAProject200ResponseReleaseOneOf updateAnOrganizationsRelease(String organizationSlug, String version, UpdateAnOrganizationSReleaseRequest updateAnOrganizationSReleaseRequest) throws ApiException {
        ApiResponse<RetrieveAnEventForAProject200ResponseReleaseOneOf> localVarResp = updateAnOrganizationsReleaseWithHttpInfo(organizationSlug, version, updateAnOrganizationSReleaseRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a release for a given organization.
     * @param organizationSlug The slug of the organization the release belongs to. (required)
     * @param version The version identifier of the release. (required)
     * @param updateAnOrganizationSReleaseRequest  (optional)
     * @return ApiResponse&lt;RetrieveAnEventForAProject200ResponseReleaseOneOf&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveAnEventForAProject200ResponseReleaseOneOf> updateAnOrganizationsReleaseWithHttpInfo(String organizationSlug, String version, UpdateAnOrganizationSReleaseRequest updateAnOrganizationSReleaseRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAnOrganizationsReleaseValidateBeforeCall(organizationSlug, version, updateAnOrganizationSReleaseRequest, null);
        Type localVarReturnType = new TypeToken<RetrieveAnEventForAProject200ResponseReleaseOneOf>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a release for a given organization.
     * @param organizationSlug The slug of the organization the release belongs to. (required)
     * @param version The version identifier of the release. (required)
     * @param updateAnOrganizationSReleaseRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAnOrganizationsReleaseAsync(String organizationSlug, String version, UpdateAnOrganizationSReleaseRequest updateAnOrganizationSReleaseRequest, final ApiCallback<RetrieveAnEventForAProject200ResponseReleaseOneOf> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAnOrganizationsReleaseValidateBeforeCall(organizationSlug, version, updateAnOrganizationSReleaseRequest, _callback);
        Type localVarReturnType = new TypeToken<RetrieveAnEventForAProject200ResponseReleaseOneOf>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadANewOrganizationReleaseFile
     * @param organizationSlug The slug of the organization. (required)
     * @param version The version identifier of the release. (required)
     * @param _file The multipart encoded file. (required)
     * @param name The name (full path) of the file. (optional)
     * @param dist The name of the dist. (optional)
     * @param header This parameter can be supplied multiple times to attach headers to the file. Each header is a string in the format &#x60;key:value&#x60;. For instance it can be used to define a content type. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadANewOrganizationReleaseFileCall(String organizationSlug, String version, File _file, String name, String dist, String header, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/organizations/{organization_slug}/releases/{version}/files/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (dist != null) {
            localVarFormParams.put("dist", dist);
        }

        if (header != null) {
            localVarFormParams.put("header", header);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadANewOrganizationReleaseFileValidateBeforeCall(String organizationSlug, String version, File _file, String name, String dist, String header, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling uploadANewOrganizationReleaseFile(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling uploadANewOrganizationReleaseFile(Async)");
        }

        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling uploadANewOrganizationReleaseFile(Async)");
        }

        return uploadANewOrganizationReleaseFileCall(organizationSlug, version, _file, name, dist, header, _callback);

    }

    /**
     * 
     * Upload a new organization release file.
     * @param organizationSlug The slug of the organization. (required)
     * @param version The version identifier of the release. (required)
     * @param _file The multipart encoded file. (required)
     * @param name The name (full path) of the file. (optional)
     * @param dist The name of the dist. (optional)
     * @param header This parameter can be supplied multiple times to attach headers to the file. Each header is a string in the format &#x60;key:value&#x60;. For instance it can be used to define a content type. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void uploadANewOrganizationReleaseFile(String organizationSlug, String version, File _file, String name, String dist, String header) throws ApiException {
        uploadANewOrganizationReleaseFileWithHttpInfo(organizationSlug, version, _file, name, dist, header);
    }

    /**
     * 
     * Upload a new organization release file.
     * @param organizationSlug The slug of the organization. (required)
     * @param version The version identifier of the release. (required)
     * @param _file The multipart encoded file. (required)
     * @param name The name (full path) of the file. (optional)
     * @param dist The name of the dist. (optional)
     * @param header This parameter can be supplied multiple times to attach headers to the file. Each header is a string in the format &#x60;key:value&#x60;. For instance it can be used to define a content type. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> uploadANewOrganizationReleaseFileWithHttpInfo(String organizationSlug, String version, File _file, String name, String dist, String header) throws ApiException {
        okhttp3.Call localVarCall = uploadANewOrganizationReleaseFileValidateBeforeCall(organizationSlug, version, _file, name, dist, header, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Upload a new organization release file.
     * @param organizationSlug The slug of the organization. (required)
     * @param version The version identifier of the release. (required)
     * @param _file The multipart encoded file. (required)
     * @param name The name (full path) of the file. (optional)
     * @param dist The name of the dist. (optional)
     * @param header This parameter can be supplied multiple times to attach headers to the file. Each header is a string in the format &#x60;key:value&#x60;. For instance it can be used to define a content type. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadANewOrganizationReleaseFileAsync(String organizationSlug, String version, File _file, String name, String dist, String header, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadANewOrganizationReleaseFileValidateBeforeCall(organizationSlug, version, _file, name, dist, header, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadANewProjectReleaseFile
     * @param organizationSlug The slug of the organization. (required)
     * @param projectSlug The slug of the project. (required)
     * @param version The version identifier of the release. (required)
     * @param _file The multipart encoded file. (required)
     * @param name The name (full path) of the file. (optional)
     * @param dist The name of the dist. (optional)
     * @param header This parameter can be supplied multiple times to attach headers to the file. Each header is a string in the format &#x60;key:value&#x60;. For instance it can be used to define a content type. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadANewProjectReleaseFileCall(String organizationSlug, String projectSlug, String version, File _file, String name, String dist, String header, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/projects/{organization_slug}/{project_slug}/releases/{version}/files/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (dist != null) {
            localVarFormParams.put("dist", dist);
        }

        if (header != null) {
            localVarFormParams.put("header", header);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadANewProjectReleaseFileValidateBeforeCall(String organizationSlug, String projectSlug, String version, File _file, String name, String dist, String header, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling uploadANewProjectReleaseFile(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling uploadANewProjectReleaseFile(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling uploadANewProjectReleaseFile(Async)");
        }

        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling uploadANewProjectReleaseFile(Async)");
        }

        return uploadANewProjectReleaseFileCall(organizationSlug, projectSlug, version, _file, name, dist, header, _callback);

    }

    /**
     * 
     * Upload a new project release file.
     * @param organizationSlug The slug of the organization. (required)
     * @param projectSlug The slug of the project. (required)
     * @param version The version identifier of the release. (required)
     * @param _file The multipart encoded file. (required)
     * @param name The name (full path) of the file. (optional)
     * @param dist The name of the dist. (optional)
     * @param header This parameter can be supplied multiple times to attach headers to the file. Each header is a string in the format &#x60;key:value&#x60;. For instance it can be used to define a content type. (optional)
     * @return ListAnOrganizationSReleaseFiles200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ListAnOrganizationSReleaseFiles200ResponseInner uploadANewProjectReleaseFile(String organizationSlug, String projectSlug, String version, File _file, String name, String dist, String header) throws ApiException {
        ApiResponse<ListAnOrganizationSReleaseFiles200ResponseInner> localVarResp = uploadANewProjectReleaseFileWithHttpInfo(organizationSlug, projectSlug, version, _file, name, dist, header);
        return localVarResp.getData();
    }

    /**
     * 
     * Upload a new project release file.
     * @param organizationSlug The slug of the organization. (required)
     * @param projectSlug The slug of the project. (required)
     * @param version The version identifier of the release. (required)
     * @param _file The multipart encoded file. (required)
     * @param name The name (full path) of the file. (optional)
     * @param dist The name of the dist. (optional)
     * @param header This parameter can be supplied multiple times to attach headers to the file. Each header is a string in the format &#x60;key:value&#x60;. For instance it can be used to define a content type. (optional)
     * @return ApiResponse&lt;ListAnOrganizationSReleaseFiles200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAnOrganizationSReleaseFiles200ResponseInner> uploadANewProjectReleaseFileWithHttpInfo(String organizationSlug, String projectSlug, String version, File _file, String name, String dist, String header) throws ApiException {
        okhttp3.Call localVarCall = uploadANewProjectReleaseFileValidateBeforeCall(organizationSlug, projectSlug, version, _file, name, dist, header, null);
        Type localVarReturnType = new TypeToken<ListAnOrganizationSReleaseFiles200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Upload a new project release file.
     * @param organizationSlug The slug of the organization. (required)
     * @param projectSlug The slug of the project. (required)
     * @param version The version identifier of the release. (required)
     * @param _file The multipart encoded file. (required)
     * @param name The name (full path) of the file. (optional)
     * @param dist The name of the dist. (optional)
     * @param header This parameter can be supplied multiple times to attach headers to the file. Each header is a string in the format &#x60;key:value&#x60;. For instance it can be used to define a content type. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadANewProjectReleaseFileAsync(String organizationSlug, String projectSlug, String version, File _file, String name, String dist, String header, final ApiCallback<ListAnOrganizationSReleaseFiles200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadANewProjectReleaseFileValidateBeforeCall(organizationSlug, projectSlug, version, _file, name, dist, header, _callback);
        Type localVarReturnType = new TypeToken<ListAnOrganizationSReleaseFiles200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
