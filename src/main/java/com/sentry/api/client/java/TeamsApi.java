/*
 * API Reference
 * Sentry Public API
 *
 * The version of the OpenAPI document: v0
 * Contact: partners@sentry.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sentry.api.client.java;

import com.sentry.api.client.ApiCallback;
import com.sentry.api.client.ApiClient;
import com.sentry.api.client.ApiException;
import com.sentry.api.client.ApiResponse;
import com.sentry.api.client.Configuration;
import com.sentry.api.client.Pair;
import com.sentry.api.client.ProgressRequestBody;
import com.sentry.api.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateANewTeamRequest;
import org.openapitools.client.model.ListAnOrganizationSProjects200ResponseInner;
import org.openapitools.client.model.ListAnOrganizationSTeams200ResponseInner;
import java.time.OffsetDateTime;
import org.openapitools.client.model.RetrieveATeam200Response;
import org.openapitools.client.model.UpdateATeam200Response;
import org.openapitools.client.model.UpdateATeamRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TeamsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TeamsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TeamsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createANewTeam
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param name The name of the team. (required)
     * @param slug Optional slug for the team. If not provided a slug is generated from the name. (optional)
     * @param createANewTeamRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A team with this slug already exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createANewTeamCall(String organizationSlug, String name, String slug, CreateANewTeamRequest createANewTeamRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createANewTeamRequest;

        // create path and map variables
        String localVarPath = "/api/0/organizations/{organization_slug}/teams/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createANewTeamValidateBeforeCall(String organizationSlug, String name, String slug, CreateANewTeamRequest createANewTeamRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling createANewTeam(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createANewTeam(Async)");
        }

        return createANewTeamCall(organizationSlug, name, slug, createANewTeamRequest, _callback);

    }

    /**
     * 
     * Create a new team bound to an organization.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param name The name of the team. (required)
     * @param slug Optional slug for the team. If not provided a slug is generated from the name. (optional)
     * @param createANewTeamRequest  (optional)
     * @return ListAnOrganizationSTeams200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A team with this slug already exists. </td><td>  -  </td></tr>
     </table>
     */
    public ListAnOrganizationSTeams200ResponseInner createANewTeam(String organizationSlug, String name, String slug, CreateANewTeamRequest createANewTeamRequest) throws ApiException {
        ApiResponse<ListAnOrganizationSTeams200ResponseInner> localVarResp = createANewTeamWithHttpInfo(organizationSlug, name, slug, createANewTeamRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new team bound to an organization.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param name The name of the team. (required)
     * @param slug Optional slug for the team. If not provided a slug is generated from the name. (optional)
     * @param createANewTeamRequest  (optional)
     * @return ApiResponse&lt;ListAnOrganizationSTeams200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A team with this slug already exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAnOrganizationSTeams200ResponseInner> createANewTeamWithHttpInfo(String organizationSlug, String name, String slug, CreateANewTeamRequest createANewTeamRequest) throws ApiException {
        okhttp3.Call localVarCall = createANewTeamValidateBeforeCall(organizationSlug, name, slug, createANewTeamRequest, null);
        Type localVarReturnType = new TypeToken<ListAnOrganizationSTeams200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new team bound to an organization.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param name The name of the team. (required)
     * @param slug Optional slug for the team. If not provided a slug is generated from the name. (optional)
     * @param createANewTeamRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A team with this slug already exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createANewTeamAsync(String organizationSlug, String name, String slug, CreateANewTeamRequest createANewTeamRequest, final ApiCallback<ListAnOrganizationSTeams200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = createANewTeamValidateBeforeCall(organizationSlug, name, slug, createANewTeamRequest, _callback);
        Type localVarReturnType = new TypeToken<ListAnOrganizationSTeams200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteATeam
     * @param organizationSlug The slug of the organization the team belongs to. (required)
     * @param teamSlug The slug of the team to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteATeamCall(String organizationSlug, String teamSlug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/teams/{organization_slug}/{team_slug}/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "team_slug" + "}", localVarApiClient.escapeString(teamSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteATeamValidateBeforeCall(String organizationSlug, String teamSlug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling deleteATeam(Async)");
        }

        // verify the required parameter 'teamSlug' is set
        if (teamSlug == null) {
            throw new ApiException("Missing the required parameter 'teamSlug' when calling deleteATeam(Async)");
        }

        return deleteATeamCall(organizationSlug, teamSlug, _callback);

    }

    /**
     * 
     * Schedules a team for deletion.  Note: Deletion happens asynchronously and therefore is not immediate. However once deletion has begun the state of a project changes and will be hidden from most public views.
     * @param organizationSlug The slug of the organization the team belongs to. (required)
     * @param teamSlug The slug of the team to get. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteATeam(String organizationSlug, String teamSlug) throws ApiException {
        deleteATeamWithHttpInfo(organizationSlug, teamSlug);
    }

    /**
     * 
     * Schedules a team for deletion.  Note: Deletion happens asynchronously and therefore is not immediate. However once deletion has begun the state of a project changes and will be hidden from most public views.
     * @param organizationSlug The slug of the organization the team belongs to. (required)
     * @param teamSlug The slug of the team to get. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteATeamWithHttpInfo(String organizationSlug, String teamSlug) throws ApiException {
        okhttp3.Call localVarCall = deleteATeamValidateBeforeCall(organizationSlug, teamSlug, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Schedules a team for deletion.  Note: Deletion happens asynchronously and therefore is not immediate. However once deletion has begun the state of a project changes and will be hidden from most public views.
     * @param organizationSlug The slug of the organization the team belongs to. (required)
     * @param teamSlug The slug of the team to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteATeamAsync(String organizationSlug, String teamSlug, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteATeamValidateBeforeCall(organizationSlug, teamSlug, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listATeamsProjects
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param teamSlug The slug of the team the resource belongs to. (required)
     * @param cursor A pointer to the last object fetched and its sort order; used to retrieve the next or previous results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listATeamsProjectsCall(String organizationSlug, String teamSlug, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/teams/{organization_slug}/{team_slug}/projects/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "team_slug" + "}", localVarApiClient.escapeString(teamSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listATeamsProjectsValidateBeforeCall(String organizationSlug, String teamSlug, String cursor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling listATeamsProjects(Async)");
        }

        // verify the required parameter 'teamSlug' is set
        if (teamSlug == null) {
            throw new ApiException("Missing the required parameter 'teamSlug' when calling listATeamsProjects(Async)");
        }

        return listATeamsProjectsCall(organizationSlug, teamSlug, cursor, _callback);

    }

    /**
     * 
     * Return a list of projects bound to a team.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param teamSlug The slug of the team the resource belongs to. (required)
     * @param cursor A pointer to the last object fetched and its sort order; used to retrieve the next or previous results. (optional)
     * @return List&lt;ListAnOrganizationSProjects200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
     </table>
     */
    public List<ListAnOrganizationSProjects200ResponseInner> listATeamsProjects(String organizationSlug, String teamSlug, String cursor) throws ApiException {
        ApiResponse<List<ListAnOrganizationSProjects200ResponseInner>> localVarResp = listATeamsProjectsWithHttpInfo(organizationSlug, teamSlug, cursor);
        return localVarResp.getData();
    }

    /**
     * 
     * Return a list of projects bound to a team.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param teamSlug The slug of the team the resource belongs to. (required)
     * @param cursor A pointer to the last object fetched and its sort order; used to retrieve the next or previous results. (optional)
     * @return ApiResponse&lt;List&lt;ListAnOrganizationSProjects200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListAnOrganizationSProjects200ResponseInner>> listATeamsProjectsWithHttpInfo(String organizationSlug, String teamSlug, String cursor) throws ApiException {
        okhttp3.Call localVarCall = listATeamsProjectsValidateBeforeCall(organizationSlug, teamSlug, cursor, null);
        Type localVarReturnType = new TypeToken<List<ListAnOrganizationSProjects200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return a list of projects bound to a team.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param teamSlug The slug of the team the resource belongs to. (required)
     * @param cursor A pointer to the last object fetched and its sort order; used to retrieve the next or previous results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listATeamsProjectsAsync(String organizationSlug, String teamSlug, String cursor, final ApiCallback<List<ListAnOrganizationSProjects200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listATeamsProjectsValidateBeforeCall(organizationSlug, teamSlug, cursor, _callback);
        Type localVarReturnType = new TypeToken<List<ListAnOrganizationSProjects200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAnOrganizationsTeams
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param detailed Specify \&quot;0\&quot; to return team details that do not include projects (optional)
     * @param cursor A pointer to the last object fetched and its sort order; used to retrieve the next or previous results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAnOrganizationsTeamsCall(String organizationSlug, String detailed, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/organizations/{organization_slug}/teams/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (detailed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("detailed", detailed));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAnOrganizationsTeamsValidateBeforeCall(String organizationSlug, String detailed, String cursor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling listAnOrganizationsTeams(Async)");
        }

        return listAnOrganizationsTeamsCall(organizationSlug, detailed, cursor, _callback);

    }

    /**
     * 
     * Returns a list of teams bound to a organization.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param detailed Specify \&quot;0\&quot; to return team details that do not include projects (optional)
     * @param cursor A pointer to the last object fetched and its sort order; used to retrieve the next or previous results. (optional)
     * @return List&lt;ListAnOrganizationSTeams200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<ListAnOrganizationSTeams200ResponseInner> listAnOrganizationsTeams(String organizationSlug, String detailed, String cursor) throws ApiException {
        ApiResponse<List<ListAnOrganizationSTeams200ResponseInner>> localVarResp = listAnOrganizationsTeamsWithHttpInfo(organizationSlug, detailed, cursor);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of teams bound to a organization.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param detailed Specify \&quot;0\&quot; to return team details that do not include projects (optional)
     * @param cursor A pointer to the last object fetched and its sort order; used to retrieve the next or previous results. (optional)
     * @return ApiResponse&lt;List&lt;ListAnOrganizationSTeams200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListAnOrganizationSTeams200ResponseInner>> listAnOrganizationsTeamsWithHttpInfo(String organizationSlug, String detailed, String cursor) throws ApiException {
        okhttp3.Call localVarCall = listAnOrganizationsTeamsValidateBeforeCall(organizationSlug, detailed, cursor, null);
        Type localVarReturnType = new TypeToken<List<ListAnOrganizationSTeams200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of teams bound to a organization.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param detailed Specify \&quot;0\&quot; to return team details that do not include projects (optional)
     * @param cursor A pointer to the last object fetched and its sort order; used to retrieve the next or previous results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAnOrganizationsTeamsAsync(String organizationSlug, String detailed, String cursor, final ApiCallback<List<ListAnOrganizationSTeams200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAnOrganizationsTeamsValidateBeforeCall(organizationSlug, detailed, cursor, _callback);
        Type localVarReturnType = new TypeToken<List<ListAnOrganizationSTeams200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveATeam
     * @param organizationSlug The slug of the organization the team belongs to. (required)
     * @param teamSlug The slug of the team to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveATeamCall(String organizationSlug, String teamSlug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/teams/{organization_slug}/{team_slug}/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "team_slug" + "}", localVarApiClient.escapeString(teamSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveATeamValidateBeforeCall(String organizationSlug, String teamSlug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling retrieveATeam(Async)");
        }

        // verify the required parameter 'teamSlug' is set
        if (teamSlug == null) {
            throw new ApiException("Missing the required parameter 'teamSlug' when calling retrieveATeam(Async)");
        }

        return retrieveATeamCall(organizationSlug, teamSlug, _callback);

    }

    /**
     * 
     * Return details on an individual team.
     * @param organizationSlug The slug of the organization the team belongs to. (required)
     * @param teamSlug The slug of the team to get. (required)
     * @return RetrieveATeam200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveATeam200Response retrieveATeam(String organizationSlug, String teamSlug) throws ApiException {
        ApiResponse<RetrieveATeam200Response> localVarResp = retrieveATeamWithHttpInfo(organizationSlug, teamSlug);
        return localVarResp.getData();
    }

    /**
     * 
     * Return details on an individual team.
     * @param organizationSlug The slug of the organization the team belongs to. (required)
     * @param teamSlug The slug of the team to get. (required)
     * @return ApiResponse&lt;RetrieveATeam200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveATeam200Response> retrieveATeamWithHttpInfo(String organizationSlug, String teamSlug) throws ApiException {
        okhttp3.Call localVarCall = retrieveATeamValidateBeforeCall(organizationSlug, teamSlug, null);
        Type localVarReturnType = new TypeToken<RetrieveATeam200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return details on an individual team.
     * @param organizationSlug The slug of the organization the team belongs to. (required)
     * @param teamSlug The slug of the team to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveATeamAsync(String organizationSlug, String teamSlug, final ApiCallback<RetrieveATeam200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveATeamValidateBeforeCall(organizationSlug, teamSlug, _callback);
        Type localVarReturnType = new TypeToken<RetrieveATeam200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveEventCountsForATeam
     * @param organizationSlug The slug of the organization the team belongs to. (required)
     * @param teamSlug The slug of the team to get. (required)
     * @param stat The name of the stat to query &#x60;(\&quot;received\&quot;, \&quot;rejected\&quot;)&#x60;. (optional)
     * @param since A timestamp to set the start of the query in seconds since UNIX epoch. (optional)
     * @param until A timestamp to set the end of the query in seconds since UNIX epoch. (optional)
     * @param resolution An explicit resolution to search for (one of &#x60;10s&#x60;, &#x60;1h&#x60;, and &#x60;1d&#x60;). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveEventCountsForATeamCall(String organizationSlug, String teamSlug, String stat, OffsetDateTime since, OffsetDateTime until, String resolution, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/teams/{organization_slug}/{team_slug}/stats/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "team_slug" + "}", localVarApiClient.escapeString(teamSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stat", stat));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (until != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("until", until));
        }

        if (resolution != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resolution", resolution));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveEventCountsForATeamValidateBeforeCall(String organizationSlug, String teamSlug, String stat, OffsetDateTime since, OffsetDateTime until, String resolution, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling retrieveEventCountsForATeam(Async)");
        }

        // verify the required parameter 'teamSlug' is set
        if (teamSlug == null) {
            throw new ApiException("Missing the required parameter 'teamSlug' when calling retrieveEventCountsForATeam(Async)");
        }

        return retrieveEventCountsForATeamCall(organizationSlug, teamSlug, stat, since, until, resolution, _callback);

    }

    /**
     * Caution: this endpoint may change in the future without notice.
     * Return a set of points representing a normalized timestamp and the number of events seen in the period.  Query ranges are limited to Sentry’s configured time-series resolutions.
     * @param organizationSlug The slug of the organization the team belongs to. (required)
     * @param teamSlug The slug of the team to get. (required)
     * @param stat The name of the stat to query &#x60;(\&quot;received\&quot;, \&quot;rejected\&quot;)&#x60;. (optional)
     * @param since A timestamp to set the start of the query in seconds since UNIX epoch. (optional)
     * @param until A timestamp to set the end of the query in seconds since UNIX epoch. (optional)
     * @param resolution An explicit resolution to search for (one of &#x60;10s&#x60;, &#x60;1h&#x60;, and &#x60;1d&#x60;). (optional)
     * @return List&lt;List&lt;Integer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
     </table>
     */
    public List<List<Integer>> retrieveEventCountsForATeam(String organizationSlug, String teamSlug, String stat, OffsetDateTime since, OffsetDateTime until, String resolution) throws ApiException {
        ApiResponse<List<List<Integer>>> localVarResp = retrieveEventCountsForATeamWithHttpInfo(organizationSlug, teamSlug, stat, since, until, resolution);
        return localVarResp.getData();
    }

    /**
     * Caution: this endpoint may change in the future without notice.
     * Return a set of points representing a normalized timestamp and the number of events seen in the period.  Query ranges are limited to Sentry’s configured time-series resolutions.
     * @param organizationSlug The slug of the organization the team belongs to. (required)
     * @param teamSlug The slug of the team to get. (required)
     * @param stat The name of the stat to query &#x60;(\&quot;received\&quot;, \&quot;rejected\&quot;)&#x60;. (optional)
     * @param since A timestamp to set the start of the query in seconds since UNIX epoch. (optional)
     * @param until A timestamp to set the end of the query in seconds since UNIX epoch. (optional)
     * @param resolution An explicit resolution to search for (one of &#x60;10s&#x60;, &#x60;1h&#x60;, and &#x60;1d&#x60;). (optional)
     * @return ApiResponse&lt;List&lt;List&lt;Integer&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<List<Integer>>> retrieveEventCountsForATeamWithHttpInfo(String organizationSlug, String teamSlug, String stat, OffsetDateTime since, OffsetDateTime until, String resolution) throws ApiException {
        okhttp3.Call localVarCall = retrieveEventCountsForATeamValidateBeforeCall(organizationSlug, teamSlug, stat, since, until, resolution, null);
        Type localVarReturnType = new TypeToken<List<List<Integer>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Caution: this endpoint may change in the future without notice. (asynchronously)
     * Return a set of points representing a normalized timestamp and the number of events seen in the period.  Query ranges are limited to Sentry’s configured time-series resolutions.
     * @param organizationSlug The slug of the organization the team belongs to. (required)
     * @param teamSlug The slug of the team to get. (required)
     * @param stat The name of the stat to query &#x60;(\&quot;received\&quot;, \&quot;rejected\&quot;)&#x60;. (optional)
     * @param since A timestamp to set the start of the query in seconds since UNIX epoch. (optional)
     * @param until A timestamp to set the end of the query in seconds since UNIX epoch. (optional)
     * @param resolution An explicit resolution to search for (one of &#x60;10s&#x60;, &#x60;1h&#x60;, and &#x60;1d&#x60;). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveEventCountsForATeamAsync(String organizationSlug, String teamSlug, String stat, OffsetDateTime since, OffsetDateTime until, String resolution, final ApiCallback<List<List<Integer>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveEventCountsForATeamValidateBeforeCall(organizationSlug, teamSlug, stat, since, until, resolution, _callback);
        Type localVarReturnType = new TypeToken<List<List<Integer>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateATeam
     * @param organizationSlug The slug of the organization the team belongs to. (required)
     * @param teamSlug The slug of the team to get. (required)
     * @param updateATeamRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Input </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateATeamCall(String organizationSlug, String teamSlug, UpdateATeamRequest updateATeamRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateATeamRequest;

        // create path and map variables
        String localVarPath = "/api/0/teams/{organization_slug}/{team_slug}/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "team_slug" + "}", localVarApiClient.escapeString(teamSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateATeamValidateBeforeCall(String organizationSlug, String teamSlug, UpdateATeamRequest updateATeamRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling updateATeam(Async)");
        }

        // verify the required parameter 'teamSlug' is set
        if (teamSlug == null) {
            throw new ApiException("Missing the required parameter 'teamSlug' when calling updateATeam(Async)");
        }

        // verify the required parameter 'updateATeamRequest' is set
        if (updateATeamRequest == null) {
            throw new ApiException("Missing the required parameter 'updateATeamRequest' when calling updateATeam(Async)");
        }

        return updateATeamCall(organizationSlug, teamSlug, updateATeamRequest, _callback);

    }

    /**
     * 
     * Update various attributes and configurable settings for the given team.
     * @param organizationSlug The slug of the organization the team belongs to. (required)
     * @param teamSlug The slug of the team to get. (required)
     * @param updateATeamRequest  (required)
     * @return UpdateATeam200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Input </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateATeam200Response updateATeam(String organizationSlug, String teamSlug, UpdateATeamRequest updateATeamRequest) throws ApiException {
        ApiResponse<UpdateATeam200Response> localVarResp = updateATeamWithHttpInfo(organizationSlug, teamSlug, updateATeamRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Update various attributes and configurable settings for the given team.
     * @param organizationSlug The slug of the organization the team belongs to. (required)
     * @param teamSlug The slug of the team to get. (required)
     * @param updateATeamRequest  (required)
     * @return ApiResponse&lt;UpdateATeam200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Input </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateATeam200Response> updateATeamWithHttpInfo(String organizationSlug, String teamSlug, UpdateATeamRequest updateATeamRequest) throws ApiException {
        okhttp3.Call localVarCall = updateATeamValidateBeforeCall(organizationSlug, teamSlug, updateATeamRequest, null);
        Type localVarReturnType = new TypeToken<UpdateATeam200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update various attributes and configurable settings for the given team.
     * @param organizationSlug The slug of the organization the team belongs to. (required)
     * @param teamSlug The slug of the team to get. (required)
     * @param updateATeamRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Input </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateATeamAsync(String organizationSlug, String teamSlug, UpdateATeamRequest updateATeamRequest, final ApiCallback<UpdateATeam200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateATeamValidateBeforeCall(organizationSlug, teamSlug, updateATeamRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateATeam200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
