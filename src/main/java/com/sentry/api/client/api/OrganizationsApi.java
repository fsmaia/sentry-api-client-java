/*
 * API Reference
 * Sentry Public API
 *
 * The version of the OpenAPI document: v0
 * Contact: partners@sentry.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sentry.api.client.api;

import com.sentry.api.client.ApiCallback;
import com.sentry.api.client.ApiClient;
import com.sentry.api.client.ApiException;
import com.sentry.api.client.ApiResponse;
import com.sentry.api.client.Configuration;
import com.sentry.api.client.Pair;
import com.sentry.api.client.ProgressRequestBody;
import com.sentry.api.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.sentry.api.client.model.ListARepositorySCommits200ResponseInner;
import com.sentry.api.client.model.ListAnOrganizationSProjects200ResponseInner;
import com.sentry.api.client.model.ListAnOrganizationSRepositories200ResponseInner;
import com.sentry.api.client.model.ListAnOrganizationSUsers200ResponseInner;
import java.time.OffsetDateTime;
import com.sentry.api.client.model.ResolveAShortID200Response;
import com.sentry.api.client.model.ResolveAnEventID200Response;
import com.sentry.api.client.model.RetrieveATeam200ResponseOrganization;
import com.sentry.api.client.model.RetrieveAnOrganization200Response;
import com.sentry.api.client.model.RetrieveAnOrganizationMember200Response;
import com.sentry.api.client.model.RetrieveEventCountsForAnOrganizationV2200Response;
import com.sentry.api.client.model.UpdateAnOrganizationRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class OrganizationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrganizationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrganizationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteAnOrganizationMember
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param memberId The member ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAnOrganizationMemberCall(String organizationSlug, String memberId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/organizations/{organization_slug}/members/{member_id}/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "member_id" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAnOrganizationMemberValidateBeforeCall(String organizationSlug, String memberId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling deleteAnOrganizationMember(Async)");
        }

        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling deleteAnOrganizationMember(Async)");
        }

        return deleteAnOrganizationMemberCall(organizationSlug, memberId, _callback);

    }

    /**
     * 
     * Remove an organization member.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param memberId The member ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAnOrganizationMember(String organizationSlug, String memberId) throws ApiException {
        deleteAnOrganizationMemberWithHttpInfo(organizationSlug, memberId);
    }

    /**
     * 
     * Remove an organization member.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param memberId The member ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAnOrganizationMemberWithHttpInfo(String organizationSlug, String memberId) throws ApiException {
        okhttp3.Call localVarCall = deleteAnOrganizationMemberValidateBeforeCall(organizationSlug, memberId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Remove an organization member.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param memberId The member ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAnOrganizationMemberAsync(String organizationSlug, String memberId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAnOrganizationMemberValidateBeforeCall(organizationSlug, memberId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listARepositorysCommits
     * @param organizationSlug The organization short name. (required)
     * @param repoId The repository ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listARepositorysCommitsCall(String organizationSlug, String repoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/organizations/{organization_slug}/repos/{repo_id}/commits/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "repo_id" + "}", localVarApiClient.escapeString(repoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listARepositorysCommitsValidateBeforeCall(String organizationSlug, String repoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling listARepositorysCommits(Async)");
        }

        // verify the required parameter 'repoId' is set
        if (repoId == null) {
            throw new ApiException("Missing the required parameter 'repoId' when calling listARepositorysCommits(Async)");
        }

        return listARepositorysCommitsCall(organizationSlug, repoId, _callback);

    }

    /**
     * 
     * Return a list of commits for a given repository.
     * @param organizationSlug The organization short name. (required)
     * @param repoId The repository ID. (required)
     * @return List&lt;ListARepositorySCommits200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<ListARepositorySCommits200ResponseInner> listARepositorysCommits(String organizationSlug, String repoId) throws ApiException {
        ApiResponse<List<ListARepositorySCommits200ResponseInner>> localVarResp = listARepositorysCommitsWithHttpInfo(organizationSlug, repoId);
        return localVarResp.getData();
    }

    /**
     * 
     * Return a list of commits for a given repository.
     * @param organizationSlug The organization short name. (required)
     * @param repoId The repository ID. (required)
     * @return ApiResponse&lt;List&lt;ListARepositorySCommits200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListARepositorySCommits200ResponseInner>> listARepositorysCommitsWithHttpInfo(String organizationSlug, String repoId) throws ApiException {
        okhttp3.Call localVarCall = listARepositorysCommitsValidateBeforeCall(organizationSlug, repoId, null);
        Type localVarReturnType = new TypeToken<List<ListARepositorySCommits200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return a list of commits for a given repository.
     * @param organizationSlug The organization short name. (required)
     * @param repoId The repository ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listARepositorysCommitsAsync(String organizationSlug, String repoId, final ApiCallback<List<ListARepositorySCommits200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listARepositorysCommitsValidateBeforeCall(organizationSlug, repoId, _callback);
        Type localVarReturnType = new TypeToken<List<ListARepositorySCommits200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAnOrganizationsProjects
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param cursor A pointer to the last object fetched and its sort order; used to retrieve the next or previous results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAnOrganizationsProjectsCall(String organizationSlug, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/organizations/{organization_slug}/projects/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAnOrganizationsProjectsValidateBeforeCall(String organizationSlug, String cursor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling listAnOrganizationsProjects(Async)");
        }

        return listAnOrganizationsProjectsCall(organizationSlug, cursor, _callback);

    }

    /**
     * 
     * Return a list of projects bound to a organization.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param cursor A pointer to the last object fetched and its sort order; used to retrieve the next or previous results. (optional)
     * @return List&lt;ListAnOrganizationSProjects200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<ListAnOrganizationSProjects200ResponseInner> listAnOrganizationsProjects(String organizationSlug, String cursor) throws ApiException {
        ApiResponse<List<ListAnOrganizationSProjects200ResponseInner>> localVarResp = listAnOrganizationsProjectsWithHttpInfo(organizationSlug, cursor);
        return localVarResp.getData();
    }

    /**
     * 
     * Return a list of projects bound to a organization.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param cursor A pointer to the last object fetched and its sort order; used to retrieve the next or previous results. (optional)
     * @return ApiResponse&lt;List&lt;ListAnOrganizationSProjects200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListAnOrganizationSProjects200ResponseInner>> listAnOrganizationsProjectsWithHttpInfo(String organizationSlug, String cursor) throws ApiException {
        okhttp3.Call localVarCall = listAnOrganizationsProjectsValidateBeforeCall(organizationSlug, cursor, null);
        Type localVarReturnType = new TypeToken<List<ListAnOrganizationSProjects200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return a list of projects bound to a organization.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param cursor A pointer to the last object fetched and its sort order; used to retrieve the next or previous results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAnOrganizationsProjectsAsync(String organizationSlug, String cursor, final ApiCallback<List<ListAnOrganizationSProjects200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAnOrganizationsProjectsValidateBeforeCall(organizationSlug, cursor, _callback);
        Type localVarReturnType = new TypeToken<List<ListAnOrganizationSProjects200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAnOrganizationsRepositories
     * @param organizationSlug The organization short name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAnOrganizationsRepositoriesCall(String organizationSlug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/organizations/{organization_slug}/repos/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAnOrganizationsRepositoriesValidateBeforeCall(String organizationSlug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling listAnOrganizationsRepositories(Async)");
        }

        return listAnOrganizationsRepositoriesCall(organizationSlug, _callback);

    }

    /**
     * 
     * Return a list of version control repositories for a given organization.
     * @param organizationSlug The organization short name. (required)
     * @return List&lt;ListAnOrganizationSRepositories200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<ListAnOrganizationSRepositories200ResponseInner> listAnOrganizationsRepositories(String organizationSlug) throws ApiException {
        ApiResponse<List<ListAnOrganizationSRepositories200ResponseInner>> localVarResp = listAnOrganizationsRepositoriesWithHttpInfo(organizationSlug);
        return localVarResp.getData();
    }

    /**
     * 
     * Return a list of version control repositories for a given organization.
     * @param organizationSlug The organization short name. (required)
     * @return ApiResponse&lt;List&lt;ListAnOrganizationSRepositories200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListAnOrganizationSRepositories200ResponseInner>> listAnOrganizationsRepositoriesWithHttpInfo(String organizationSlug) throws ApiException {
        okhttp3.Call localVarCall = listAnOrganizationsRepositoriesValidateBeforeCall(organizationSlug, null);
        Type localVarReturnType = new TypeToken<List<ListAnOrganizationSRepositories200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return a list of version control repositories for a given organization.
     * @param organizationSlug The organization short name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAnOrganizationsRepositoriesAsync(String organizationSlug, final ApiCallback<List<ListAnOrganizationSRepositories200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAnOrganizationsRepositoriesValidateBeforeCall(organizationSlug, _callback);
        Type localVarReturnType = new TypeToken<List<ListAnOrganizationSRepositories200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAnOrganizationsUsers
     * @param organizationSlug The slug of the organization the event ID should be looked up in. (required)
     * @param project Restrict results to users who have access to a given project ID (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAnOrganizationsUsersCall(String organizationSlug, String project, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/organizations/{organization_slug}/users/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (project != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("project", project));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAnOrganizationsUsersValidateBeforeCall(String organizationSlug, String project, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling listAnOrganizationsUsers(Async)");
        }

        return listAnOrganizationsUsersCall(organizationSlug, project, _callback);

    }

    /**
     * 
     * Return a list of users that belong to a given organization.
     * @param organizationSlug The slug of the organization the event ID should be looked up in. (required)
     * @param project Restrict results to users who have access to a given project ID (optional)
     * @return List&lt;ListAnOrganizationSUsers200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<ListAnOrganizationSUsers200ResponseInner> listAnOrganizationsUsers(String organizationSlug, String project) throws ApiException {
        ApiResponse<List<ListAnOrganizationSUsers200ResponseInner>> localVarResp = listAnOrganizationsUsersWithHttpInfo(organizationSlug, project);
        return localVarResp.getData();
    }

    /**
     * 
     * Return a list of users that belong to a given organization.
     * @param organizationSlug The slug of the organization the event ID should be looked up in. (required)
     * @param project Restrict results to users who have access to a given project ID (optional)
     * @return ApiResponse&lt;List&lt;ListAnOrganizationSUsers200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListAnOrganizationSUsers200ResponseInner>> listAnOrganizationsUsersWithHttpInfo(String organizationSlug, String project) throws ApiException {
        okhttp3.Call localVarCall = listAnOrganizationsUsersValidateBeforeCall(organizationSlug, project, null);
        Type localVarReturnType = new TypeToken<List<ListAnOrganizationSUsers200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return a list of users that belong to a given organization.
     * @param organizationSlug The slug of the organization the event ID should be looked up in. (required)
     * @param project Restrict results to users who have access to a given project ID (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAnOrganizationsUsersAsync(String organizationSlug, String project, final ApiCallback<List<ListAnOrganizationSUsers200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAnOrganizationsUsersValidateBeforeCall(organizationSlug, project, _callback);
        Type localVarReturnType = new TypeToken<List<ListAnOrganizationSUsers200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listYourOrganizations
     * @param owner Restrict results to organizations in which you are an organization owner. (optional)
     * @param cursor A pointer to the last object fetched and its sort order; used to retrieve the next or previous results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listYourOrganizationsCall(Boolean owner, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/organizations/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (owner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner", owner));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listYourOrganizationsValidateBeforeCall(Boolean owner, String cursor, final ApiCallback _callback) throws ApiException {
        return listYourOrganizationsCall(owner, cursor, _callback);

    }

    /**
     * 
     * Return a list of organizations available to the authenticated session.  This is particularly useful for requests with an user bound context.  For API key based requests this will only return the organization that belongs to the key.
     * @param owner Restrict results to organizations in which you are an organization owner. (optional)
     * @param cursor A pointer to the last object fetched and its sort order; used to retrieve the next or previous results. (optional)
     * @return List&lt;RetrieveATeam200ResponseOrganization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public List<RetrieveATeam200ResponseOrganization> listYourOrganizations(Boolean owner, String cursor) throws ApiException {
        ApiResponse<List<RetrieveATeam200ResponseOrganization>> localVarResp = listYourOrganizationsWithHttpInfo(owner, cursor);
        return localVarResp.getData();
    }

    /**
     * 
     * Return a list of organizations available to the authenticated session.  This is particularly useful for requests with an user bound context.  For API key based requests this will only return the organization that belongs to the key.
     * @param owner Restrict results to organizations in which you are an organization owner. (optional)
     * @param cursor A pointer to the last object fetched and its sort order; used to retrieve the next or previous results. (optional)
     * @return ApiResponse&lt;List&lt;RetrieveATeam200ResponseOrganization&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RetrieveATeam200ResponseOrganization>> listYourOrganizationsWithHttpInfo(Boolean owner, String cursor) throws ApiException {
        okhttp3.Call localVarCall = listYourOrganizationsValidateBeforeCall(owner, cursor, null);
        Type localVarReturnType = new TypeToken<List<RetrieveATeam200ResponseOrganization>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return a list of organizations available to the authenticated session.  This is particularly useful for requests with an user bound context.  For API key based requests this will only return the organization that belongs to the key.
     * @param owner Restrict results to organizations in which you are an organization owner. (optional)
     * @param cursor A pointer to the last object fetched and its sort order; used to retrieve the next or previous results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listYourOrganizationsAsync(Boolean owner, String cursor, final ApiCallback<List<RetrieveATeam200ResponseOrganization>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listYourOrganizationsValidateBeforeCall(owner, cursor, _callback);
        Type localVarReturnType = new TypeToken<List<RetrieveATeam200ResponseOrganization>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resolveAShortID
     * @param organizationSlug The slug of the organization the short ID should be looked up in. (required)
     * @param shortId The short ID to look up. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resolveAShortIDCall(String organizationSlug, String shortId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/organizations/{organization_slug}/shortids/{short_id}/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "short_id" + "}", localVarApiClient.escapeString(shortId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resolveAShortIDValidateBeforeCall(String organizationSlug, String shortId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling resolveAShortID(Async)");
        }

        // verify the required parameter 'shortId' is set
        if (shortId == null) {
            throw new ApiException("Missing the required parameter 'shortId' when calling resolveAShortID(Async)");
        }

        return resolveAShortIDCall(organizationSlug, shortId, _callback);

    }

    /**
     * 
     * This resolves a short ID to the project slug and internal issue ID.
     * @param organizationSlug The slug of the organization the short ID should be looked up in. (required)
     * @param shortId The short ID to look up. (required)
     * @return ResolveAShortID200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ResolveAShortID200Response resolveAShortID(String organizationSlug, String shortId) throws ApiException {
        ApiResponse<ResolveAShortID200Response> localVarResp = resolveAShortIDWithHttpInfo(organizationSlug, shortId);
        return localVarResp.getData();
    }

    /**
     * 
     * This resolves a short ID to the project slug and internal issue ID.
     * @param organizationSlug The slug of the organization the short ID should be looked up in. (required)
     * @param shortId The short ID to look up. (required)
     * @return ApiResponse&lt;ResolveAShortID200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResolveAShortID200Response> resolveAShortIDWithHttpInfo(String organizationSlug, String shortId) throws ApiException {
        okhttp3.Call localVarCall = resolveAShortIDValidateBeforeCall(organizationSlug, shortId, null);
        Type localVarReturnType = new TypeToken<ResolveAShortID200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This resolves a short ID to the project slug and internal issue ID.
     * @param organizationSlug The slug of the organization the short ID should be looked up in. (required)
     * @param shortId The short ID to look up. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resolveAShortIDAsync(String organizationSlug, String shortId, final ApiCallback<ResolveAShortID200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = resolveAShortIDValidateBeforeCall(organizationSlug, shortId, _callback);
        Type localVarReturnType = new TypeToken<ResolveAShortID200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resolveAnEventID
     * @param organizationSlug The slug of the organization the event ID should be looked up in. (required)
     * @param eventId The event ID to look up. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resolveAnEventIDCall(String organizationSlug, String eventId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/organizations/{organization_slug}/eventids/{event_id}/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "event_id" + "}", localVarApiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resolveAnEventIDValidateBeforeCall(String organizationSlug, String eventId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling resolveAnEventID(Async)");
        }

        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling resolveAnEventID(Async)");
        }

        return resolveAnEventIDCall(organizationSlug, eventId, _callback);

    }

    /**
     * 
     * This resolves an event ID to the project slug and internal issue ID and internal event ID.
     * @param organizationSlug The slug of the organization the event ID should be looked up in. (required)
     * @param eventId The event ID to look up. (required)
     * @return ResolveAnEventID200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ResolveAnEventID200Response resolveAnEventID(String organizationSlug, String eventId) throws ApiException {
        ApiResponse<ResolveAnEventID200Response> localVarResp = resolveAnEventIDWithHttpInfo(organizationSlug, eventId);
        return localVarResp.getData();
    }

    /**
     * 
     * This resolves an event ID to the project slug and internal issue ID and internal event ID.
     * @param organizationSlug The slug of the organization the event ID should be looked up in. (required)
     * @param eventId The event ID to look up. (required)
     * @return ApiResponse&lt;ResolveAnEventID200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResolveAnEventID200Response> resolveAnEventIDWithHttpInfo(String organizationSlug, String eventId) throws ApiException {
        okhttp3.Call localVarCall = resolveAnEventIDValidateBeforeCall(organizationSlug, eventId, null);
        Type localVarReturnType = new TypeToken<ResolveAnEventID200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This resolves an event ID to the project slug and internal issue ID and internal event ID.
     * @param organizationSlug The slug of the organization the event ID should be looked up in. (required)
     * @param eventId The event ID to look up. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resolveAnEventIDAsync(String organizationSlug, String eventId, final ApiCallback<ResolveAnEventID200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = resolveAnEventIDValidateBeforeCall(organizationSlug, eventId, _callback);
        Type localVarReturnType = new TypeToken<ResolveAnEventID200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveAnOrganization
     * @param organizationSlug The slug of the organization to look up. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAnOrganizationCall(String organizationSlug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/organizations/{organization_slug}/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveAnOrganizationValidateBeforeCall(String organizationSlug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling retrieveAnOrganization(Async)");
        }

        return retrieveAnOrganizationCall(organizationSlug, _callback);

    }

    /**
     * 
     * Return details on an individual organization including various details such as membership access, features, and teams.
     * @param organizationSlug The slug of the organization to look up. (required)
     * @return RetrieveAnOrganization200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveAnOrganization200Response retrieveAnOrganization(String organizationSlug) throws ApiException {
        ApiResponse<RetrieveAnOrganization200Response> localVarResp = retrieveAnOrganizationWithHttpInfo(organizationSlug);
        return localVarResp.getData();
    }

    /**
     * 
     * Return details on an individual organization including various details such as membership access, features, and teams.
     * @param organizationSlug The slug of the organization to look up. (required)
     * @return ApiResponse&lt;RetrieveAnOrganization200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveAnOrganization200Response> retrieveAnOrganizationWithHttpInfo(String organizationSlug) throws ApiException {
        okhttp3.Call localVarCall = retrieveAnOrganizationValidateBeforeCall(organizationSlug, null);
        Type localVarReturnType = new TypeToken<RetrieveAnOrganization200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return details on an individual organization including various details such as membership access, features, and teams.
     * @param organizationSlug The slug of the organization to look up. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAnOrganizationAsync(String organizationSlug, final ApiCallback<RetrieveAnOrganization200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveAnOrganizationValidateBeforeCall(organizationSlug, _callback);
        Type localVarReturnType = new TypeToken<RetrieveAnOrganization200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveAnOrganizationMember
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param memberId The member ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAnOrganizationMemberCall(String organizationSlug, String memberId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/organizations/{organization_slug}/members/{member_id}/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "member_id" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveAnOrganizationMemberValidateBeforeCall(String organizationSlug, String memberId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling retrieveAnOrganizationMember(Async)");
        }

        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling retrieveAnOrganizationMember(Async)");
        }

        return retrieveAnOrganizationMemberCall(organizationSlug, memberId, _callback);

    }

    /**
     * 
     * Retrieve an organization member&#39;s details.  Will return a pending invite as long as it&#39;s already approved.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param memberId The member ID. (required)
     * @return RetrieveAnOrganizationMember200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveAnOrganizationMember200Response retrieveAnOrganizationMember(String organizationSlug, String memberId) throws ApiException {
        ApiResponse<RetrieveAnOrganizationMember200Response> localVarResp = retrieveAnOrganizationMemberWithHttpInfo(organizationSlug, memberId);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve an organization member&#39;s details.  Will return a pending invite as long as it&#39;s already approved.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param memberId The member ID. (required)
     * @return ApiResponse&lt;RetrieveAnOrganizationMember200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveAnOrganizationMember200Response> retrieveAnOrganizationMemberWithHttpInfo(String organizationSlug, String memberId) throws ApiException {
        okhttp3.Call localVarCall = retrieveAnOrganizationMemberValidateBeforeCall(organizationSlug, memberId, null);
        Type localVarReturnType = new TypeToken<RetrieveAnOrganizationMember200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve an organization member&#39;s details.  Will return a pending invite as long as it&#39;s already approved.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param memberId The member ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAnOrganizationMemberAsync(String organizationSlug, String memberId, final ApiCallback<RetrieveAnOrganizationMember200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveAnOrganizationMemberValidateBeforeCall(organizationSlug, memberId, _callback);
        Type localVarReturnType = new TypeToken<RetrieveAnOrganizationMember200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveEventCountsForAnOrganization
     * @param organizationSlug The slug of the organization the event ID should be looked up in. (required)
     * @param stat The name of the stat to query &#x60;(\&quot;received\&quot;, \&quot;rejected\&quot;, \&quot;blacklisted\&quot;)&#x60;. (optional)
     * @param since A timestamp to set the start of the query in seconds since UNIX epoch. (optional)
     * @param until A timestamp to set the end of the query in seconds since UNIX epoch. (optional)
     * @param resolution An explicit resolution to search for (one of &#x60;10s&#x60;, &#x60;1h&#x60;, and &#x60;1d&#x60;). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call retrieveEventCountsForAnOrganizationCall(String organizationSlug, String stat, OffsetDateTime since, OffsetDateTime until, String resolution, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/organizations/{organization_slug}/stats/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stat", stat));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (until != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("until", until));
        }

        if (resolution != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resolution", resolution));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveEventCountsForAnOrganizationValidateBeforeCall(String organizationSlug, String stat, OffsetDateTime since, OffsetDateTime until, String resolution, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling retrieveEventCountsForAnOrganization(Async)");
        }

        return retrieveEventCountsForAnOrganizationCall(organizationSlug, stat, since, until, resolution, _callback);

    }

    /**
     * 
     * This endpoint is deprecated in favor of [Organization Stats V2](/api/organizations/retrieve-event-counts-for-an-organization-v2/).
     * @param organizationSlug The slug of the organization the event ID should be looked up in. (required)
     * @param stat The name of the stat to query &#x60;(\&quot;received\&quot;, \&quot;rejected\&quot;, \&quot;blacklisted\&quot;)&#x60;. (optional)
     * @param since A timestamp to set the start of the query in seconds since UNIX epoch. (optional)
     * @param until A timestamp to set the end of the query in seconds since UNIX epoch. (optional)
     * @param resolution An explicit resolution to search for (one of &#x60;10s&#x60;, &#x60;1h&#x60;, and &#x60;1d&#x60;). (optional)
     * @return List&lt;List&lt;Integer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public List<List<Integer>> retrieveEventCountsForAnOrganization(String organizationSlug, String stat, OffsetDateTime since, OffsetDateTime until, String resolution) throws ApiException {
        ApiResponse<List<List<Integer>>> localVarResp = retrieveEventCountsForAnOrganizationWithHttpInfo(organizationSlug, stat, since, until, resolution);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint is deprecated in favor of [Organization Stats V2](/api/organizations/retrieve-event-counts-for-an-organization-v2/).
     * @param organizationSlug The slug of the organization the event ID should be looked up in. (required)
     * @param stat The name of the stat to query &#x60;(\&quot;received\&quot;, \&quot;rejected\&quot;, \&quot;blacklisted\&quot;)&#x60;. (optional)
     * @param since A timestamp to set the start of the query in seconds since UNIX epoch. (optional)
     * @param until A timestamp to set the end of the query in seconds since UNIX epoch. (optional)
     * @param resolution An explicit resolution to search for (one of &#x60;10s&#x60;, &#x60;1h&#x60;, and &#x60;1d&#x60;). (optional)
     * @return ApiResponse&lt;List&lt;List&lt;Integer&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<List<List<Integer>>> retrieveEventCountsForAnOrganizationWithHttpInfo(String organizationSlug, String stat, OffsetDateTime since, OffsetDateTime until, String resolution) throws ApiException {
        okhttp3.Call localVarCall = retrieveEventCountsForAnOrganizationValidateBeforeCall(organizationSlug, stat, since, until, resolution, null);
        Type localVarReturnType = new TypeToken<List<List<Integer>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint is deprecated in favor of [Organization Stats V2](/api/organizations/retrieve-event-counts-for-an-organization-v2/).
     * @param organizationSlug The slug of the organization the event ID should be looked up in. (required)
     * @param stat The name of the stat to query &#x60;(\&quot;received\&quot;, \&quot;rejected\&quot;, \&quot;blacklisted\&quot;)&#x60;. (optional)
     * @param since A timestamp to set the start of the query in seconds since UNIX epoch. (optional)
     * @param until A timestamp to set the end of the query in seconds since UNIX epoch. (optional)
     * @param resolution An explicit resolution to search for (one of &#x60;10s&#x60;, &#x60;1h&#x60;, and &#x60;1d&#x60;). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call retrieveEventCountsForAnOrganizationAsync(String organizationSlug, String stat, OffsetDateTime since, OffsetDateTime until, String resolution, final ApiCallback<List<List<Integer>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveEventCountsForAnOrganizationValidateBeforeCall(organizationSlug, stat, since, until, resolution, _callback);
        Type localVarReturnType = new TypeToken<List<List<Integer>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveEventCountsForAnOrganizationV2
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param groupBy can pass multiple groupBy parameters to group by multiple, e.g. &#x60;groupBy&#x3D;project&amp;groupBy&#x3D;outcome&#x60; to group by multiple dimensions. Note that grouping by project can cause missing rows if the number of projects / interval is large. If you have a large number of projects, we recommend filtering and querying by them individually.Also note that grouping by projects does not currently support timeseries interval responses and will instead be a sum of the projectover the entire period specified. (required)
     * @param field the &#x60;sum(quantity)&#x60; field is bytes for attachments, and all others the &#39;event&#39; count for those types of events.  &#x60;sum(times_seen)&#x60; sums the number of times an event has been seen. For &#39;normal&#39; event types, this will be equal to &#x60;sum(quantity)&#x60; for now. For sessions, quantity will sum the total number of events seen in a session, while &#x60;times_seen&#x60; will be the unique number of sessions. and for attachments, &#x60;times_seen&#x60; will be the total number of attachments, while quantity will be the total sum of attachment bytes. (required)
     * @param statsPeriod This defines the range of the time series, relative to now. The range is given in a &#x60;&lt;number&gt;&lt;unit&gt;&#x60; format. For example &#x60;1d&#x60; for a one day range. Possible units are &#x60;m&#x60; for minutes, &#x60;h&#x60; for hours, &#x60;d&#x60; for days and &#x60;w&#x60; for weeks.You must either provide a &#x60;statsPeriod&#x60;, or a &#x60;start&#x60; and &#x60;end&#x60;. (optional)
     * @param interval This is the resolution of the time series, given in the same format as &#x60;statsPeriod&#x60;. The default resolution is &#x60;1h&#x60; and the minimum resolution is currently restricted to &#x60;1h&#x60; as well. Intervals larger than &#x60;1d&#x60; are not supported, and the interval has to cleanly divide one day. (optional)
     * @param start This defines the start of the time series range as an explicit datetime, either in UTC ISO8601 or epoch seconds.Use along with &#x60;end&#x60; instead of &#x60;statsPeriod&#x60;. (optional)
     * @param end This defines the inclusive end of the time series range as an explicit datetime, either in UTC ISO8601 or epoch seconds.Use along with &#x60;start&#x60; instead of &#x60;statsPeriod&#x60;. (optional)
     * @param project The ID of the projects to filter by.  Use &#x60;-1&#x60; to include all accessible projects. (optional)
     * @param category If filtering by attachments, you cannot filter by any other category due to quantity values becoming nonsensical (combining bytes and event counts).  If filtering by &#x60;error&#x60;, it will automatically add &#x60;default&#x60; and &#x60;security&#x60; as we currently roll those two categories into &#x60;error&#x60; for displaying. (optional)
     * @param outcome See https://docs.sentry.io/product/stats/ for more information on outcome statuses. (optional)
     * @param reason The reason field will contain why an event was filtered/dropped. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveEventCountsForAnOrganizationV2Call(String organizationSlug, List<String> groupBy, String field, String statsPeriod, String interval, OffsetDateTime start, OffsetDateTime end, List<Object> project, String category, String outcome, String reason, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/organizations/{organization_slug}/stats_v2/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (statsPeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("statsPeriod", statsPeriod));
        }

        if (interval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval", interval));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (groupBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "groupBy", groupBy));
        }

        if (field != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("field", field));
        }

        if (project != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "project", project));
        }

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (outcome != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outcome", outcome));
        }

        if (reason != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reason", reason));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveEventCountsForAnOrganizationV2ValidateBeforeCall(String organizationSlug, List<String> groupBy, String field, String statsPeriod, String interval, OffsetDateTime start, OffsetDateTime end, List<Object> project, String category, String outcome, String reason, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling retrieveEventCountsForAnOrganizationV2(Async)");
        }

        // verify the required parameter 'groupBy' is set
        if (groupBy == null) {
            throw new ApiException("Missing the required parameter 'groupBy' when calling retrieveEventCountsForAnOrganizationV2(Async)");
        }

        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling retrieveEventCountsForAnOrganizationV2(Async)");
        }

        return retrieveEventCountsForAnOrganizationV2Call(organizationSlug, groupBy, field, statsPeriod, interval, start, end, project, category, outcome, reason, _callback);

    }

    /**
     * 
     * Query event counts for your Organization. Select a field, define a date range, and group or filter by columns.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param groupBy can pass multiple groupBy parameters to group by multiple, e.g. &#x60;groupBy&#x3D;project&amp;groupBy&#x3D;outcome&#x60; to group by multiple dimensions. Note that grouping by project can cause missing rows if the number of projects / interval is large. If you have a large number of projects, we recommend filtering and querying by them individually.Also note that grouping by projects does not currently support timeseries interval responses and will instead be a sum of the projectover the entire period specified. (required)
     * @param field the &#x60;sum(quantity)&#x60; field is bytes for attachments, and all others the &#39;event&#39; count for those types of events.  &#x60;sum(times_seen)&#x60; sums the number of times an event has been seen. For &#39;normal&#39; event types, this will be equal to &#x60;sum(quantity)&#x60; for now. For sessions, quantity will sum the total number of events seen in a session, while &#x60;times_seen&#x60; will be the unique number of sessions. and for attachments, &#x60;times_seen&#x60; will be the total number of attachments, while quantity will be the total sum of attachment bytes. (required)
     * @param statsPeriod This defines the range of the time series, relative to now. The range is given in a &#x60;&lt;number&gt;&lt;unit&gt;&#x60; format. For example &#x60;1d&#x60; for a one day range. Possible units are &#x60;m&#x60; for minutes, &#x60;h&#x60; for hours, &#x60;d&#x60; for days and &#x60;w&#x60; for weeks.You must either provide a &#x60;statsPeriod&#x60;, or a &#x60;start&#x60; and &#x60;end&#x60;. (optional)
     * @param interval This is the resolution of the time series, given in the same format as &#x60;statsPeriod&#x60;. The default resolution is &#x60;1h&#x60; and the minimum resolution is currently restricted to &#x60;1h&#x60; as well. Intervals larger than &#x60;1d&#x60; are not supported, and the interval has to cleanly divide one day. (optional)
     * @param start This defines the start of the time series range as an explicit datetime, either in UTC ISO8601 or epoch seconds.Use along with &#x60;end&#x60; instead of &#x60;statsPeriod&#x60;. (optional)
     * @param end This defines the inclusive end of the time series range as an explicit datetime, either in UTC ISO8601 or epoch seconds.Use along with &#x60;start&#x60; instead of &#x60;statsPeriod&#x60;. (optional)
     * @param project The ID of the projects to filter by.  Use &#x60;-1&#x60; to include all accessible projects. (optional)
     * @param category If filtering by attachments, you cannot filter by any other category due to quantity values becoming nonsensical (combining bytes and event counts).  If filtering by &#x60;error&#x60;, it will automatically add &#x60;default&#x60; and &#x60;security&#x60; as we currently roll those two categories into &#x60;error&#x60; for displaying. (optional)
     * @param outcome See https://docs.sentry.io/product/stats/ for more information on outcome statuses. (optional)
     * @param reason The reason field will contain why an event was filtered/dropped. (optional)
     * @return RetrieveEventCountsForAnOrganizationV2200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveEventCountsForAnOrganizationV2200Response retrieveEventCountsForAnOrganizationV2(String organizationSlug, List<String> groupBy, String field, String statsPeriod, String interval, OffsetDateTime start, OffsetDateTime end, List<Object> project, String category, String outcome, String reason) throws ApiException {
        ApiResponse<RetrieveEventCountsForAnOrganizationV2200Response> localVarResp = retrieveEventCountsForAnOrganizationV2WithHttpInfo(organizationSlug, groupBy, field, statsPeriod, interval, start, end, project, category, outcome, reason);
        return localVarResp.getData();
    }

    /**
     * 
     * Query event counts for your Organization. Select a field, define a date range, and group or filter by columns.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param groupBy can pass multiple groupBy parameters to group by multiple, e.g. &#x60;groupBy&#x3D;project&amp;groupBy&#x3D;outcome&#x60; to group by multiple dimensions. Note that grouping by project can cause missing rows if the number of projects / interval is large. If you have a large number of projects, we recommend filtering and querying by them individually.Also note that grouping by projects does not currently support timeseries interval responses and will instead be a sum of the projectover the entire period specified. (required)
     * @param field the &#x60;sum(quantity)&#x60; field is bytes for attachments, and all others the &#39;event&#39; count for those types of events.  &#x60;sum(times_seen)&#x60; sums the number of times an event has been seen. For &#39;normal&#39; event types, this will be equal to &#x60;sum(quantity)&#x60; for now. For sessions, quantity will sum the total number of events seen in a session, while &#x60;times_seen&#x60; will be the unique number of sessions. and for attachments, &#x60;times_seen&#x60; will be the total number of attachments, while quantity will be the total sum of attachment bytes. (required)
     * @param statsPeriod This defines the range of the time series, relative to now. The range is given in a &#x60;&lt;number&gt;&lt;unit&gt;&#x60; format. For example &#x60;1d&#x60; for a one day range. Possible units are &#x60;m&#x60; for minutes, &#x60;h&#x60; for hours, &#x60;d&#x60; for days and &#x60;w&#x60; for weeks.You must either provide a &#x60;statsPeriod&#x60;, or a &#x60;start&#x60; and &#x60;end&#x60;. (optional)
     * @param interval This is the resolution of the time series, given in the same format as &#x60;statsPeriod&#x60;. The default resolution is &#x60;1h&#x60; and the minimum resolution is currently restricted to &#x60;1h&#x60; as well. Intervals larger than &#x60;1d&#x60; are not supported, and the interval has to cleanly divide one day. (optional)
     * @param start This defines the start of the time series range as an explicit datetime, either in UTC ISO8601 or epoch seconds.Use along with &#x60;end&#x60; instead of &#x60;statsPeriod&#x60;. (optional)
     * @param end This defines the inclusive end of the time series range as an explicit datetime, either in UTC ISO8601 or epoch seconds.Use along with &#x60;start&#x60; instead of &#x60;statsPeriod&#x60;. (optional)
     * @param project The ID of the projects to filter by.  Use &#x60;-1&#x60; to include all accessible projects. (optional)
     * @param category If filtering by attachments, you cannot filter by any other category due to quantity values becoming nonsensical (combining bytes and event counts).  If filtering by &#x60;error&#x60;, it will automatically add &#x60;default&#x60; and &#x60;security&#x60; as we currently roll those two categories into &#x60;error&#x60; for displaying. (optional)
     * @param outcome See https://docs.sentry.io/product/stats/ for more information on outcome statuses. (optional)
     * @param reason The reason field will contain why an event was filtered/dropped. (optional)
     * @return ApiResponse&lt;RetrieveEventCountsForAnOrganizationV2200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveEventCountsForAnOrganizationV2200Response> retrieveEventCountsForAnOrganizationV2WithHttpInfo(String organizationSlug, List<String> groupBy, String field, String statsPeriod, String interval, OffsetDateTime start, OffsetDateTime end, List<Object> project, String category, String outcome, String reason) throws ApiException {
        okhttp3.Call localVarCall = retrieveEventCountsForAnOrganizationV2ValidateBeforeCall(organizationSlug, groupBy, field, statsPeriod, interval, start, end, project, category, outcome, reason, null);
        Type localVarReturnType = new TypeToken<RetrieveEventCountsForAnOrganizationV2200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Query event counts for your Organization. Select a field, define a date range, and group or filter by columns.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param groupBy can pass multiple groupBy parameters to group by multiple, e.g. &#x60;groupBy&#x3D;project&amp;groupBy&#x3D;outcome&#x60; to group by multiple dimensions. Note that grouping by project can cause missing rows if the number of projects / interval is large. If you have a large number of projects, we recommend filtering and querying by them individually.Also note that grouping by projects does not currently support timeseries interval responses and will instead be a sum of the projectover the entire period specified. (required)
     * @param field the &#x60;sum(quantity)&#x60; field is bytes for attachments, and all others the &#39;event&#39; count for those types of events.  &#x60;sum(times_seen)&#x60; sums the number of times an event has been seen. For &#39;normal&#39; event types, this will be equal to &#x60;sum(quantity)&#x60; for now. For sessions, quantity will sum the total number of events seen in a session, while &#x60;times_seen&#x60; will be the unique number of sessions. and for attachments, &#x60;times_seen&#x60; will be the total number of attachments, while quantity will be the total sum of attachment bytes. (required)
     * @param statsPeriod This defines the range of the time series, relative to now. The range is given in a &#x60;&lt;number&gt;&lt;unit&gt;&#x60; format. For example &#x60;1d&#x60; for a one day range. Possible units are &#x60;m&#x60; for minutes, &#x60;h&#x60; for hours, &#x60;d&#x60; for days and &#x60;w&#x60; for weeks.You must either provide a &#x60;statsPeriod&#x60;, or a &#x60;start&#x60; and &#x60;end&#x60;. (optional)
     * @param interval This is the resolution of the time series, given in the same format as &#x60;statsPeriod&#x60;. The default resolution is &#x60;1h&#x60; and the minimum resolution is currently restricted to &#x60;1h&#x60; as well. Intervals larger than &#x60;1d&#x60; are not supported, and the interval has to cleanly divide one day. (optional)
     * @param start This defines the start of the time series range as an explicit datetime, either in UTC ISO8601 or epoch seconds.Use along with &#x60;end&#x60; instead of &#x60;statsPeriod&#x60;. (optional)
     * @param end This defines the inclusive end of the time series range as an explicit datetime, either in UTC ISO8601 or epoch seconds.Use along with &#x60;start&#x60; instead of &#x60;statsPeriod&#x60;. (optional)
     * @param project The ID of the projects to filter by.  Use &#x60;-1&#x60; to include all accessible projects. (optional)
     * @param category If filtering by attachments, you cannot filter by any other category due to quantity values becoming nonsensical (combining bytes and event counts).  If filtering by &#x60;error&#x60;, it will automatically add &#x60;default&#x60; and &#x60;security&#x60; as we currently roll those two categories into &#x60;error&#x60; for displaying. (optional)
     * @param outcome See https://docs.sentry.io/product/stats/ for more information on outcome statuses. (optional)
     * @param reason The reason field will contain why an event was filtered/dropped. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveEventCountsForAnOrganizationV2Async(String organizationSlug, List<String> groupBy, String field, String statsPeriod, String interval, OffsetDateTime start, OffsetDateTime end, List<Object> project, String category, String outcome, String reason, final ApiCallback<RetrieveEventCountsForAnOrganizationV2200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveEventCountsForAnOrganizationV2ValidateBeforeCall(organizationSlug, groupBy, field, statsPeriod, interval, start, end, project, category, outcome, reason, _callback);
        Type localVarReturnType = new TypeToken<RetrieveEventCountsForAnOrganizationV2200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAnOrganization
     * @param organizationSlug The slug of the organization to update. (required)
     * @param updateAnOrganizationRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAnOrganizationCall(String organizationSlug, UpdateAnOrganizationRequest updateAnOrganizationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAnOrganizationRequest;

        // create path and map variables
        String localVarPath = "/api/0/organizations/{organization_slug}/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAnOrganizationValidateBeforeCall(String organizationSlug, UpdateAnOrganizationRequest updateAnOrganizationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling updateAnOrganization(Async)");
        }

        return updateAnOrganizationCall(organizationSlug, updateAnOrganizationRequest, _callback);

    }

    /**
     * 
     * Update various attributes and configurable settings for the given organization.
     * @param organizationSlug The slug of the organization to update. (required)
     * @param updateAnOrganizationRequest  (optional)
     * @return RetrieveAnOrganization200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveAnOrganization200Response updateAnOrganization(String organizationSlug, UpdateAnOrganizationRequest updateAnOrganizationRequest) throws ApiException {
        ApiResponse<RetrieveAnOrganization200Response> localVarResp = updateAnOrganizationWithHttpInfo(organizationSlug, updateAnOrganizationRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Update various attributes and configurable settings for the given organization.
     * @param organizationSlug The slug of the organization to update. (required)
     * @param updateAnOrganizationRequest  (optional)
     * @return ApiResponse&lt;RetrieveAnOrganization200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveAnOrganization200Response> updateAnOrganizationWithHttpInfo(String organizationSlug, UpdateAnOrganizationRequest updateAnOrganizationRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAnOrganizationValidateBeforeCall(organizationSlug, updateAnOrganizationRequest, null);
        Type localVarReturnType = new TypeToken<RetrieveAnOrganization200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update various attributes and configurable settings for the given organization.
     * @param organizationSlug The slug of the organization to update. (required)
     * @param updateAnOrganizationRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAnOrganizationAsync(String organizationSlug, UpdateAnOrganizationRequest updateAnOrganizationRequest, final ApiCallback<RetrieveAnOrganization200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAnOrganizationValidateBeforeCall(organizationSlug, updateAnOrganizationRequest, _callback);
        Type localVarReturnType = new TypeToken<RetrieveAnOrganization200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
