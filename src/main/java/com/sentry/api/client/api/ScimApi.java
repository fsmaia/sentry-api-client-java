/*
 * API Reference
 * Sentry Public API
 *
 * The version of the OpenAPI document: v0
 * Contact: partners@sentry.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sentry.api.client.api;

import com.sentry.api.client.ApiCallback;
import com.sentry.api.client.ApiClient;
import com.sentry.api.client.ApiException;
import com.sentry.api.client.ApiResponse;
import com.sentry.api.client.Configuration;
import com.sentry.api.client.Pair;
import com.sentry.api.client.ProgressRequestBody;
import com.sentry.api.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.sentry.api.client.model.ListAnOrganizationSMembers200Response;
import com.sentry.api.client.model.ListAnOrganizationSMembers200ResponseResourcesInner;
import com.sentry.api.client.model.ListAnOrganizationSPaginatedTeams200Response;
import com.sentry.api.client.model.ListAnOrganizationSPaginatedTeams200ResponseResourcesInner;
import com.sentry.api.client.model.ProvisionANewOrganizationMemberRequest;
import com.sentry.api.client.model.ProvisionANewTeamRequest;
import com.sentry.api.client.model.QueryAnIndividualTeam200Response;
import com.sentry.api.client.model.UpdateATeamSAttributesRequest;
import com.sentry.api.client.model.UpdateAnOrganizationMemberSAttributesRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ScimApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ScimApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ScimApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteAnIndividualTeam
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param teamId The id of the team you&#39;d like to query / update. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAnIndividualTeamCall(String organizationSlug, Integer teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/organizations/{organization_slug}/scim/v2/Groups/{team_id}"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAnIndividualTeamValidateBeforeCall(String organizationSlug, Integer teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling deleteAnIndividualTeam(Async)");
        }

        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling deleteAnIndividualTeam(Async)");
        }

        return deleteAnIndividualTeamCall(organizationSlug, teamId, _callback);

    }

    /**
     * 
     * Delete a team with a SCIM Group DELETE Request.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param teamId The id of the team you&#39;d like to query / update. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAnIndividualTeam(String organizationSlug, Integer teamId) throws ApiException {
        deleteAnIndividualTeamWithHttpInfo(organizationSlug, teamId);
    }

    /**
     * 
     * Delete a team with a SCIM Group DELETE Request.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param teamId The id of the team you&#39;d like to query / update. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAnIndividualTeamWithHttpInfo(String organizationSlug, Integer teamId) throws ApiException {
        okhttp3.Call localVarCall = deleteAnIndividualTeamValidateBeforeCall(organizationSlug, teamId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a team with a SCIM Group DELETE Request.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param teamId The id of the team you&#39;d like to query / update. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAnIndividualTeamAsync(String organizationSlug, Integer teamId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAnIndividualTeamValidateBeforeCall(organizationSlug, teamId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAnOrganizationMemberViaSCIM
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param memberId The id of the member you&#39;d like to query. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAnOrganizationMemberViaSCIMCall(String organizationSlug, Integer memberId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/organizations/{organization_slug}/scim/v2/Users/{member_id}"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "member_id" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAnOrganizationMemberViaSCIMValidateBeforeCall(String organizationSlug, Integer memberId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling deleteAnOrganizationMemberViaSCIM(Async)");
        }

        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling deleteAnOrganizationMemberViaSCIM(Async)");
        }

        return deleteAnOrganizationMemberViaSCIMCall(organizationSlug, memberId, _callback);

    }

    /**
     * 
     * Delete an organization member with a SCIM User DELETE Request.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param memberId The id of the member you&#39;d like to query. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAnOrganizationMemberViaSCIM(String organizationSlug, Integer memberId) throws ApiException {
        deleteAnOrganizationMemberViaSCIMWithHttpInfo(organizationSlug, memberId);
    }

    /**
     * 
     * Delete an organization member with a SCIM User DELETE Request.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param memberId The id of the member you&#39;d like to query. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAnOrganizationMemberViaSCIMWithHttpInfo(String organizationSlug, Integer memberId) throws ApiException {
        okhttp3.Call localVarCall = deleteAnOrganizationMemberViaSCIMValidateBeforeCall(organizationSlug, memberId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete an organization member with a SCIM User DELETE Request.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param memberId The id of the member you&#39;d like to query. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAnOrganizationMemberViaSCIMAsync(String organizationSlug, Integer memberId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAnOrganizationMemberViaSCIMValidateBeforeCall(organizationSlug, memberId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAnOrganizationsMembers
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param startIndex SCIM 1-offset based index for pagination. (optional, default to 1)
     * @param count The maximum number of results the query should return, maximum of 100. (optional, default to 100)
     * @param filter A SCIM filter expression. The only operator currently supported is &#x60;eq&#x60;. (optional)
     * @param excludedAttributes Fields that should be left off of return values. Right now the only supported field for this query is members. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAnOrganizationsMembersCall(String organizationSlug, Integer startIndex, Integer count, String filter, List<String> excludedAttributes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/organizations/{organization_slug}/scim/v2/Users"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (excludedAttributes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "excludedAttributes", excludedAttributes));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAnOrganizationsMembersValidateBeforeCall(String organizationSlug, Integer startIndex, Integer count, String filter, List<String> excludedAttributes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling listAnOrganizationsMembers(Async)");
        }

        return listAnOrganizationsMembersCall(organizationSlug, startIndex, count, filter, excludedAttributes, _callback);

    }

    /**
     * 
     * Returns a paginated list of members bound to a organization with a SCIM Users GET Request.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param startIndex SCIM 1-offset based index for pagination. (optional, default to 1)
     * @param count The maximum number of results the query should return, maximum of 100. (optional, default to 100)
     * @param filter A SCIM filter expression. The only operator currently supported is &#x60;eq&#x60;. (optional)
     * @param excludedAttributes Fields that should be left off of return values. Right now the only supported field for this query is members. (optional)
     * @return ListAnOrganizationSMembers200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ListAnOrganizationSMembers200Response listAnOrganizationsMembers(String organizationSlug, Integer startIndex, Integer count, String filter, List<String> excludedAttributes) throws ApiException {
        ApiResponse<ListAnOrganizationSMembers200Response> localVarResp = listAnOrganizationsMembersWithHttpInfo(organizationSlug, startIndex, count, filter, excludedAttributes);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a paginated list of members bound to a organization with a SCIM Users GET Request.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param startIndex SCIM 1-offset based index for pagination. (optional, default to 1)
     * @param count The maximum number of results the query should return, maximum of 100. (optional, default to 100)
     * @param filter A SCIM filter expression. The only operator currently supported is &#x60;eq&#x60;. (optional)
     * @param excludedAttributes Fields that should be left off of return values. Right now the only supported field for this query is members. (optional)
     * @return ApiResponse&lt;ListAnOrganizationSMembers200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAnOrganizationSMembers200Response> listAnOrganizationsMembersWithHttpInfo(String organizationSlug, Integer startIndex, Integer count, String filter, List<String> excludedAttributes) throws ApiException {
        okhttp3.Call localVarCall = listAnOrganizationsMembersValidateBeforeCall(organizationSlug, startIndex, count, filter, excludedAttributes, null);
        Type localVarReturnType = new TypeToken<ListAnOrganizationSMembers200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a paginated list of members bound to a organization with a SCIM Users GET Request.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param startIndex SCIM 1-offset based index for pagination. (optional, default to 1)
     * @param count The maximum number of results the query should return, maximum of 100. (optional, default to 100)
     * @param filter A SCIM filter expression. The only operator currently supported is &#x60;eq&#x60;. (optional)
     * @param excludedAttributes Fields that should be left off of return values. Right now the only supported field for this query is members. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAnOrganizationsMembersAsync(String organizationSlug, Integer startIndex, Integer count, String filter, List<String> excludedAttributes, final ApiCallback<ListAnOrganizationSMembers200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAnOrganizationsMembersValidateBeforeCall(organizationSlug, startIndex, count, filter, excludedAttributes, _callback);
        Type localVarReturnType = new TypeToken<ListAnOrganizationSMembers200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAnOrganizationsPaginatedTeams
     * @param organizationSlug The slug of the organization. (required)
     * @param startIndex SCIM 1-offset based index for pagination. (optional)
     * @param filter A SCIM filter expression. The only operator currently supported is &#x60;eq&#x60;. (optional)
     * @param count The maximum number of results the query should return, maximum of 100. (optional)
     * @param excludedAttributes Fields that should be left off of return values. Right now the only supported field for this query is &#x60;members&#x60;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Permission Denied </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAnOrganizationsPaginatedTeamsCall(String organizationSlug, Integer startIndex, String filter, Integer count, String excludedAttributes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/organizations/{organization_slug}/scim/v2/Groups"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (excludedAttributes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludedAttributes", excludedAttributes));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAnOrganizationsPaginatedTeamsValidateBeforeCall(String organizationSlug, Integer startIndex, String filter, Integer count, String excludedAttributes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling listAnOrganizationsPaginatedTeams(Async)");
        }

        return listAnOrganizationsPaginatedTeamsCall(organizationSlug, startIndex, filter, count, excludedAttributes, _callback);

    }

    /**
     * 
     * Returns a paginated list of teams bound to a organization with a SCIM Groups GET Request. - Note that the members field will only contain up to 10000 members.
     * @param organizationSlug The slug of the organization. (required)
     * @param startIndex SCIM 1-offset based index for pagination. (optional)
     * @param filter A SCIM filter expression. The only operator currently supported is &#x60;eq&#x60;. (optional)
     * @param count The maximum number of results the query should return, maximum of 100. (optional)
     * @param excludedAttributes Fields that should be left off of return values. Right now the only supported field for this query is &#x60;members&#x60;. (optional)
     * @return ListAnOrganizationSPaginatedTeams200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Permission Denied </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ListAnOrganizationSPaginatedTeams200Response listAnOrganizationsPaginatedTeams(String organizationSlug, Integer startIndex, String filter, Integer count, String excludedAttributes) throws ApiException {
        ApiResponse<ListAnOrganizationSPaginatedTeams200Response> localVarResp = listAnOrganizationsPaginatedTeamsWithHttpInfo(organizationSlug, startIndex, filter, count, excludedAttributes);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a paginated list of teams bound to a organization with a SCIM Groups GET Request. - Note that the members field will only contain up to 10000 members.
     * @param organizationSlug The slug of the organization. (required)
     * @param startIndex SCIM 1-offset based index for pagination. (optional)
     * @param filter A SCIM filter expression. The only operator currently supported is &#x60;eq&#x60;. (optional)
     * @param count The maximum number of results the query should return, maximum of 100. (optional)
     * @param excludedAttributes Fields that should be left off of return values. Right now the only supported field for this query is &#x60;members&#x60;. (optional)
     * @return ApiResponse&lt;ListAnOrganizationSPaginatedTeams200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Permission Denied </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAnOrganizationSPaginatedTeams200Response> listAnOrganizationsPaginatedTeamsWithHttpInfo(String organizationSlug, Integer startIndex, String filter, Integer count, String excludedAttributes) throws ApiException {
        okhttp3.Call localVarCall = listAnOrganizationsPaginatedTeamsValidateBeforeCall(organizationSlug, startIndex, filter, count, excludedAttributes, null);
        Type localVarReturnType = new TypeToken<ListAnOrganizationSPaginatedTeams200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a paginated list of teams bound to a organization with a SCIM Groups GET Request. - Note that the members field will only contain up to 10000 members.
     * @param organizationSlug The slug of the organization. (required)
     * @param startIndex SCIM 1-offset based index for pagination. (optional)
     * @param filter A SCIM filter expression. The only operator currently supported is &#x60;eq&#x60;. (optional)
     * @param count The maximum number of results the query should return, maximum of 100. (optional)
     * @param excludedAttributes Fields that should be left off of return values. Right now the only supported field for this query is &#x60;members&#x60;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Permission Denied </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAnOrganizationsPaginatedTeamsAsync(String organizationSlug, Integer startIndex, String filter, Integer count, String excludedAttributes, final ApiCallback<ListAnOrganizationSPaginatedTeams200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAnOrganizationsPaginatedTeamsValidateBeforeCall(organizationSlug, startIndex, filter, count, excludedAttributes, _callback);
        Type localVarReturnType = new TypeToken<ListAnOrganizationSPaginatedTeams200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for provisionANewOrganizationMember
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param provisionANewOrganizationMemberRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call provisionANewOrganizationMemberCall(String organizationSlug, ProvisionANewOrganizationMemberRequest provisionANewOrganizationMemberRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = provisionANewOrganizationMemberRequest;

        // create path and map variables
        String localVarPath = "/api/0/organizations/{organization_slug}/scim/v2/Users"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call provisionANewOrganizationMemberValidateBeforeCall(String organizationSlug, ProvisionANewOrganizationMemberRequest provisionANewOrganizationMemberRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling provisionANewOrganizationMember(Async)");
        }

        // verify the required parameter 'provisionANewOrganizationMemberRequest' is set
        if (provisionANewOrganizationMemberRequest == null) {
            throw new ApiException("Missing the required parameter 'provisionANewOrganizationMemberRequest' when calling provisionANewOrganizationMember(Async)");
        }

        return provisionANewOrganizationMemberCall(organizationSlug, provisionANewOrganizationMemberRequest, _callback);

    }

    /**
     * 
     * Create a new Organization Member via a SCIM Users POST Request. - &#x60;userName&#x60; should be set to the SAML field used for email, and active should be set to &#x60;true&#x60;. - &#x60;sentryOrgRole&#x60; can only be &#x60;admin&#x60;, &#x60;manager&#x60;, &#x60;billing&#x60;, or &#x60;member&#x60;. - Sentry&#39;s SCIM API doesn&#39;t currently support setting users to inactive, and the member will be deleted if active is set to &#x60;false&#x60;. - The API also does not support setting secondary emails.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param provisionANewOrganizationMemberRequest  (required)
     * @return ListAnOrganizationSMembers200ResponseResourcesInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ListAnOrganizationSMembers200ResponseResourcesInner provisionANewOrganizationMember(String organizationSlug, ProvisionANewOrganizationMemberRequest provisionANewOrganizationMemberRequest) throws ApiException {
        ApiResponse<ListAnOrganizationSMembers200ResponseResourcesInner> localVarResp = provisionANewOrganizationMemberWithHttpInfo(organizationSlug, provisionANewOrganizationMemberRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new Organization Member via a SCIM Users POST Request. - &#x60;userName&#x60; should be set to the SAML field used for email, and active should be set to &#x60;true&#x60;. - &#x60;sentryOrgRole&#x60; can only be &#x60;admin&#x60;, &#x60;manager&#x60;, &#x60;billing&#x60;, or &#x60;member&#x60;. - Sentry&#39;s SCIM API doesn&#39;t currently support setting users to inactive, and the member will be deleted if active is set to &#x60;false&#x60;. - The API also does not support setting secondary emails.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param provisionANewOrganizationMemberRequest  (required)
     * @return ApiResponse&lt;ListAnOrganizationSMembers200ResponseResourcesInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAnOrganizationSMembers200ResponseResourcesInner> provisionANewOrganizationMemberWithHttpInfo(String organizationSlug, ProvisionANewOrganizationMemberRequest provisionANewOrganizationMemberRequest) throws ApiException {
        okhttp3.Call localVarCall = provisionANewOrganizationMemberValidateBeforeCall(organizationSlug, provisionANewOrganizationMemberRequest, null);
        Type localVarReturnType = new TypeToken<ListAnOrganizationSMembers200ResponseResourcesInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new Organization Member via a SCIM Users POST Request. - &#x60;userName&#x60; should be set to the SAML field used for email, and active should be set to &#x60;true&#x60;. - &#x60;sentryOrgRole&#x60; can only be &#x60;admin&#x60;, &#x60;manager&#x60;, &#x60;billing&#x60;, or &#x60;member&#x60;. - Sentry&#39;s SCIM API doesn&#39;t currently support setting users to inactive, and the member will be deleted if active is set to &#x60;false&#x60;. - The API also does not support setting secondary emails.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param provisionANewOrganizationMemberRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call provisionANewOrganizationMemberAsync(String organizationSlug, ProvisionANewOrganizationMemberRequest provisionANewOrganizationMemberRequest, final ApiCallback<ListAnOrganizationSMembers200ResponseResourcesInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = provisionANewOrganizationMemberValidateBeforeCall(organizationSlug, provisionANewOrganizationMemberRequest, _callback);
        Type localVarReturnType = new TypeToken<ListAnOrganizationSMembers200ResponseResourcesInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for provisionANewTeam
     * @param organizationSlug The slug of the organization. (required)
     * @param provisionANewTeamRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad input </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Team slug already exists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call provisionANewTeamCall(String organizationSlug, ProvisionANewTeamRequest provisionANewTeamRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = provisionANewTeamRequest;

        // create path and map variables
        String localVarPath = "/api/0/organizations/{organization_slug}/scim/v2/Groups"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call provisionANewTeamValidateBeforeCall(String organizationSlug, ProvisionANewTeamRequest provisionANewTeamRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling provisionANewTeam(Async)");
        }

        // verify the required parameter 'provisionANewTeamRequest' is set
        if (provisionANewTeamRequest == null) {
            throw new ApiException("Missing the required parameter 'provisionANewTeamRequest' when calling provisionANewTeam(Async)");
        }

        return provisionANewTeamCall(organizationSlug, provisionANewTeamRequest, _callback);

    }

    /**
     * 
     * Create a new team bound to an organization via a SCIM Groups POST Request. Note that teams are always created with an empty member set. The endpoint will also do a normalization of uppercase / spaces to lowercase and dashes.
     * @param organizationSlug The slug of the organization. (required)
     * @param provisionANewTeamRequest  (required)
     * @return ListAnOrganizationSPaginatedTeams200ResponseResourcesInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad input </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Team slug already exists </td><td>  -  </td></tr>
     </table>
     */
    public ListAnOrganizationSPaginatedTeams200ResponseResourcesInner provisionANewTeam(String organizationSlug, ProvisionANewTeamRequest provisionANewTeamRequest) throws ApiException {
        ApiResponse<ListAnOrganizationSPaginatedTeams200ResponseResourcesInner> localVarResp = provisionANewTeamWithHttpInfo(organizationSlug, provisionANewTeamRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new team bound to an organization via a SCIM Groups POST Request. Note that teams are always created with an empty member set. The endpoint will also do a normalization of uppercase / spaces to lowercase and dashes.
     * @param organizationSlug The slug of the organization. (required)
     * @param provisionANewTeamRequest  (required)
     * @return ApiResponse&lt;ListAnOrganizationSPaginatedTeams200ResponseResourcesInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad input </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Team slug already exists </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAnOrganizationSPaginatedTeams200ResponseResourcesInner> provisionANewTeamWithHttpInfo(String organizationSlug, ProvisionANewTeamRequest provisionANewTeamRequest) throws ApiException {
        okhttp3.Call localVarCall = provisionANewTeamValidateBeforeCall(organizationSlug, provisionANewTeamRequest, null);
        Type localVarReturnType = new TypeToken<ListAnOrganizationSPaginatedTeams200ResponseResourcesInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new team bound to an organization via a SCIM Groups POST Request. Note that teams are always created with an empty member set. The endpoint will also do a normalization of uppercase / spaces to lowercase and dashes.
     * @param organizationSlug The slug of the organization. (required)
     * @param provisionANewTeamRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad input </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Team slug already exists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call provisionANewTeamAsync(String organizationSlug, ProvisionANewTeamRequest provisionANewTeamRequest, final ApiCallback<ListAnOrganizationSPaginatedTeams200ResponseResourcesInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = provisionANewTeamValidateBeforeCall(organizationSlug, provisionANewTeamRequest, _callback);
        Type localVarReturnType = new TypeToken<ListAnOrganizationSPaginatedTeams200ResponseResourcesInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queryAnIndividualOrganizationMember
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param memberId The id of the member you&#39;d like to query. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryAnIndividualOrganizationMemberCall(String organizationSlug, Integer memberId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/organizations/{organization_slug}/scim/v2/Users/{member_id}"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "member_id" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryAnIndividualOrganizationMemberValidateBeforeCall(String organizationSlug, Integer memberId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling queryAnIndividualOrganizationMember(Async)");
        }

        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling queryAnIndividualOrganizationMember(Async)");
        }

        return queryAnIndividualOrganizationMemberCall(organizationSlug, memberId, _callback);

    }

    /**
     * 
     * Query an individual organization member with a SCIM User GET Request. - The &#x60;name&#x60; object will contain fields &#x60;firstName&#x60; and &#x60;lastName&#x60; with the values of &#x60;N/A&#x60;. Sentry&#39;s SCIM API does not currently support these fields but returns them for compatibility purposes.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param memberId The id of the member you&#39;d like to query. (required)
     * @return ListAnOrganizationSMembers200ResponseResourcesInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ListAnOrganizationSMembers200ResponseResourcesInner queryAnIndividualOrganizationMember(String organizationSlug, Integer memberId) throws ApiException {
        ApiResponse<ListAnOrganizationSMembers200ResponseResourcesInner> localVarResp = queryAnIndividualOrganizationMemberWithHttpInfo(organizationSlug, memberId);
        return localVarResp.getData();
    }

    /**
     * 
     * Query an individual organization member with a SCIM User GET Request. - The &#x60;name&#x60; object will contain fields &#x60;firstName&#x60; and &#x60;lastName&#x60; with the values of &#x60;N/A&#x60;. Sentry&#39;s SCIM API does not currently support these fields but returns them for compatibility purposes.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param memberId The id of the member you&#39;d like to query. (required)
     * @return ApiResponse&lt;ListAnOrganizationSMembers200ResponseResourcesInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAnOrganizationSMembers200ResponseResourcesInner> queryAnIndividualOrganizationMemberWithHttpInfo(String organizationSlug, Integer memberId) throws ApiException {
        okhttp3.Call localVarCall = queryAnIndividualOrganizationMemberValidateBeforeCall(organizationSlug, memberId, null);
        Type localVarReturnType = new TypeToken<ListAnOrganizationSMembers200ResponseResourcesInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Query an individual organization member with a SCIM User GET Request. - The &#x60;name&#x60; object will contain fields &#x60;firstName&#x60; and &#x60;lastName&#x60; with the values of &#x60;N/A&#x60;. Sentry&#39;s SCIM API does not currently support these fields but returns them for compatibility purposes.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param memberId The id of the member you&#39;d like to query. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryAnIndividualOrganizationMemberAsync(String organizationSlug, Integer memberId, final ApiCallback<ListAnOrganizationSMembers200ResponseResourcesInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryAnIndividualOrganizationMemberValidateBeforeCall(organizationSlug, memberId, _callback);
        Type localVarReturnType = new TypeToken<ListAnOrganizationSMembers200ResponseResourcesInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queryAnIndividualTeam
     * @param teamId The id of the team you&#39;d like to query / update. (required)
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryAnIndividualTeamCall(Integer teamId, String organizationSlug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/organizations/{organization_slug}/scim/v2/Groups/{team_id}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryAnIndividualTeamValidateBeforeCall(Integer teamId, String organizationSlug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling queryAnIndividualTeam(Async)");
        }

        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling queryAnIndividualTeam(Async)");
        }

        return queryAnIndividualTeamCall(teamId, organizationSlug, _callback);

    }

    /**
     * 
     * Query an individual team with a SCIM Group GET Request. - Note that the members field will only contain up to 10000 members.
     * @param teamId The id of the team you&#39;d like to query / update. (required)
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @return QueryAnIndividualTeam200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public QueryAnIndividualTeam200Response queryAnIndividualTeam(Integer teamId, String organizationSlug) throws ApiException {
        ApiResponse<QueryAnIndividualTeam200Response> localVarResp = queryAnIndividualTeamWithHttpInfo(teamId, organizationSlug);
        return localVarResp.getData();
    }

    /**
     * 
     * Query an individual team with a SCIM Group GET Request. - Note that the members field will only contain up to 10000 members.
     * @param teamId The id of the team you&#39;d like to query / update. (required)
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @return ApiResponse&lt;QueryAnIndividualTeam200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QueryAnIndividualTeam200Response> queryAnIndividualTeamWithHttpInfo(Integer teamId, String organizationSlug) throws ApiException {
        okhttp3.Call localVarCall = queryAnIndividualTeamValidateBeforeCall(teamId, organizationSlug, null);
        Type localVarReturnType = new TypeToken<QueryAnIndividualTeam200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Query an individual team with a SCIM Group GET Request. - Note that the members field will only contain up to 10000 members.
     * @param teamId The id of the team you&#39;d like to query / update. (required)
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryAnIndividualTeamAsync(Integer teamId, String organizationSlug, final ApiCallback<QueryAnIndividualTeam200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryAnIndividualTeamValidateBeforeCall(teamId, organizationSlug, _callback);
        Type localVarReturnType = new TypeToken<QueryAnIndividualTeam200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateATeamsAttributes
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param teamId The id of the team you&#39;d like to query / update. (required)
     * @param updateATeamSAttributesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateATeamsAttributesCall(String organizationSlug, Integer teamId, UpdateATeamSAttributesRequest updateATeamSAttributesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateATeamSAttributesRequest;

        // create path and map variables
        String localVarPath = "/api/0/organizations/{organization_slug}/scim/v2/Groups/{team_id}"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateATeamsAttributesValidateBeforeCall(String organizationSlug, Integer teamId, UpdateATeamSAttributesRequest updateATeamSAttributesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling updateATeamsAttributes(Async)");
        }

        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling updateATeamsAttributes(Async)");
        }

        // verify the required parameter 'updateATeamSAttributesRequest' is set
        if (updateATeamSAttributesRequest == null) {
            throw new ApiException("Missing the required parameter 'updateATeamSAttributesRequest' when calling updateATeamsAttributes(Async)");
        }

        return updateATeamsAttributesCall(organizationSlug, teamId, updateATeamSAttributesRequest, _callback);

    }

    /**
     * 
     * Update a team&#39;s attributes with a SCIM Group PATCH Request. Valid operations are:  * Renaming a team: &#x60;&#x60;&#x60;json {     \&quot;Operations\&quot;: [{         \&quot;op\&quot;: \&quot;replace\&quot;,         \&quot;value\&quot;: {             \&quot;id\&quot;: 23,             \&quot;displayName\&quot;: \&quot;newName\&quot;         }     }] } &#x60;&#x60;&#x60; * Adding a member to a team: &#x60;&#x60;&#x60;json {     \&quot;Operations\&quot;: [{         \&quot;op\&quot;: \&quot;add\&quot;,         \&quot;path\&quot;: \&quot;members\&quot;,         \&quot;value\&quot;: [             {                 \&quot;value\&quot;: 23,                 \&quot;display\&quot;: \&quot;testexample@example.com\&quot;             }         ]     }] } &#x60;&#x60;&#x60; * Removing a member from a team: &#x60;&#x60;&#x60;json {     \&quot;Operations\&quot;: [{         \&quot;op\&quot;: \&quot;remove\&quot;,         \&quot;path\&quot;: \&quot;members[value eq \&quot;23\&quot;]\&quot;     }] } &#x60;&#x60;&#x60; * Replacing an entire member set of a team: &#x60;&#x60;&#x60;json {     \&quot;Operations\&quot;: [{         \&quot;op\&quot;: \&quot;replace\&quot;,         \&quot;path\&quot;: \&quot;members\&quot;,         \&quot;value\&quot;: [             {                 \&quot;value\&quot;: 23,                 \&quot;display\&quot;: \&quot;testexample2@sentry.io\&quot;             },             {                 \&quot;value\&quot;: 24,                 \&quot;display\&quot;: \&quot;testexample3@sentry.io\&quot;             }         ]     }] } &#x60;&#x60;&#x60;
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param teamId The id of the team you&#39;d like to query / update. (required)
     * @param updateATeamSAttributesRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void updateATeamsAttributes(String organizationSlug, Integer teamId, UpdateATeamSAttributesRequest updateATeamSAttributesRequest) throws ApiException {
        updateATeamsAttributesWithHttpInfo(organizationSlug, teamId, updateATeamSAttributesRequest);
    }

    /**
     * 
     * Update a team&#39;s attributes with a SCIM Group PATCH Request. Valid operations are:  * Renaming a team: &#x60;&#x60;&#x60;json {     \&quot;Operations\&quot;: [{         \&quot;op\&quot;: \&quot;replace\&quot;,         \&quot;value\&quot;: {             \&quot;id\&quot;: 23,             \&quot;displayName\&quot;: \&quot;newName\&quot;         }     }] } &#x60;&#x60;&#x60; * Adding a member to a team: &#x60;&#x60;&#x60;json {     \&quot;Operations\&quot;: [{         \&quot;op\&quot;: \&quot;add\&quot;,         \&quot;path\&quot;: \&quot;members\&quot;,         \&quot;value\&quot;: [             {                 \&quot;value\&quot;: 23,                 \&quot;display\&quot;: \&quot;testexample@example.com\&quot;             }         ]     }] } &#x60;&#x60;&#x60; * Removing a member from a team: &#x60;&#x60;&#x60;json {     \&quot;Operations\&quot;: [{         \&quot;op\&quot;: \&quot;remove\&quot;,         \&quot;path\&quot;: \&quot;members[value eq \&quot;23\&quot;]\&quot;     }] } &#x60;&#x60;&#x60; * Replacing an entire member set of a team: &#x60;&#x60;&#x60;json {     \&quot;Operations\&quot;: [{         \&quot;op\&quot;: \&quot;replace\&quot;,         \&quot;path\&quot;: \&quot;members\&quot;,         \&quot;value\&quot;: [             {                 \&quot;value\&quot;: 23,                 \&quot;display\&quot;: \&quot;testexample2@sentry.io\&quot;             },             {                 \&quot;value\&quot;: 24,                 \&quot;display\&quot;: \&quot;testexample3@sentry.io\&quot;             }         ]     }] } &#x60;&#x60;&#x60;
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param teamId The id of the team you&#39;d like to query / update. (required)
     * @param updateATeamSAttributesRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateATeamsAttributesWithHttpInfo(String organizationSlug, Integer teamId, UpdateATeamSAttributesRequest updateATeamSAttributesRequest) throws ApiException {
        okhttp3.Call localVarCall = updateATeamsAttributesValidateBeforeCall(organizationSlug, teamId, updateATeamSAttributesRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Update a team&#39;s attributes with a SCIM Group PATCH Request. Valid operations are:  * Renaming a team: &#x60;&#x60;&#x60;json {     \&quot;Operations\&quot;: [{         \&quot;op\&quot;: \&quot;replace\&quot;,         \&quot;value\&quot;: {             \&quot;id\&quot;: 23,             \&quot;displayName\&quot;: \&quot;newName\&quot;         }     }] } &#x60;&#x60;&#x60; * Adding a member to a team: &#x60;&#x60;&#x60;json {     \&quot;Operations\&quot;: [{         \&quot;op\&quot;: \&quot;add\&quot;,         \&quot;path\&quot;: \&quot;members\&quot;,         \&quot;value\&quot;: [             {                 \&quot;value\&quot;: 23,                 \&quot;display\&quot;: \&quot;testexample@example.com\&quot;             }         ]     }] } &#x60;&#x60;&#x60; * Removing a member from a team: &#x60;&#x60;&#x60;json {     \&quot;Operations\&quot;: [{         \&quot;op\&quot;: \&quot;remove\&quot;,         \&quot;path\&quot;: \&quot;members[value eq \&quot;23\&quot;]\&quot;     }] } &#x60;&#x60;&#x60; * Replacing an entire member set of a team: &#x60;&#x60;&#x60;json {     \&quot;Operations\&quot;: [{         \&quot;op\&quot;: \&quot;replace\&quot;,         \&quot;path\&quot;: \&quot;members\&quot;,         \&quot;value\&quot;: [             {                 \&quot;value\&quot;: 23,                 \&quot;display\&quot;: \&quot;testexample2@sentry.io\&quot;             },             {                 \&quot;value\&quot;: 24,                 \&quot;display\&quot;: \&quot;testexample3@sentry.io\&quot;             }         ]     }] } &#x60;&#x60;&#x60;
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param teamId The id of the team you&#39;d like to query / update. (required)
     * @param updateATeamSAttributesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateATeamsAttributesAsync(String organizationSlug, Integer teamId, UpdateATeamSAttributesRequest updateATeamSAttributesRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateATeamsAttributesValidateBeforeCall(organizationSlug, teamId, updateATeamSAttributesRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAnOrganizationMembersAttributes
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param memberId The id of the member you&#39;d like to query. (required)
     * @param updateAnOrganizationMemberSAttributesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAnOrganizationMembersAttributesCall(String organizationSlug, Integer memberId, UpdateAnOrganizationMemberSAttributesRequest updateAnOrganizationMemberSAttributesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAnOrganizationMemberSAttributesRequest;

        // create path and map variables
        String localVarPath = "/api/0/organizations/{organization_slug}/scim/v2/Users/{member_id}"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "member_id" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAnOrganizationMembersAttributesValidateBeforeCall(String organizationSlug, Integer memberId, UpdateAnOrganizationMemberSAttributesRequest updateAnOrganizationMemberSAttributesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling updateAnOrganizationMembersAttributes(Async)");
        }

        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling updateAnOrganizationMembersAttributes(Async)");
        }

        // verify the required parameter 'updateAnOrganizationMemberSAttributesRequest' is set
        if (updateAnOrganizationMemberSAttributesRequest == null) {
            throw new ApiException("Missing the required parameter 'updateAnOrganizationMemberSAttributesRequest' when calling updateAnOrganizationMembersAttributes(Async)");
        }

        return updateAnOrganizationMembersAttributesCall(organizationSlug, memberId, updateAnOrganizationMemberSAttributesRequest, _callback);

    }

    /**
     * 
     * Update an organization member&#39;s attributes with a SCIM PATCH Request. The only supported attribute is &#x60;active&#x60;. After setting &#x60;active&#x60; to false Sentry will permanently delete the Organization Member.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param memberId The id of the member you&#39;d like to query. (required)
     * @param updateAnOrganizationMemberSAttributesRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void updateAnOrganizationMembersAttributes(String organizationSlug, Integer memberId, UpdateAnOrganizationMemberSAttributesRequest updateAnOrganizationMemberSAttributesRequest) throws ApiException {
        updateAnOrganizationMembersAttributesWithHttpInfo(organizationSlug, memberId, updateAnOrganizationMemberSAttributesRequest);
    }

    /**
     * 
     * Update an organization member&#39;s attributes with a SCIM PATCH Request. The only supported attribute is &#x60;active&#x60;. After setting &#x60;active&#x60; to false Sentry will permanently delete the Organization Member.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param memberId The id of the member you&#39;d like to query. (required)
     * @param updateAnOrganizationMemberSAttributesRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateAnOrganizationMembersAttributesWithHttpInfo(String organizationSlug, Integer memberId, UpdateAnOrganizationMemberSAttributesRequest updateAnOrganizationMemberSAttributesRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAnOrganizationMembersAttributesValidateBeforeCall(organizationSlug, memberId, updateAnOrganizationMemberSAttributesRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Update an organization member&#39;s attributes with a SCIM PATCH Request. The only supported attribute is &#x60;active&#x60;. After setting &#x60;active&#x60; to false Sentry will permanently delete the Organization Member.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param memberId The id of the member you&#39;d like to query. (required)
     * @param updateAnOrganizationMemberSAttributesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAnOrganizationMembersAttributesAsync(String organizationSlug, Integer memberId, UpdateAnOrganizationMemberSAttributesRequest updateAnOrganizationMemberSAttributesRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAnOrganizationMembersAttributesValidateBeforeCall(organizationSlug, memberId, updateAnOrganizationMemberSAttributesRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
