/*
 * API Reference
 * Sentry Public API
 *
 * The version of the OpenAPI document: v0
 * Contact: partners@sentry.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sentry.api.client.api;

import com.sentry.api.client.ApiCallback;
import com.sentry.api.client.ApiClient;
import com.sentry.api.client.ApiException;
import com.sentry.api.client.ApiResponse;
import com.sentry.api.client.Configuration;
import com.sentry.api.client.Pair;
import com.sentry.api.client.ProgressRequestBody;
import com.sentry.api.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.sentry.api.client.model.CreateANewClientKeyRequest;
import com.sentry.api.client.model.CreateANewProjectRequest;
import java.io.File;
import com.sentry.api.client.model.ListAProjectSClientKeys200ResponseInner;
import com.sentry.api.client.model.ListAProjectSServiceHooks200ResponseInner;
import com.sentry.api.client.model.ListAProjectSUserFeedback200ResponseInner;
import com.sentry.api.client.model.ListAProjectSUsers200ResponseInner;
import com.sentry.api.client.model.ListATagSValues200ResponseInner;
import com.sentry.api.client.model.ListYourProjects200ResponseInner;
import java.time.OffsetDateTime;
import com.sentry.api.client.model.RegisterANewServiceHookRequest;
import com.sentry.api.client.model.RetrieveAProject200Response;
import com.sentry.api.client.model.RetrieveMonitorsForAnOrganization200ResponseInnerProject;
import com.sentry.api.client.model.SubmitUserFeedbackRequest;
import com.sentry.api.client.model.UpdateAClientKeyRequest;
import com.sentry.api.client.model.UpdateAProjectRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import jakarta.ws.rs.core.GenericType;

public class ProjectsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProjectsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createANewClientKey
     * @param organizationSlug The slug of the organization the client keys belong to. (required)
     * @param projectSlug The slug of the project the client keys belong to. (required)
     * @param createANewClientKeyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createANewClientKeyCall(String organizationSlug, String projectSlug, CreateANewClientKeyRequest createANewClientKeyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createANewClientKeyRequest;

        // create path and map variables
        String localVarPath = "/api/0/projects/{organization_slug}/{project_slug}/keys/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createANewClientKeyValidateBeforeCall(String organizationSlug, String projectSlug, CreateANewClientKeyRequest createANewClientKeyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling createANewClientKey(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling createANewClientKey(Async)");
        }

        // verify the required parameter 'createANewClientKeyRequest' is set
        if (createANewClientKeyRequest == null) {
            throw new ApiException("Missing the required parameter 'createANewClientKeyRequest' when calling createANewClientKey(Async)");
        }

        return createANewClientKeyCall(organizationSlug, projectSlug, createANewClientKeyRequest, _callback);

    }

    /**
     * 
     * Create a new client key bound to a project.  The key&#39;s secret and public key are generated by the server.
     * @param organizationSlug The slug of the organization the client keys belong to. (required)
     * @param projectSlug The slug of the project the client keys belong to. (required)
     * @param createANewClientKeyRequest  (required)
     * @return ListAProjectSClientKeys200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ListAProjectSClientKeys200ResponseInner createANewClientKey(String organizationSlug, String projectSlug, CreateANewClientKeyRequest createANewClientKeyRequest) throws ApiException {
        ApiResponse<ListAProjectSClientKeys200ResponseInner> localVarResp = createANewClientKeyWithHttpInfo(organizationSlug, projectSlug, createANewClientKeyRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new client key bound to a project.  The key&#39;s secret and public key are generated by the server.
     * @param organizationSlug The slug of the organization the client keys belong to. (required)
     * @param projectSlug The slug of the project the client keys belong to. (required)
     * @param createANewClientKeyRequest  (required)
     * @return ApiResponse&lt;ListAProjectSClientKeys200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAProjectSClientKeys200ResponseInner> createANewClientKeyWithHttpInfo(String organizationSlug, String projectSlug, CreateANewClientKeyRequest createANewClientKeyRequest) throws ApiException {
        okhttp3.Call localVarCall = createANewClientKeyValidateBeforeCall(organizationSlug, projectSlug, createANewClientKeyRequest, null);
        Type localVarReturnType = new TypeToken<ListAProjectSClientKeys200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new client key bound to a project.  The key&#39;s secret and public key are generated by the server.
     * @param organizationSlug The slug of the organization the client keys belong to. (required)
     * @param projectSlug The slug of the project the client keys belong to. (required)
     * @param createANewClientKeyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createANewClientKeyAsync(String organizationSlug, String projectSlug, CreateANewClientKeyRequest createANewClientKeyRequest, final ApiCallback<ListAProjectSClientKeys200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = createANewClientKeyValidateBeforeCall(organizationSlug, projectSlug, createANewClientKeyRequest, _callback);
        Type localVarReturnType = new TypeToken<ListAProjectSClientKeys200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createANewProject
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param teamSlug The slug of the team the resource belongs to. (required)
     * @param name The name of the project. (required)
     * @param createANewProjectRequest  (required)
     * @param slug Optional slug for the project. If not provided a slug is generated from the name. (optional)
     * @param platform The platform for the project. (optional)
     * @param defaultRules Defaults to true where the behavior is to alert the user on every new issue. Setting this to false will turn this off and the user must create their own alerts to be notified of new issues. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A project with this slug already exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createANewProjectCall(String organizationSlug, String teamSlug, String name, CreateANewProjectRequest createANewProjectRequest, String slug, String platform, Boolean defaultRules, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createANewProjectRequest;

        // create path and map variables
        String localVarPath = "/api/0/teams/{organization_slug}/{team_slug}/projects/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "team_slug" + "}", localVarApiClient.escapeString(teamSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        if (defaultRules != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("default_rules", defaultRules));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createANewProjectValidateBeforeCall(String organizationSlug, String teamSlug, String name, CreateANewProjectRequest createANewProjectRequest, String slug, String platform, Boolean defaultRules, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling createANewProject(Async)");
        }

        // verify the required parameter 'teamSlug' is set
        if (teamSlug == null) {
            throw new ApiException("Missing the required parameter 'teamSlug' when calling createANewProject(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createANewProject(Async)");
        }

        // verify the required parameter 'createANewProjectRequest' is set
        if (createANewProjectRequest == null) {
            throw new ApiException("Missing the required parameter 'createANewProjectRequest' when calling createANewProject(Async)");
        }

        return createANewProjectCall(organizationSlug, teamSlug, name, createANewProjectRequest, slug, platform, defaultRules, _callback);

    }

    /**
     * 
     * Create a new project bound to a team.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param teamSlug The slug of the team the resource belongs to. (required)
     * @param name The name of the project. (required)
     * @param createANewProjectRequest  (required)
     * @param slug Optional slug for the project. If not provided a slug is generated from the name. (optional)
     * @param platform The platform for the project. (optional)
     * @param defaultRules Defaults to true where the behavior is to alert the user on every new issue. Setting this to false will turn this off and the user must create their own alerts to be notified of new issues. (optional)
     * @return RetrieveMonitorsForAnOrganization200ResponseInnerProject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A project with this slug already exists. </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveMonitorsForAnOrganization200ResponseInnerProject createANewProject(String organizationSlug, String teamSlug, String name, CreateANewProjectRequest createANewProjectRequest, String slug, String platform, Boolean defaultRules) throws ApiException {
        ApiResponse<RetrieveMonitorsForAnOrganization200ResponseInnerProject> localVarResp = createANewProjectWithHttpInfo(organizationSlug, teamSlug, name, createANewProjectRequest, slug, platform, defaultRules);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new project bound to a team.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param teamSlug The slug of the team the resource belongs to. (required)
     * @param name The name of the project. (required)
     * @param createANewProjectRequest  (required)
     * @param slug Optional slug for the project. If not provided a slug is generated from the name. (optional)
     * @param platform The platform for the project. (optional)
     * @param defaultRules Defaults to true where the behavior is to alert the user on every new issue. Setting this to false will turn this off and the user must create their own alerts to be notified of new issues. (optional)
     * @return ApiResponse&lt;RetrieveMonitorsForAnOrganization200ResponseInnerProject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A project with this slug already exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveMonitorsForAnOrganization200ResponseInnerProject> createANewProjectWithHttpInfo(String organizationSlug, String teamSlug, String name, CreateANewProjectRequest createANewProjectRequest, String slug, String platform, Boolean defaultRules) throws ApiException {
        okhttp3.Call localVarCall = createANewProjectValidateBeforeCall(organizationSlug, teamSlug, name, createANewProjectRequest, slug, platform, defaultRules, null);
        Type localVarReturnType = new TypeToken<RetrieveMonitorsForAnOrganization200ResponseInnerProject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new project bound to a team.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param teamSlug The slug of the team the resource belongs to. (required)
     * @param name The name of the project. (required)
     * @param createANewProjectRequest  (required)
     * @param slug Optional slug for the project. If not provided a slug is generated from the name. (optional)
     * @param platform The platform for the project. (optional)
     * @param defaultRules Defaults to true where the behavior is to alert the user on every new issue. Setting this to false will turn this off and the user must create their own alerts to be notified of new issues. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A project with this slug already exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createANewProjectAsync(String organizationSlug, String teamSlug, String name, CreateANewProjectRequest createANewProjectRequest, String slug, String platform, Boolean defaultRules, final ApiCallback<RetrieveMonitorsForAnOrganization200ResponseInnerProject> _callback) throws ApiException {

        okhttp3.Call localVarCall = createANewProjectValidateBeforeCall(organizationSlug, teamSlug, name, createANewProjectRequest, slug, platform, defaultRules, _callback);
        Type localVarReturnType = new TypeToken<RetrieveMonitorsForAnOrganization200ResponseInnerProject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAClientKey
     * @param organizationSlug The slug of the organization the client keys belong to. (required)
     * @param projectSlug The slug of the project the client keys belong to. (required)
     * @param keyId The ID of the key to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Project not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAClientKeyCall(String organizationSlug, String projectSlug, String keyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/projects/{organization_slug}/{project_slug}/keys/{key_id}/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()))
            .replace("{" + "key_id" + "}", localVarApiClient.escapeString(keyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAClientKeyValidateBeforeCall(String organizationSlug, String projectSlug, String keyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling deleteAClientKey(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling deleteAClientKey(Async)");
        }

        // verify the required parameter 'keyId' is set
        if (keyId == null) {
            throw new ApiException("Missing the required parameter 'keyId' when calling deleteAClientKey(Async)");
        }

        return deleteAClientKeyCall(organizationSlug, projectSlug, keyId, _callback);

    }

    /**
     * 
     * Delete a client key.
     * @param organizationSlug The slug of the organization the client keys belong to. (required)
     * @param projectSlug The slug of the project the client keys belong to. (required)
     * @param keyId The ID of the key to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Project not found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAClientKey(String organizationSlug, String projectSlug, String keyId) throws ApiException {
        deleteAClientKeyWithHttpInfo(organizationSlug, projectSlug, keyId);
    }

    /**
     * 
     * Delete a client key.
     * @param organizationSlug The slug of the organization the client keys belong to. (required)
     * @param projectSlug The slug of the project the client keys belong to. (required)
     * @param keyId The ID of the key to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Project not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAClientKeyWithHttpInfo(String organizationSlug, String projectSlug, String keyId) throws ApiException {
        okhttp3.Call localVarCall = deleteAClientKeyValidateBeforeCall(organizationSlug, projectSlug, keyId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a client key.
     * @param organizationSlug The slug of the organization the client keys belong to. (required)
     * @param projectSlug The slug of the project the client keys belong to. (required)
     * @param keyId The ID of the key to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Project not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAClientKeyAsync(String organizationSlug, String projectSlug, String keyId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAClientKeyValidateBeforeCall(organizationSlug, projectSlug, keyId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAProject
     * @param organizationSlug The slug of the organization the project belongs to. (required)
     * @param projectSlug The slug of the project to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Project not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAProjectCall(String organizationSlug, String projectSlug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/projects/{organization_slug}/{project_slug}/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAProjectValidateBeforeCall(String organizationSlug, String projectSlug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling deleteAProject(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling deleteAProject(Async)");
        }

        return deleteAProjectCall(organizationSlug, projectSlug, _callback);

    }

    /**
     * 
     * Schedules a project for deletion.  Deletion happens asynchronously and therefore is not immediate. However once deletion has begun the state of a project changes and will be hidden from most public views.
     * @param organizationSlug The slug of the organization the project belongs to. (required)
     * @param projectSlug The slug of the project to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Project not found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAProject(String organizationSlug, String projectSlug) throws ApiException {
        deleteAProjectWithHttpInfo(organizationSlug, projectSlug);
    }

    /**
     * 
     * Schedules a project for deletion.  Deletion happens asynchronously and therefore is not immediate. However once deletion has begun the state of a project changes and will be hidden from most public views.
     * @param organizationSlug The slug of the organization the project belongs to. (required)
     * @param projectSlug The slug of the project to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Project not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAProjectWithHttpInfo(String organizationSlug, String projectSlug) throws ApiException {
        okhttp3.Call localVarCall = deleteAProjectValidateBeforeCall(organizationSlug, projectSlug, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Schedules a project for deletion.  Deletion happens asynchronously and therefore is not immediate. However once deletion has begun the state of a project changes and will be hidden from most public views.
     * @param organizationSlug The slug of the organization the project belongs to. (required)
     * @param projectSlug The slug of the project to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Project not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAProjectAsync(String organizationSlug, String projectSlug, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAProjectValidateBeforeCall(organizationSlug, projectSlug, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteASpecificProjectsDebugInformationFile
     * @param organizationSlug The slug of the organization the file belongs to. (required)
     * @param projectSlug The slug of the project to delete the DIF. (required)
     * @param id The ID of the DIF to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteASpecificProjectsDebugInformationFileCall(String organizationSlug, String projectSlug, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/projects/{organization_slug}/{project_slug}/files/dsyms/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteASpecificProjectsDebugInformationFileValidateBeforeCall(String organizationSlug, String projectSlug, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling deleteASpecificProjectsDebugInformationFile(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling deleteASpecificProjectsDebugInformationFile(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteASpecificProjectsDebugInformationFile(Async)");
        }

        return deleteASpecificProjectsDebugInformationFileCall(organizationSlug, projectSlug, id, _callback);

    }

    /**
     * 
     * Delete a debug information file for a given project.
     * @param organizationSlug The slug of the organization the file belongs to. (required)
     * @param projectSlug The slug of the project to delete the DIF. (required)
     * @param id The ID of the DIF to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
     */
    public void deleteASpecificProjectsDebugInformationFile(String organizationSlug, String projectSlug, String id) throws ApiException {
        deleteASpecificProjectsDebugInformationFileWithHttpInfo(organizationSlug, projectSlug, id);
    }

    /**
     * 
     * Delete a debug information file for a given project.
     * @param organizationSlug The slug of the organization the file belongs to. (required)
     * @param projectSlug The slug of the project to delete the DIF. (required)
     * @param id The ID of the DIF to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteASpecificProjectsDebugInformationFileWithHttpInfo(String organizationSlug, String projectSlug, String id) throws ApiException {
        okhttp3.Call localVarCall = deleteASpecificProjectsDebugInformationFileValidateBeforeCall(organizationSlug, projectSlug, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a debug information file for a given project.
     * @param organizationSlug The slug of the organization the file belongs to. (required)
     * @param projectSlug The slug of the project to delete the DIF. (required)
     * @param id The ID of the DIF to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteASpecificProjectsDebugInformationFileAsync(String organizationSlug, String projectSlug, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteASpecificProjectsDebugInformationFileValidateBeforeCall(organizationSlug, projectSlug, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAProjectsClientKeys
     * @param organizationSlug The slug of the organization the client keys belong to. (required)
     * @param projectSlug The slug of the project the client keys belong to. (required)
     * @param cursor A pointer to the last object fetched and its sort order; used to retrieve the next or previous results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAProjectsClientKeysCall(String organizationSlug, String projectSlug, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/projects/{organization_slug}/{project_slug}/keys/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAProjectsClientKeysValidateBeforeCall(String organizationSlug, String projectSlug, String cursor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling listAProjectsClientKeys(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling listAProjectsClientKeys(Async)");
        }

        return listAProjectsClientKeysCall(organizationSlug, projectSlug, cursor, _callback);

    }

    /**
     * 
     * Return a list of client keys bound to a project.
     * @param organizationSlug The slug of the organization the client keys belong to. (required)
     * @param projectSlug The slug of the project the client keys belong to. (required)
     * @param cursor A pointer to the last object fetched and its sort order; used to retrieve the next or previous results. (optional)
     * @return List&lt;ListAProjectSClientKeys200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public List<ListAProjectSClientKeys200ResponseInner> listAProjectsClientKeys(String organizationSlug, String projectSlug, String cursor) throws ApiException {
        ApiResponse<List<ListAProjectSClientKeys200ResponseInner>> localVarResp = listAProjectsClientKeysWithHttpInfo(organizationSlug, projectSlug, cursor);
        return localVarResp.getData();
    }

    /**
     * 
     * Return a list of client keys bound to a project.
     * @param organizationSlug The slug of the organization the client keys belong to. (required)
     * @param projectSlug The slug of the project the client keys belong to. (required)
     * @param cursor A pointer to the last object fetched and its sort order; used to retrieve the next or previous results. (optional)
     * @return ApiResponse&lt;List&lt;ListAProjectSClientKeys200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListAProjectSClientKeys200ResponseInner>> listAProjectsClientKeysWithHttpInfo(String organizationSlug, String projectSlug, String cursor) throws ApiException {
        okhttp3.Call localVarCall = listAProjectsClientKeysValidateBeforeCall(organizationSlug, projectSlug, cursor, null);
        Type localVarReturnType = new TypeToken<List<ListAProjectSClientKeys200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return a list of client keys bound to a project.
     * @param organizationSlug The slug of the organization the client keys belong to. (required)
     * @param projectSlug The slug of the project the client keys belong to. (required)
     * @param cursor A pointer to the last object fetched and its sort order; used to retrieve the next or previous results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAProjectsClientKeysAsync(String organizationSlug, String projectSlug, String cursor, final ApiCallback<List<ListAProjectSClientKeys200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAProjectsClientKeysValidateBeforeCall(organizationSlug, projectSlug, cursor, _callback);
        Type localVarReturnType = new TypeToken<List<ListAProjectSClientKeys200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAProjectsDebugInformationFiles
     * @param organizationSlug The slug of the organization the file belongs to. (required)
     * @param projectSlug The slug of the project to list the DIFs of. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAProjectsDebugInformationFilesCall(String organizationSlug, String projectSlug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/projects/{organization_slug}/{project_slug}/files/dsyms/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAProjectsDebugInformationFilesValidateBeforeCall(String organizationSlug, String projectSlug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling listAProjectsDebugInformationFiles(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling listAProjectsDebugInformationFiles(Async)");
        }

        return listAProjectsDebugInformationFilesCall(organizationSlug, projectSlug, _callback);

    }

    /**
     * 
     * Retrieve a list of debug information files for a given project.
     * @param organizationSlug The slug of the organization the file belongs to. (required)
     * @param projectSlug The slug of the project to list the DIFs of. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
     */
    public void listAProjectsDebugInformationFiles(String organizationSlug, String projectSlug) throws ApiException {
        listAProjectsDebugInformationFilesWithHttpInfo(organizationSlug, projectSlug);
    }

    /**
     * 
     * Retrieve a list of debug information files for a given project.
     * @param organizationSlug The slug of the organization the file belongs to. (required)
     * @param projectSlug The slug of the project to list the DIFs of. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> listAProjectsDebugInformationFilesWithHttpInfo(String organizationSlug, String projectSlug) throws ApiException {
        okhttp3.Call localVarCall = listAProjectsDebugInformationFilesValidateBeforeCall(organizationSlug, projectSlug, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of debug information files for a given project.
     * @param organizationSlug The slug of the organization the file belongs to. (required)
     * @param projectSlug The slug of the project to list the DIFs of. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAProjectsDebugInformationFilesAsync(String organizationSlug, String projectSlug, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAProjectsDebugInformationFilesValidateBeforeCall(organizationSlug, projectSlug, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAProjectsServiceHooks
     * @param organizationSlug The slug of the organization the client keys belong to. (required)
     * @param projectSlug The slug of the project the client keys belong to. (required)
     * @param cursor A pointer to the last object fetched and its sort order; used to retrieve the next or previous results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You do not have that feature enabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAProjectsServiceHooksCall(String organizationSlug, String projectSlug, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/projects/{organization_slug}/{project_slug}/hooks/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAProjectsServiceHooksValidateBeforeCall(String organizationSlug, String projectSlug, String cursor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling listAProjectsServiceHooks(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling listAProjectsServiceHooks(Async)");
        }

        return listAProjectsServiceHooksCall(organizationSlug, projectSlug, cursor, _callback);

    }

    /**
     * 
     * Return a list of service hooks bound to a project.
     * @param organizationSlug The slug of the organization the client keys belong to. (required)
     * @param projectSlug The slug of the project the client keys belong to. (required)
     * @param cursor A pointer to the last object fetched and its sort order; used to retrieve the next or previous results. (optional)
     * @return List&lt;ListAProjectSServiceHooks200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You do not have that feature enabled </td><td>  -  </td></tr>
     </table>
     */
    public List<ListAProjectSServiceHooks200ResponseInner> listAProjectsServiceHooks(String organizationSlug, String projectSlug, String cursor) throws ApiException {
        ApiResponse<List<ListAProjectSServiceHooks200ResponseInner>> localVarResp = listAProjectsServiceHooksWithHttpInfo(organizationSlug, projectSlug, cursor);
        return localVarResp.getData();
    }

    /**
     * 
     * Return a list of service hooks bound to a project.
     * @param organizationSlug The slug of the organization the client keys belong to. (required)
     * @param projectSlug The slug of the project the client keys belong to. (required)
     * @param cursor A pointer to the last object fetched and its sort order; used to retrieve the next or previous results. (optional)
     * @return ApiResponse&lt;List&lt;ListAProjectSServiceHooks200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You do not have that feature enabled </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListAProjectSServiceHooks200ResponseInner>> listAProjectsServiceHooksWithHttpInfo(String organizationSlug, String projectSlug, String cursor) throws ApiException {
        okhttp3.Call localVarCall = listAProjectsServiceHooksValidateBeforeCall(organizationSlug, projectSlug, cursor, null);
        Type localVarReturnType = new TypeToken<List<ListAProjectSServiceHooks200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return a list of service hooks bound to a project.
     * @param organizationSlug The slug of the organization the client keys belong to. (required)
     * @param projectSlug The slug of the project the client keys belong to. (required)
     * @param cursor A pointer to the last object fetched and its sort order; used to retrieve the next or previous results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You do not have that feature enabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAProjectsServiceHooksAsync(String organizationSlug, String projectSlug, String cursor, final ApiCallback<List<ListAProjectSServiceHooks200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAProjectsServiceHooksValidateBeforeCall(organizationSlug, projectSlug, cursor, _callback);
        Type localVarReturnType = new TypeToken<List<ListAProjectSServiceHooks200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAProjectsUserFeedback
     * @param organizationSlug The slug of the organization. (required)
     * @param projectSlug The slug of the project. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAProjectsUserFeedbackCall(String organizationSlug, String projectSlug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/projects/{organization_slug}/{project_slug}/user-feedback/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAProjectsUserFeedbackValidateBeforeCall(String organizationSlug, String projectSlug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling listAProjectsUserFeedback(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling listAProjectsUserFeedback(Async)");
        }

        return listAProjectsUserFeedbackCall(organizationSlug, projectSlug, _callback);

    }

    /**
     * 
     * Return a list of user feedback items within this project.
     * @param organizationSlug The slug of the organization. (required)
     * @param projectSlug The slug of the project. (required)
     * @return List&lt;ListAProjectSUserFeedback200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<ListAProjectSUserFeedback200ResponseInner> listAProjectsUserFeedback(String organizationSlug, String projectSlug) throws ApiException {
        ApiResponse<List<ListAProjectSUserFeedback200ResponseInner>> localVarResp = listAProjectsUserFeedbackWithHttpInfo(organizationSlug, projectSlug);
        return localVarResp.getData();
    }

    /**
     * 
     * Return a list of user feedback items within this project.
     * @param organizationSlug The slug of the organization. (required)
     * @param projectSlug The slug of the project. (required)
     * @return ApiResponse&lt;List&lt;ListAProjectSUserFeedback200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListAProjectSUserFeedback200ResponseInner>> listAProjectsUserFeedbackWithHttpInfo(String organizationSlug, String projectSlug) throws ApiException {
        okhttp3.Call localVarCall = listAProjectsUserFeedbackValidateBeforeCall(organizationSlug, projectSlug, null);
        Type localVarReturnType = new TypeToken<List<ListAProjectSUserFeedback200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return a list of user feedback items within this project.
     * @param organizationSlug The slug of the organization. (required)
     * @param projectSlug The slug of the project. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAProjectsUserFeedbackAsync(String organizationSlug, String projectSlug, final ApiCallback<List<ListAProjectSUserFeedback200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAProjectsUserFeedbackValidateBeforeCall(organizationSlug, projectSlug, _callback);
        Type localVarReturnType = new TypeToken<List<ListAProjectSUserFeedback200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAProjectsUsers
     * @param organizationSlug The slug of the organization. (required)
     * @param projectSlug The slug of the project. (required)
     * @param query Limit results to users matching the given query. Prefixes should be used to suggest the field to match on: &#x60;id&#x60;, &#x60;email&#x60;, &#x60;username&#x60;, &#x60;ip&#x60;. For example, &#x60;query&#x3D;email:foo@example.com&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAProjectsUsersCall(String organizationSlug, String projectSlug, String query, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/projects/{organization_slug}/{project_slug}/users/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAProjectsUsersValidateBeforeCall(String organizationSlug, String projectSlug, String query, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling listAProjectsUsers(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling listAProjectsUsers(Async)");
        }

        return listAProjectsUsersCall(organizationSlug, projectSlug, query, _callback);

    }

    /**
     * 
     * Return a list of users seen within this project.
     * @param organizationSlug The slug of the organization. (required)
     * @param projectSlug The slug of the project. (required)
     * @param query Limit results to users matching the given query. Prefixes should be used to suggest the field to match on: &#x60;id&#x60;, &#x60;email&#x60;, &#x60;username&#x60;, &#x60;ip&#x60;. For example, &#x60;query&#x3D;email:foo@example.com&#x60; (optional)
     * @return List&lt;ListAProjectSUsers200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public List<ListAProjectSUsers200ResponseInner> listAProjectsUsers(String organizationSlug, String projectSlug, String query) throws ApiException {
        ApiResponse<List<ListAProjectSUsers200ResponseInner>> localVarResp = listAProjectsUsersWithHttpInfo(organizationSlug, projectSlug, query);
        return localVarResp.getData();
    }

    /**
     * 
     * Return a list of users seen within this project.
     * @param organizationSlug The slug of the organization. (required)
     * @param projectSlug The slug of the project. (required)
     * @param query Limit results to users matching the given query. Prefixes should be used to suggest the field to match on: &#x60;id&#x60;, &#x60;email&#x60;, &#x60;username&#x60;, &#x60;ip&#x60;. For example, &#x60;query&#x3D;email:foo@example.com&#x60; (optional)
     * @return ApiResponse&lt;List&lt;ListAProjectSUsers200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListAProjectSUsers200ResponseInner>> listAProjectsUsersWithHttpInfo(String organizationSlug, String projectSlug, String query) throws ApiException {
        okhttp3.Call localVarCall = listAProjectsUsersValidateBeforeCall(organizationSlug, projectSlug, query, null);
        Type localVarReturnType = new TypeToken<List<ListAProjectSUsers200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return a list of users seen within this project.
     * @param organizationSlug The slug of the organization. (required)
     * @param projectSlug The slug of the project. (required)
     * @param query Limit results to users matching the given query. Prefixes should be used to suggest the field to match on: &#x60;id&#x60;, &#x60;email&#x60;, &#x60;username&#x60;, &#x60;ip&#x60;. For example, &#x60;query&#x3D;email:foo@example.com&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAProjectsUsersAsync(String organizationSlug, String projectSlug, String query, final ApiCallback<List<ListAProjectSUsers200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAProjectsUsersValidateBeforeCall(organizationSlug, projectSlug, query, _callback);
        Type localVarReturnType = new TypeToken<List<ListAProjectSUsers200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listATagsValues
     * @param organizationSlug The slug of the organization. (required)
     * @param projectSlug The slug of the project. (required)
     * @param key The tag key to look up. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listATagsValuesCall(String organizationSlug, String projectSlug, String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/projects/{organization_slug}/{project_slug}/tags/{key}/values/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()))
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listATagsValuesValidateBeforeCall(String organizationSlug, String projectSlug, String key, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling listATagsValues(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling listATagsValues(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling listATagsValues(Async)");
        }

        return listATagsValuesCall(organizationSlug, projectSlug, key, _callback);

    }

    /**
     * 
     * Return a list of values associated with this key.  The &#x60;query&#x60; parameter can be used to to perform a \&quot;contains\&quot; match on values.   When [paginated](/api/pagination) can return at most 1000 values.
     * @param organizationSlug The slug of the organization. (required)
     * @param projectSlug The slug of the project. (required)
     * @param key The tag key to look up. (required)
     * @return List&lt;ListATagSValues200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public List<ListATagSValues200ResponseInner> listATagsValues(String organizationSlug, String projectSlug, String key) throws ApiException {
        ApiResponse<List<ListATagSValues200ResponseInner>> localVarResp = listATagsValuesWithHttpInfo(organizationSlug, projectSlug, key);
        return localVarResp.getData();
    }

    /**
     * 
     * Return a list of values associated with this key.  The &#x60;query&#x60; parameter can be used to to perform a \&quot;contains\&quot; match on values.   When [paginated](/api/pagination) can return at most 1000 values.
     * @param organizationSlug The slug of the organization. (required)
     * @param projectSlug The slug of the project. (required)
     * @param key The tag key to look up. (required)
     * @return ApiResponse&lt;List&lt;ListATagSValues200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListATagSValues200ResponseInner>> listATagsValuesWithHttpInfo(String organizationSlug, String projectSlug, String key) throws ApiException {
        okhttp3.Call localVarCall = listATagsValuesValidateBeforeCall(organizationSlug, projectSlug, key, null);
        Type localVarReturnType = new TypeToken<List<ListATagSValues200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return a list of values associated with this key.  The &#x60;query&#x60; parameter can be used to to perform a \&quot;contains\&quot; match on values.   When [paginated](/api/pagination) can return at most 1000 values.
     * @param organizationSlug The slug of the organization. (required)
     * @param projectSlug The slug of the project. (required)
     * @param key The tag key to look up. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listATagsValuesAsync(String organizationSlug, String projectSlug, String key, final ApiCallback<List<ListATagSValues200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listATagsValuesValidateBeforeCall(organizationSlug, projectSlug, key, _callback);
        Type localVarReturnType = new TypeToken<List<ListATagSValues200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listYourProjects
     * @param cursor A pointer to the last object fetched and its sort order; used to retrieve the next or previous results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listYourProjectsCall(String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/projects/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listYourProjectsValidateBeforeCall(String cursor, final ApiCallback _callback) throws ApiException {
        return listYourProjectsCall(cursor, _callback);

    }

    /**
     * 
     * Return a list of projects available to the authenticated session.
     * @param cursor A pointer to the last object fetched and its sort order; used to retrieve the next or previous results. (optional)
     * @return List&lt;ListYourProjects200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public List<ListYourProjects200ResponseInner> listYourProjects(String cursor) throws ApiException {
        ApiResponse<List<ListYourProjects200ResponseInner>> localVarResp = listYourProjectsWithHttpInfo(cursor);
        return localVarResp.getData();
    }

    /**
     * 
     * Return a list of projects available to the authenticated session.
     * @param cursor A pointer to the last object fetched and its sort order; used to retrieve the next or previous results. (optional)
     * @return ApiResponse&lt;List&lt;ListYourProjects200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListYourProjects200ResponseInner>> listYourProjectsWithHttpInfo(String cursor) throws ApiException {
        okhttp3.Call localVarCall = listYourProjectsValidateBeforeCall(cursor, null);
        Type localVarReturnType = new TypeToken<List<ListYourProjects200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return a list of projects available to the authenticated session.
     * @param cursor A pointer to the last object fetched and its sort order; used to retrieve the next or previous results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listYourProjectsAsync(String cursor, final ApiCallback<List<ListYourProjects200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listYourProjectsValidateBeforeCall(cursor, _callback);
        Type localVarReturnType = new TypeToken<List<ListYourProjects200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registerANewServiceHook
     * @param organizationSlug The slug of the organization the client keys belong to. (required)
     * @param projectSlug The slug of the project the client keys belong to. (required)
     * @param registerANewServiceHookRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You do not have that feature enabled </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerANewServiceHookCall(String organizationSlug, String projectSlug, RegisterANewServiceHookRequest registerANewServiceHookRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = registerANewServiceHookRequest;

        // create path and map variables
        String localVarPath = "/api/0/projects/{organization_slug}/{project_slug}/hooks/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registerANewServiceHookValidateBeforeCall(String organizationSlug, String projectSlug, RegisterANewServiceHookRequest registerANewServiceHookRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling registerANewServiceHook(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling registerANewServiceHook(Async)");
        }

        // verify the required parameter 'registerANewServiceHookRequest' is set
        if (registerANewServiceHookRequest == null) {
            throw new ApiException("Missing the required parameter 'registerANewServiceHookRequest' when calling registerANewServiceHook(Async)");
        }

        return registerANewServiceHookCall(organizationSlug, projectSlug, registerANewServiceHookRequest, _callback);

    }

    /**
     * 
     * Register a new service hook on a project.  Events include:  - event.alert: An alert is generated for an event (via rules). - event.created: A new event has been processed.  This endpoint requires the &#39;servicehooks&#39; feature to be enabled for your project.
     * @param organizationSlug The slug of the organization the client keys belong to. (required)
     * @param projectSlug The slug of the project the client keys belong to. (required)
     * @param registerANewServiceHookRequest  (required)
     * @return ListAProjectSServiceHooks200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You do not have that feature enabled </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ListAProjectSServiceHooks200ResponseInner registerANewServiceHook(String organizationSlug, String projectSlug, RegisterANewServiceHookRequest registerANewServiceHookRequest) throws ApiException {
        ApiResponse<ListAProjectSServiceHooks200ResponseInner> localVarResp = registerANewServiceHookWithHttpInfo(organizationSlug, projectSlug, registerANewServiceHookRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Register a new service hook on a project.  Events include:  - event.alert: An alert is generated for an event (via rules). - event.created: A new event has been processed.  This endpoint requires the &#39;servicehooks&#39; feature to be enabled for your project.
     * @param organizationSlug The slug of the organization the client keys belong to. (required)
     * @param projectSlug The slug of the project the client keys belong to. (required)
     * @param registerANewServiceHookRequest  (required)
     * @return ApiResponse&lt;ListAProjectSServiceHooks200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You do not have that feature enabled </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAProjectSServiceHooks200ResponseInner> registerANewServiceHookWithHttpInfo(String organizationSlug, String projectSlug, RegisterANewServiceHookRequest registerANewServiceHookRequest) throws ApiException {
        okhttp3.Call localVarCall = registerANewServiceHookValidateBeforeCall(organizationSlug, projectSlug, registerANewServiceHookRequest, null);
        Type localVarReturnType = new TypeToken<ListAProjectSServiceHooks200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Register a new service hook on a project.  Events include:  - event.alert: An alert is generated for an event (via rules). - event.created: A new event has been processed.  This endpoint requires the &#39;servicehooks&#39; feature to be enabled for your project.
     * @param organizationSlug The slug of the organization the client keys belong to. (required)
     * @param projectSlug The slug of the project the client keys belong to. (required)
     * @param registerANewServiceHookRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You do not have that feature enabled </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerANewServiceHookAsync(String organizationSlug, String projectSlug, RegisterANewServiceHookRequest registerANewServiceHookRequest, final ApiCallback<ListAProjectSServiceHooks200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = registerANewServiceHookValidateBeforeCall(organizationSlug, projectSlug, registerANewServiceHookRequest, _callback);
        Type localVarReturnType = new TypeToken<ListAProjectSServiceHooks200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeAServiceHook
     * @param organizationSlug The slug of the organization the client keys belong to. (required)
     * @param projectSlug The slug of the project the client keys belong to. (required)
     * @param hookId The GUID of the service hook. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeAServiceHookCall(String organizationSlug, String projectSlug, String hookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/projects/{organization_slug}/{project_slug}/hooks/{hook_id}/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()))
            .replace("{" + "hook_id" + "}", localVarApiClient.escapeString(hookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeAServiceHookValidateBeforeCall(String organizationSlug, String projectSlug, String hookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling removeAServiceHook(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling removeAServiceHook(Async)");
        }

        // verify the required parameter 'hookId' is set
        if (hookId == null) {
            throw new ApiException("Missing the required parameter 'hookId' when calling removeAServiceHook(Async)");
        }

        return removeAServiceHookCall(organizationSlug, projectSlug, hookId, _callback);

    }

    /**
     * 
     * Remove a service hook.
     * @param organizationSlug The slug of the organization the client keys belong to. (required)
     * @param projectSlug The slug of the project the client keys belong to. (required)
     * @param hookId The GUID of the service hook. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
     */
    public void removeAServiceHook(String organizationSlug, String projectSlug, String hookId) throws ApiException {
        removeAServiceHookWithHttpInfo(organizationSlug, projectSlug, hookId);
    }

    /**
     * 
     * Remove a service hook.
     * @param organizationSlug The slug of the organization the client keys belong to. (required)
     * @param projectSlug The slug of the project the client keys belong to. (required)
     * @param hookId The GUID of the service hook. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeAServiceHookWithHttpInfo(String organizationSlug, String projectSlug, String hookId) throws ApiException {
        okhttp3.Call localVarCall = removeAServiceHookValidateBeforeCall(organizationSlug, projectSlug, hookId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Remove a service hook.
     * @param organizationSlug The slug of the organization the client keys belong to. (required)
     * @param projectSlug The slug of the project the client keys belong to. (required)
     * @param hookId The GUID of the service hook. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeAServiceHookAsync(String organizationSlug, String projectSlug, String hookId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeAServiceHookValidateBeforeCall(organizationSlug, projectSlug, hookId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveAProject
     * @param organizationSlug The slug of the organization the project belongs to. (required)
     * @param projectSlug The slug of the project to retrieve. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Project not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAProjectCall(String organizationSlug, String projectSlug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/projects/{organization_slug}/{project_slug}/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveAProjectValidateBeforeCall(String organizationSlug, String projectSlug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling retrieveAProject(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling retrieveAProject(Async)");
        }

        return retrieveAProjectCall(organizationSlug, projectSlug, _callback);

    }

    /**
     * 
     * Return details on an individual project.
     * @param organizationSlug The slug of the organization the project belongs to. (required)
     * @param projectSlug The slug of the project to retrieve. (required)
     * @return RetrieveAProject200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Project not found </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveAProject200Response retrieveAProject(String organizationSlug, String projectSlug) throws ApiException {
        ApiResponse<RetrieveAProject200Response> localVarResp = retrieveAProjectWithHttpInfo(organizationSlug, projectSlug);
        return localVarResp.getData();
    }

    /**
     * 
     * Return details on an individual project.
     * @param organizationSlug The slug of the organization the project belongs to. (required)
     * @param projectSlug The slug of the project to retrieve. (required)
     * @return ApiResponse&lt;RetrieveAProject200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Project not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveAProject200Response> retrieveAProjectWithHttpInfo(String organizationSlug, String projectSlug) throws ApiException {
        okhttp3.Call localVarCall = retrieveAProjectValidateBeforeCall(organizationSlug, projectSlug, null);
        Type localVarReturnType = new TypeToken<RetrieveAProject200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return details on an individual project.
     * @param organizationSlug The slug of the organization the project belongs to. (required)
     * @param projectSlug The slug of the project to retrieve. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Project not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAProjectAsync(String organizationSlug, String projectSlug, final ApiCallback<RetrieveAProject200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveAProjectValidateBeforeCall(organizationSlug, projectSlug, _callback);
        Type localVarReturnType = new TypeToken<RetrieveAProject200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveAServiceHook
     * @param organizationSlug The slug of the organization the client keys belong to. (required)
     * @param projectSlug The slug of the project the client keys belong to. (required)
     * @param hookId The GUID of the service hook. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAServiceHookCall(String organizationSlug, String projectSlug, String hookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/projects/{organization_slug}/{project_slug}/hooks/{hook_id}/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()))
            .replace("{" + "hook_id" + "}", localVarApiClient.escapeString(hookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveAServiceHookValidateBeforeCall(String organizationSlug, String projectSlug, String hookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling retrieveAServiceHook(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling retrieveAServiceHook(Async)");
        }

        // verify the required parameter 'hookId' is set
        if (hookId == null) {
            throw new ApiException("Missing the required parameter 'hookId' when calling retrieveAServiceHook(Async)");
        }

        return retrieveAServiceHookCall(organizationSlug, projectSlug, hookId, _callback);

    }

    /**
     * 
     * Return a service hook bound to a project.
     * @param organizationSlug The slug of the organization the client keys belong to. (required)
     * @param projectSlug The slug of the project the client keys belong to. (required)
     * @param hookId The GUID of the service hook. (required)
     * @return ListAProjectSServiceHooks200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ListAProjectSServiceHooks200ResponseInner retrieveAServiceHook(String organizationSlug, String projectSlug, String hookId) throws ApiException {
        ApiResponse<ListAProjectSServiceHooks200ResponseInner> localVarResp = retrieveAServiceHookWithHttpInfo(organizationSlug, projectSlug, hookId);
        return localVarResp.getData();
    }

    /**
     * 
     * Return a service hook bound to a project.
     * @param organizationSlug The slug of the organization the client keys belong to. (required)
     * @param projectSlug The slug of the project the client keys belong to. (required)
     * @param hookId The GUID of the service hook. (required)
     * @return ApiResponse&lt;ListAProjectSServiceHooks200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAProjectSServiceHooks200ResponseInner> retrieveAServiceHookWithHttpInfo(String organizationSlug, String projectSlug, String hookId) throws ApiException {
        okhttp3.Call localVarCall = retrieveAServiceHookValidateBeforeCall(organizationSlug, projectSlug, hookId, null);
        Type localVarReturnType = new TypeToken<ListAProjectSServiceHooks200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return a service hook bound to a project.
     * @param organizationSlug The slug of the organization the client keys belong to. (required)
     * @param projectSlug The slug of the project the client keys belong to. (required)
     * @param hookId The GUID of the service hook. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAServiceHookAsync(String organizationSlug, String projectSlug, String hookId, final ApiCallback<ListAProjectSServiceHooks200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveAServiceHookValidateBeforeCall(organizationSlug, projectSlug, hookId, _callback);
        Type localVarReturnType = new TypeToken<ListAProjectSServiceHooks200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveEventCountsForAProject
     * @param organizationSlug The slug of the organization. (required)
     * @param projectSlug The slug of the project. (required)
     * @param stat The name of the stat to query &#x60;(\&quot;received\&quot;, \&quot;rejected\&quot;, \&quot;blacklisted\&quot;, \&quot;generated\&quot;)&#x60;. (optional)
     * @param since A timestamp to set the start of the query in seconds since UNIX epoch. (optional)
     * @param until A timestamp to set the end of the query in seconds since UNIX epoch. (optional)
     * @param resolution An explicit resolution to search for (one of &#x60;10s&#x60;, &#x60;1h&#x60;, and &#x60;1d&#x60;). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveEventCountsForAProjectCall(String organizationSlug, String projectSlug, String stat, OffsetDateTime since, OffsetDateTime until, String resolution, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/projects/{organization_slug}/{project_slug}/stats/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stat", stat));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (until != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("until", until));
        }

        if (resolution != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resolution", resolution));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveEventCountsForAProjectValidateBeforeCall(String organizationSlug, String projectSlug, String stat, OffsetDateTime since, OffsetDateTime until, String resolution, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling retrieveEventCountsForAProject(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling retrieveEventCountsForAProject(Async)");
        }

        return retrieveEventCountsForAProjectCall(organizationSlug, projectSlug, stat, since, until, resolution, _callback);

    }

    /**
     * Caution This endpoint may change in the future without  notice.
     * Return a set of points representing a normalized timestamp and the number of events seen in the period.  Query ranges are limited to Sentry&#39;s configured time-series resolutions.
     * @param organizationSlug The slug of the organization. (required)
     * @param projectSlug The slug of the project. (required)
     * @param stat The name of the stat to query &#x60;(\&quot;received\&quot;, \&quot;rejected\&quot;, \&quot;blacklisted\&quot;, \&quot;generated\&quot;)&#x60;. (optional)
     * @param since A timestamp to set the start of the query in seconds since UNIX epoch. (optional)
     * @param until A timestamp to set the end of the query in seconds since UNIX epoch. (optional)
     * @param resolution An explicit resolution to search for (one of &#x60;10s&#x60;, &#x60;1h&#x60;, and &#x60;1d&#x60;). (optional)
     * @return List&lt;List&lt;Integer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public List<List<Integer>> retrieveEventCountsForAProject(String organizationSlug, String projectSlug, String stat, OffsetDateTime since, OffsetDateTime until, String resolution) throws ApiException {
        ApiResponse<List<List<Integer>>> localVarResp = retrieveEventCountsForAProjectWithHttpInfo(organizationSlug, projectSlug, stat, since, until, resolution);
        return localVarResp.getData();
    }

    /**
     * Caution This endpoint may change in the future without  notice.
     * Return a set of points representing a normalized timestamp and the number of events seen in the period.  Query ranges are limited to Sentry&#39;s configured time-series resolutions.
     * @param organizationSlug The slug of the organization. (required)
     * @param projectSlug The slug of the project. (required)
     * @param stat The name of the stat to query &#x60;(\&quot;received\&quot;, \&quot;rejected\&quot;, \&quot;blacklisted\&quot;, \&quot;generated\&quot;)&#x60;. (optional)
     * @param since A timestamp to set the start of the query in seconds since UNIX epoch. (optional)
     * @param until A timestamp to set the end of the query in seconds since UNIX epoch. (optional)
     * @param resolution An explicit resolution to search for (one of &#x60;10s&#x60;, &#x60;1h&#x60;, and &#x60;1d&#x60;). (optional)
     * @return ApiResponse&lt;List&lt;List&lt;Integer&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<List<Integer>>> retrieveEventCountsForAProjectWithHttpInfo(String organizationSlug, String projectSlug, String stat, OffsetDateTime since, OffsetDateTime until, String resolution) throws ApiException {
        okhttp3.Call localVarCall = retrieveEventCountsForAProjectValidateBeforeCall(organizationSlug, projectSlug, stat, since, until, resolution, null);
        Type localVarReturnType = new TypeToken<List<List<Integer>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Caution This endpoint may change in the future without  notice. (asynchronously)
     * Return a set of points representing a normalized timestamp and the number of events seen in the period.  Query ranges are limited to Sentry&#39;s configured time-series resolutions.
     * @param organizationSlug The slug of the organization. (required)
     * @param projectSlug The slug of the project. (required)
     * @param stat The name of the stat to query &#x60;(\&quot;received\&quot;, \&quot;rejected\&quot;, \&quot;blacklisted\&quot;, \&quot;generated\&quot;)&#x60;. (optional)
     * @param since A timestamp to set the start of the query in seconds since UNIX epoch. (optional)
     * @param until A timestamp to set the end of the query in seconds since UNIX epoch. (optional)
     * @param resolution An explicit resolution to search for (one of &#x60;10s&#x60;, &#x60;1h&#x60;, and &#x60;1d&#x60;). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveEventCountsForAProjectAsync(String organizationSlug, String projectSlug, String stat, OffsetDateTime since, OffsetDateTime until, String resolution, final ApiCallback<List<List<Integer>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveEventCountsForAProjectValidateBeforeCall(organizationSlug, projectSlug, stat, since, until, resolution, _callback);
        Type localVarReturnType = new TypeToken<List<List<Integer>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for submitUserFeedback
     * @param organizationSlug The slug of the organization. (required)
     * @param projectSlug The slug of the project. (required)
     * @param submitUserFeedbackRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Input </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitUserFeedbackCall(String organizationSlug, String projectSlug, SubmitUserFeedbackRequest submitUserFeedbackRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = submitUserFeedbackRequest;

        // create path and map variables
        String localVarPath = "/api/0/projects/{organization_slug}/{project_slug}/user-feedback/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token", "dsn" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitUserFeedbackValidateBeforeCall(String organizationSlug, String projectSlug, SubmitUserFeedbackRequest submitUserFeedbackRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling submitUserFeedback(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling submitUserFeedback(Async)");
        }

        return submitUserFeedbackCall(organizationSlug, projectSlug, submitUserFeedbackRequest, _callback);

    }

    /**
     * 
     * Submit and associate user feedback with an issue.  Feedback must be received by the server no more than 30 minutes after the event was saved.  Additionally, within 5 minutes of submitting feedback it may also be overwritten. This is useful in situations where you may need to retry sending a request due to network failures.  If feedback is rejected due to a mutability threshold, a 409 status code will be returned.  Note: Feedback may be submitted with DSN authentication (see auth documentation).
     * @param organizationSlug The slug of the organization. (required)
     * @param projectSlug The slug of the project. (required)
     * @param submitUserFeedbackRequest  (optional)
     * @return ListAProjectSUserFeedback200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Input </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ListAProjectSUserFeedback200ResponseInner submitUserFeedback(String organizationSlug, String projectSlug, SubmitUserFeedbackRequest submitUserFeedbackRequest) throws ApiException {
        ApiResponse<ListAProjectSUserFeedback200ResponseInner> localVarResp = submitUserFeedbackWithHttpInfo(organizationSlug, projectSlug, submitUserFeedbackRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Submit and associate user feedback with an issue.  Feedback must be received by the server no more than 30 minutes after the event was saved.  Additionally, within 5 minutes of submitting feedback it may also be overwritten. This is useful in situations where you may need to retry sending a request due to network failures.  If feedback is rejected due to a mutability threshold, a 409 status code will be returned.  Note: Feedback may be submitted with DSN authentication (see auth documentation).
     * @param organizationSlug The slug of the organization. (required)
     * @param projectSlug The slug of the project. (required)
     * @param submitUserFeedbackRequest  (optional)
     * @return ApiResponse&lt;ListAProjectSUserFeedback200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Input </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAProjectSUserFeedback200ResponseInner> submitUserFeedbackWithHttpInfo(String organizationSlug, String projectSlug, SubmitUserFeedbackRequest submitUserFeedbackRequest) throws ApiException {
        okhttp3.Call localVarCall = submitUserFeedbackValidateBeforeCall(organizationSlug, projectSlug, submitUserFeedbackRequest, null);
        Type localVarReturnType = new TypeToken<ListAProjectSUserFeedback200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Submit and associate user feedback with an issue.  Feedback must be received by the server no more than 30 minutes after the event was saved.  Additionally, within 5 minutes of submitting feedback it may also be overwritten. This is useful in situations where you may need to retry sending a request due to network failures.  If feedback is rejected due to a mutability threshold, a 409 status code will be returned.  Note: Feedback may be submitted with DSN authentication (see auth documentation).
     * @param organizationSlug The slug of the organization. (required)
     * @param projectSlug The slug of the project. (required)
     * @param submitUserFeedbackRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Input </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitUserFeedbackAsync(String organizationSlug, String projectSlug, SubmitUserFeedbackRequest submitUserFeedbackRequest, final ApiCallback<ListAProjectSUserFeedback200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitUserFeedbackValidateBeforeCall(organizationSlug, projectSlug, submitUserFeedbackRequest, _callback);
        Type localVarReturnType = new TypeToken<ListAProjectSUserFeedback200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAClientKey
     * @param organizationSlug The slug of the organization the client keys belong to. (required)
     * @param projectSlug The slug of the project the client keys belong to. (required)
     * @param keyId The ID of the key to update. (required)
     * @param updateAClientKeyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Input </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Project not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAClientKeyCall(String organizationSlug, String projectSlug, String keyId, UpdateAClientKeyRequest updateAClientKeyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAClientKeyRequest;

        // create path and map variables
        String localVarPath = "/api/0/projects/{organization_slug}/{project_slug}/keys/{key_id}/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()))
            .replace("{" + "key_id" + "}", localVarApiClient.escapeString(keyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAClientKeyValidateBeforeCall(String organizationSlug, String projectSlug, String keyId, UpdateAClientKeyRequest updateAClientKeyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling updateAClientKey(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling updateAClientKey(Async)");
        }

        // verify the required parameter 'keyId' is set
        if (keyId == null) {
            throw new ApiException("Missing the required parameter 'keyId' when calling updateAClientKey(Async)");
        }

        // verify the required parameter 'updateAClientKeyRequest' is set
        if (updateAClientKeyRequest == null) {
            throw new ApiException("Missing the required parameter 'updateAClientKeyRequest' when calling updateAClientKey(Async)");
        }

        return updateAClientKeyCall(organizationSlug, projectSlug, keyId, updateAClientKeyRequest, _callback);

    }

    /**
     * 
     * Update a client key.  This can be used to rename a key.
     * @param organizationSlug The slug of the organization the client keys belong to. (required)
     * @param projectSlug The slug of the project the client keys belong to. (required)
     * @param keyId The ID of the key to update. (required)
     * @param updateAClientKeyRequest  (required)
     * @return ListAProjectSClientKeys200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Input </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Project not found </td><td>  -  </td></tr>
     </table>
     */
    public ListAProjectSClientKeys200ResponseInner updateAClientKey(String organizationSlug, String projectSlug, String keyId, UpdateAClientKeyRequest updateAClientKeyRequest) throws ApiException {
        ApiResponse<ListAProjectSClientKeys200ResponseInner> localVarResp = updateAClientKeyWithHttpInfo(organizationSlug, projectSlug, keyId, updateAClientKeyRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a client key.  This can be used to rename a key.
     * @param organizationSlug The slug of the organization the client keys belong to. (required)
     * @param projectSlug The slug of the project the client keys belong to. (required)
     * @param keyId The ID of the key to update. (required)
     * @param updateAClientKeyRequest  (required)
     * @return ApiResponse&lt;ListAProjectSClientKeys200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Input </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Project not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAProjectSClientKeys200ResponseInner> updateAClientKeyWithHttpInfo(String organizationSlug, String projectSlug, String keyId, UpdateAClientKeyRequest updateAClientKeyRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAClientKeyValidateBeforeCall(organizationSlug, projectSlug, keyId, updateAClientKeyRequest, null);
        Type localVarReturnType = new TypeToken<ListAProjectSClientKeys200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a client key.  This can be used to rename a key.
     * @param organizationSlug The slug of the organization the client keys belong to. (required)
     * @param projectSlug The slug of the project the client keys belong to. (required)
     * @param keyId The ID of the key to update. (required)
     * @param updateAClientKeyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Input </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Project not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAClientKeyAsync(String organizationSlug, String projectSlug, String keyId, UpdateAClientKeyRequest updateAClientKeyRequest, final ApiCallback<ListAProjectSClientKeys200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAClientKeyValidateBeforeCall(organizationSlug, projectSlug, keyId, updateAClientKeyRequest, _callback);
        Type localVarReturnType = new TypeToken<ListAProjectSClientKeys200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAProject
     * @param organizationSlug The slug of the organization the project belongs to. (required)
     * @param projectSlug The slug of the project to update. (required)
     * @param updateAProjectRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Input </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Project not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAProjectCall(String organizationSlug, String projectSlug, UpdateAProjectRequest updateAProjectRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAProjectRequest;

        // create path and map variables
        String localVarPath = "/api/0/projects/{organization_slug}/{project_slug}/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAProjectValidateBeforeCall(String organizationSlug, String projectSlug, UpdateAProjectRequest updateAProjectRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling updateAProject(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling updateAProject(Async)");
        }

        return updateAProjectCall(organizationSlug, projectSlug, updateAProjectRequest, _callback);

    }

    /**
     * 
     * Update various attributes and configurable settings for the given project.  Only supplied values are updated.
     * @param organizationSlug The slug of the organization the project belongs to. (required)
     * @param projectSlug The slug of the project to update. (required)
     * @param updateAProjectRequest  (optional)
     * @return RetrieveAProject200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Input </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Project not found </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveAProject200Response updateAProject(String organizationSlug, String projectSlug, UpdateAProjectRequest updateAProjectRequest) throws ApiException {
        ApiResponse<RetrieveAProject200Response> localVarResp = updateAProjectWithHttpInfo(organizationSlug, projectSlug, updateAProjectRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Update various attributes and configurable settings for the given project.  Only supplied values are updated.
     * @param organizationSlug The slug of the organization the project belongs to. (required)
     * @param projectSlug The slug of the project to update. (required)
     * @param updateAProjectRequest  (optional)
     * @return ApiResponse&lt;RetrieveAProject200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Input </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Project not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveAProject200Response> updateAProjectWithHttpInfo(String organizationSlug, String projectSlug, UpdateAProjectRequest updateAProjectRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAProjectValidateBeforeCall(organizationSlug, projectSlug, updateAProjectRequest, null);
        Type localVarReturnType = new TypeToken<RetrieveAProject200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update various attributes and configurable settings for the given project.  Only supplied values are updated.
     * @param organizationSlug The slug of the organization the project belongs to. (required)
     * @param projectSlug The slug of the project to update. (required)
     * @param updateAProjectRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Input </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Project not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAProjectAsync(String organizationSlug, String projectSlug, UpdateAProjectRequest updateAProjectRequest, final ApiCallback<RetrieveAProject200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAProjectValidateBeforeCall(organizationSlug, projectSlug, updateAProjectRequest, _callback);
        Type localVarReturnType = new TypeToken<RetrieveAProject200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAServiceHook
     * @param organizationSlug The slug of the organization the client keys belong to. (required)
     * @param projectSlug The slug of the project the client keys belong to. (required)
     * @param hookId The GUID of the service hook. (required)
     * @param registerANewServiceHookRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Input </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAServiceHookCall(String organizationSlug, String projectSlug, String hookId, RegisterANewServiceHookRequest registerANewServiceHookRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = registerANewServiceHookRequest;

        // create path and map variables
        String localVarPath = "/api/0/projects/{organization_slug}/{project_slug}/hooks/{hook_id}/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()))
            .replace("{" + "hook_id" + "}", localVarApiClient.escapeString(hookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAServiceHookValidateBeforeCall(String organizationSlug, String projectSlug, String hookId, RegisterANewServiceHookRequest registerANewServiceHookRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling updateAServiceHook(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling updateAServiceHook(Async)");
        }

        // verify the required parameter 'hookId' is set
        if (hookId == null) {
            throw new ApiException("Missing the required parameter 'hookId' when calling updateAServiceHook(Async)");
        }

        return updateAServiceHookCall(organizationSlug, projectSlug, hookId, registerANewServiceHookRequest, _callback);

    }

    /**
     * 
     * Update a service hook.
     * @param organizationSlug The slug of the organization the client keys belong to. (required)
     * @param projectSlug The slug of the project the client keys belong to. (required)
     * @param hookId The GUID of the service hook. (required)
     * @param registerANewServiceHookRequest  (optional)
     * @return ListAProjectSServiceHooks200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Input </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ListAProjectSServiceHooks200ResponseInner updateAServiceHook(String organizationSlug, String projectSlug, String hookId, RegisterANewServiceHookRequest registerANewServiceHookRequest) throws ApiException {
        ApiResponse<ListAProjectSServiceHooks200ResponseInner> localVarResp = updateAServiceHookWithHttpInfo(organizationSlug, projectSlug, hookId, registerANewServiceHookRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a service hook.
     * @param organizationSlug The slug of the organization the client keys belong to. (required)
     * @param projectSlug The slug of the project the client keys belong to. (required)
     * @param hookId The GUID of the service hook. (required)
     * @param registerANewServiceHookRequest  (optional)
     * @return ApiResponse&lt;ListAProjectSServiceHooks200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Input </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAProjectSServiceHooks200ResponseInner> updateAServiceHookWithHttpInfo(String organizationSlug, String projectSlug, String hookId, RegisterANewServiceHookRequest registerANewServiceHookRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAServiceHookValidateBeforeCall(organizationSlug, projectSlug, hookId, registerANewServiceHookRequest, null);
        Type localVarReturnType = new TypeToken<ListAProjectSServiceHooks200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a service hook.
     * @param organizationSlug The slug of the organization the client keys belong to. (required)
     * @param projectSlug The slug of the project the client keys belong to. (required)
     * @param hookId The GUID of the service hook. (required)
     * @param registerANewServiceHookRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Input </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAServiceHookAsync(String organizationSlug, String projectSlug, String hookId, RegisterANewServiceHookRequest registerANewServiceHookRequest, final ApiCallback<ListAProjectSServiceHooks200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAServiceHookValidateBeforeCall(organizationSlug, projectSlug, hookId, registerANewServiceHookRequest, _callback);
        Type localVarReturnType = new TypeToken<ListAProjectSServiceHooks200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadANewFile
     * @param organizationSlug The slug of the organization the project belongs to. (required)
     * @param projectSlug The slug of the project to upload a file to. (required)
     * @param _file The multipart encoded file. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Input </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadANewFileCall(String organizationSlug, String projectSlug, File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/projects/{organization_slug}/{project_slug}/files/dsyms/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadANewFileValidateBeforeCall(String organizationSlug, String projectSlug, File _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling uploadANewFile(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling uploadANewFile(Async)");
        }

        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling uploadANewFile(Async)");
        }

        return uploadANewFileCall(organizationSlug, projectSlug, _file, _callback);

    }

    /**
     * 
     * Upload a new debug information file for the given release.  Unlike other API requests, files must be uploaded using the traditional multipart/form-data content-type.  The file uploaded is a zip archive of an Apple .dSYM folder which contains the individual debug images.  Uploading through this endpoint will create different files for the contained images.
     * @param organizationSlug The slug of the organization the project belongs to. (required)
     * @param projectSlug The slug of the project to upload a file to. (required)
     * @param _file The multipart encoded file. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Input </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
     */
    public void uploadANewFile(String organizationSlug, String projectSlug, File _file) throws ApiException {
        uploadANewFileWithHttpInfo(organizationSlug, projectSlug, _file);
    }

    /**
     * 
     * Upload a new debug information file for the given release.  Unlike other API requests, files must be uploaded using the traditional multipart/form-data content-type.  The file uploaded is a zip archive of an Apple .dSYM folder which contains the individual debug images.  Uploading through this endpoint will create different files for the contained images.
     * @param organizationSlug The slug of the organization the project belongs to. (required)
     * @param projectSlug The slug of the project to upload a file to. (required)
     * @param _file The multipart encoded file. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Input </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> uploadANewFileWithHttpInfo(String organizationSlug, String projectSlug, File _file) throws ApiException {
        okhttp3.Call localVarCall = uploadANewFileValidateBeforeCall(organizationSlug, projectSlug, _file, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Upload a new debug information file for the given release.  Unlike other API requests, files must be uploaded using the traditional multipart/form-data content-type.  The file uploaded is a zip archive of an Apple .dSYM folder which contains the individual debug images.  Uploading through this endpoint will create different files for the contained images.
     * @param organizationSlug The slug of the organization the project belongs to. (required)
     * @param projectSlug The slug of the project to upload a file to. (required)
     * @param _file The multipart encoded file. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Input </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadANewFileAsync(String organizationSlug, String projectSlug, File _file, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadANewFileValidateBeforeCall(organizationSlug, projectSlug, _file, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
