package com.sentry.api.client.api;

import com.sentry.api.client.ApiException;
import com.sentry.api.client.ApiClient;
import com.sentry.api.client.ApiResponse;
import com.sentry.api.client.Configuration;
import com.sentry.api.client.Pair;

import jakarta.ws.rs.core.GenericType;

import com.sentry.api.client.model.CreateANewClientKeyRequest;
import com.sentry.api.client.model.CreateANewProjectRequest;
import java.io.File;
import com.sentry.api.client.model.ListAProjectSClientKeys200ResponseInner;
import com.sentry.api.client.model.ListAProjectSServiceHooks200ResponseInner;
import com.sentry.api.client.model.ListAProjectSUserFeedback200ResponseInner;
import com.sentry.api.client.model.ListAProjectSUsers200ResponseInner;
import com.sentry.api.client.model.ListATagSValues200ResponseInner;
import com.sentry.api.client.model.ListYourProjects200ResponseInner;
import java.time.OffsetDateTime;
import com.sentry.api.client.model.RegisterANewServiceHookRequest;
import com.sentry.api.client.model.RetrieveAProject200Response;
import com.sentry.api.client.model.RetrieveMonitorsForAnOrganization200ResponseInnerProject;
import com.sentry.api.client.model.SubmitUserFeedbackRequest;
import com.sentry.api.client.model.UpdateAClientKeyRequest;
import com.sentry.api.client.model.UpdateAProjectRequest;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-16T14:23:11.909078Z[Etc/UTC]")
public class ProjectsApi {
  private ApiClient apiClient;

  public ProjectsApi() {
    this(Configuration.getDefaultApiClient());
  }

  public ProjectsApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Get the API client
   *
   * @return API client
   */
  public ApiClient getApiClient() {
    return apiClient;
  }

  /**
   * Set the API client
   *
   * @param apiClient an instance of API client
   */
  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * 
   * Create a new client key bound to a project.  The key&#39;s secret and public key are generated by the server.
   * @param organizationSlug The slug of the organization the client keys belong to. (required)
   * @param projectSlug The slug of the project the client keys belong to. (required)
   * @param createANewClientKeyRequest  (required)
   * @return ListAProjectSClientKeys200ResponseInner
   * @throws ApiException if fails to make API call
   * @http.response.details
     <table summary="Response Details" border="1">
       <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
       <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
       <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
       <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
   */
  public ListAProjectSClientKeys200ResponseInner createANewClientKey(String organizationSlug, String projectSlug, CreateANewClientKeyRequest createANewClientKeyRequest) throws ApiException {
    return createANewClientKeyWithHttpInfo(organizationSlug, projectSlug, createANewClientKeyRequest).getData();
  }

  /**
   * 
   * Create a new client key bound to a project.  The key&#39;s secret and public key are generated by the server.
   * @param organizationSlug The slug of the organization the client keys belong to. (required)
   * @param projectSlug The slug of the project the client keys belong to. (required)
   * @param createANewClientKeyRequest  (required)
   * @return ApiResponse&lt;ListAProjectSClientKeys200ResponseInner&gt;
   * @throws ApiException if fails to make API call
   * @http.response.details
     <table summary="Response Details" border="1">
       <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
       <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
       <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
       <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
   */
  public ApiResponse<ListAProjectSClientKeys200ResponseInner> createANewClientKeyWithHttpInfo(String organizationSlug, String projectSlug, CreateANewClientKeyRequest createANewClientKeyRequest) throws ApiException {
    // Check required parameters
    if (organizationSlug == null) {
      throw new ApiException(400, "Missing the required parameter 'organizationSlug' when calling createANewClientKey");
    }
    if (projectSlug == null) {
      throw new ApiException(400, "Missing the required parameter 'projectSlug' when calling createANewClientKey");
    }
    if (createANewClientKeyRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createANewClientKeyRequest' when calling createANewClientKey");
    }

    // Path parameters
    String localVarPath = "/api/0/projects/{organization_slug}/{project_slug}/keys/"
            .replaceAll("\\{organization_slug}", apiClient.escapeString(organizationSlug))
            .replaceAll("\\{project_slug}", apiClient.escapeString(projectSlug));

    String localVarAccept = apiClient.selectHeaderAccept("application/json");
    String localVarContentType = apiClient.selectHeaderContentType("application/json");
    String[] localVarAuthNames = new String[] {"auth_token"};
    GenericType<ListAProjectSClientKeys200ResponseInner> localVarReturnType = new GenericType<ListAProjectSClientKeys200ResponseInner>() {};
    return apiClient.invokeAPI("ProjectsApi.createANewClientKey", localVarPath, "POST", new ArrayList<>(), createANewClientKeyRequest,
                               new LinkedHashMap<>(), new LinkedHashMap<>(), new LinkedHashMap<>(), localVarAccept, localVarContentType,
                               localVarAuthNames, localVarReturnType, false);
  }
  /**
   * 
   * Create a new project bound to a team.
   * @param organizationSlug The slug of the organization the resource belongs to. (required)
   * @param teamSlug The slug of the team the resource belongs to. (required)
   * @param name The name of the project. (required)
   * @param createANewProjectRequest  (required)
   * @param slug Optional slug for the project. If not provided a slug is generated from the name. (optional)
   * @param platform The platform for the project. (optional)
   * @param defaultRules Defaults to true where the behavior is to alert the user on every new issue. Setting this to false will turn this off and the user must create their own alerts to be notified of new issues. (optional)
   * @return RetrieveMonitorsForAnOrganization200ResponseInnerProject
   * @throws ApiException if fails to make API call
   * @http.response.details
     <table summary="Response Details" border="1">
       <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
       <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
       <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
       <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
       <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
       <tr><td> 409 </td><td> A project with this slug already exists. </td><td>  -  </td></tr>
     </table>
   */
  public RetrieveMonitorsForAnOrganization200ResponseInnerProject createANewProject(String organizationSlug, String teamSlug, String name, CreateANewProjectRequest createANewProjectRequest, String slug, String platform, Boolean defaultRules) throws ApiException {
    return createANewProjectWithHttpInfo(organizationSlug, teamSlug, name, createANewProjectRequest, slug, platform, defaultRules).getData();
  }

  /**
   * 
   * Create a new project bound to a team.
   * @param organizationSlug The slug of the organization the resource belongs to. (required)
   * @param teamSlug The slug of the team the resource belongs to. (required)
   * @param name The name of the project. (required)
   * @param createANewProjectRequest  (required)
   * @param slug Optional slug for the project. If not provided a slug is generated from the name. (optional)
   * @param platform The platform for the project. (optional)
   * @param defaultRules Defaults to true where the behavior is to alert the user on every new issue. Setting this to false will turn this off and the user must create their own alerts to be notified of new issues. (optional)
   * @return ApiResponse&lt;RetrieveMonitorsForAnOrganization200ResponseInnerProject&gt;
   * @throws ApiException if fails to make API call
   * @http.response.details
     <table summary="Response Details" border="1">
       <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
       <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
       <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
       <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
       <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
       <tr><td> 409 </td><td> A project with this slug already exists. </td><td>  -  </td></tr>
     </table>
   */
  public ApiResponse<RetrieveMonitorsForAnOrganization200ResponseInnerProject> createANewProjectWithHttpInfo(String organizationSlug, String teamSlug, String name, CreateANewProjectRequest createANewProjectRequest, String slug, String platform, Boolean defaultRules) throws ApiException {
    // Check required parameters
    if (organizationSlug == null) {
      throw new ApiException(400, "Missing the required parameter 'organizationSlug' when calling createANewProject");
    }
    if (teamSlug == null) {
      throw new ApiException(400, "Missing the required parameter 'teamSlug' when calling createANewProject");
    }
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling createANewProject");
    }
    if (createANewProjectRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createANewProjectRequest' when calling createANewProject");
    }

    // Path parameters
    String localVarPath = "/api/0/teams/{organization_slug}/{team_slug}/projects/"
            .replaceAll("\\{organization_slug}", apiClient.escapeString(organizationSlug))
            .replaceAll("\\{team_slug}", apiClient.escapeString(teamSlug));

    // Query parameters
    List<Pair> localVarQueryParams = new ArrayList<>(
            apiClient.parameterToPairs("", "name", name)
    );
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "slug", slug));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "platform", platform));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "default_rules", defaultRules));

    String localVarAccept = apiClient.selectHeaderAccept("application/json");
    String localVarContentType = apiClient.selectHeaderContentType("application/json");
    String[] localVarAuthNames = new String[] {"auth_token"};
    GenericType<RetrieveMonitorsForAnOrganization200ResponseInnerProject> localVarReturnType = new GenericType<RetrieveMonitorsForAnOrganization200ResponseInnerProject>() {};
    return apiClient.invokeAPI("ProjectsApi.createANewProject", localVarPath, "POST", localVarQueryParams, createANewProjectRequest,
                               new LinkedHashMap<>(), new LinkedHashMap<>(), new LinkedHashMap<>(), localVarAccept, localVarContentType,
                               localVarAuthNames, localVarReturnType, false);
  }
  /**
   * 
   * Delete a client key.
   * @param organizationSlug The slug of the organization the client keys belong to. (required)
   * @param projectSlug The slug of the project the client keys belong to. (required)
   * @param keyId The ID of the key to delete. (required)
   * @throws ApiException if fails to make API call
   * @http.response.details
     <table summary="Response Details" border="1">
       <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
       <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
       <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
       <tr><td> 404 </td><td> Project not found </td><td>  -  </td></tr>
     </table>
   */
  public void deleteAClientKey(String organizationSlug, String projectSlug, String keyId) throws ApiException {
    deleteAClientKeyWithHttpInfo(organizationSlug, projectSlug, keyId);
  }

  /**
   * 
   * Delete a client key.
   * @param organizationSlug The slug of the organization the client keys belong to. (required)
   * @param projectSlug The slug of the project the client keys belong to. (required)
   * @param keyId The ID of the key to delete. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   * @http.response.details
     <table summary="Response Details" border="1">
       <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
       <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
       <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
       <tr><td> 404 </td><td> Project not found </td><td>  -  </td></tr>
     </table>
   */
  public ApiResponse<Void> deleteAClientKeyWithHttpInfo(String organizationSlug, String projectSlug, String keyId) throws ApiException {
    // Check required parameters
    if (organizationSlug == null) {
      throw new ApiException(400, "Missing the required parameter 'organizationSlug' when calling deleteAClientKey");
    }
    if (projectSlug == null) {
      throw new ApiException(400, "Missing the required parameter 'projectSlug' when calling deleteAClientKey");
    }
    if (keyId == null) {
      throw new ApiException(400, "Missing the required parameter 'keyId' when calling deleteAClientKey");
    }

    // Path parameters
    String localVarPath = "/api/0/projects/{organization_slug}/{project_slug}/keys/{key_id}/"
            .replaceAll("\\{organization_slug}", apiClient.escapeString(organizationSlug))
            .replaceAll("\\{project_slug}", apiClient.escapeString(projectSlug))
            .replaceAll("\\{key_id}", apiClient.escapeString(keyId));

    String localVarAccept = apiClient.selectHeaderAccept();
    String localVarContentType = apiClient.selectHeaderContentType();
    String[] localVarAuthNames = new String[] {"auth_token"};
    return apiClient.invokeAPI("ProjectsApi.deleteAClientKey", localVarPath, "DELETE", new ArrayList<>(), null,
                               new LinkedHashMap<>(), new LinkedHashMap<>(), new LinkedHashMap<>(), localVarAccept, localVarContentType,
                               localVarAuthNames, null, false);
  }
  /**
   * 
   * Schedules a project for deletion.  Deletion happens asynchronously and therefore is not immediate. However once deletion has begun the state of a project changes and will be hidden from most public views.
   * @param organizationSlug The slug of the organization the project belongs to. (required)
   * @param projectSlug The slug of the project to delete. (required)
   * @throws ApiException if fails to make API call
   * @http.response.details
     <table summary="Response Details" border="1">
       <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
       <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
       <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
       <tr><td> 404 </td><td> Project not found </td><td>  -  </td></tr>
     </table>
   */
  public void deleteAProject(String organizationSlug, String projectSlug) throws ApiException {
    deleteAProjectWithHttpInfo(organizationSlug, projectSlug);
  }

  /**
   * 
   * Schedules a project for deletion.  Deletion happens asynchronously and therefore is not immediate. However once deletion has begun the state of a project changes and will be hidden from most public views.
   * @param organizationSlug The slug of the organization the project belongs to. (required)
   * @param projectSlug The slug of the project to delete. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   * @http.response.details
     <table summary="Response Details" border="1">
       <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
       <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
       <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
       <tr><td> 404 </td><td> Project not found </td><td>  -  </td></tr>
     </table>
   */
  public ApiResponse<Void> deleteAProjectWithHttpInfo(String organizationSlug, String projectSlug) throws ApiException {
    // Check required parameters
    if (organizationSlug == null) {
      throw new ApiException(400, "Missing the required parameter 'organizationSlug' when calling deleteAProject");
    }
    if (projectSlug == null) {
      throw new ApiException(400, "Missing the required parameter 'projectSlug' when calling deleteAProject");
    }

    // Path parameters
    String localVarPath = "/api/0/projects/{organization_slug}/{project_slug}/"
            .replaceAll("\\{organization_slug}", apiClient.escapeString(organizationSlug))
            .replaceAll("\\{project_slug}", apiClient.escapeString(projectSlug));

    String localVarAccept = apiClient.selectHeaderAccept();
    String localVarContentType = apiClient.selectHeaderContentType();
    String[] localVarAuthNames = new String[] {"auth_token"};
    return apiClient.invokeAPI("ProjectsApi.deleteAProject", localVarPath, "DELETE", new ArrayList<>(), null,
                               new LinkedHashMap<>(), new LinkedHashMap<>(), new LinkedHashMap<>(), localVarAccept, localVarContentType,
                               localVarAuthNames, null, false);
  }
  /**
   * 
   * Delete a debug information file for a given project.
   * @param organizationSlug The slug of the organization the file belongs to. (required)
   * @param projectSlug The slug of the project to delete the DIF. (required)
   * @param id The ID of the DIF to delete. (required)
   * @throws ApiException if fails to make API call
   * @http.response.details
     <table summary="Response Details" border="1">
       <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
       <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
       <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
       <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
   */
  public void deleteASpecificProjectsDebugInformationFile(String organizationSlug, String projectSlug, String id) throws ApiException {
    deleteASpecificProjectsDebugInformationFileWithHttpInfo(organizationSlug, projectSlug, id);
  }

  /**
   * 
   * Delete a debug information file for a given project.
   * @param organizationSlug The slug of the organization the file belongs to. (required)
   * @param projectSlug The slug of the project to delete the DIF. (required)
   * @param id The ID of the DIF to delete. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   * @http.response.details
     <table summary="Response Details" border="1">
       <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
       <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
       <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
       <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
   */
  public ApiResponse<Void> deleteASpecificProjectsDebugInformationFileWithHttpInfo(String organizationSlug, String projectSlug, String id) throws ApiException {
    // Check required parameters
    if (organizationSlug == null) {
      throw new ApiException(400, "Missing the required parameter 'organizationSlug' when calling deleteASpecificProjectsDebugInformationFile");
    }
    if (projectSlug == null) {
      throw new ApiException(400, "Missing the required parameter 'projectSlug' when calling deleteASpecificProjectsDebugInformationFile");
    }
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteASpecificProjectsDebugInformationFile");
    }

    // Path parameters
    String localVarPath = "/api/0/projects/{organization_slug}/{project_slug}/files/dsyms/"
            .replaceAll("\\{organization_slug}", apiClient.escapeString(organizationSlug))
            .replaceAll("\\{project_slug}", apiClient.escapeString(projectSlug));

    // Query parameters
    List<Pair> localVarQueryParams = new ArrayList<>(
            apiClient.parameterToPairs("", "id", id)
    );

    String localVarAccept = apiClient.selectHeaderAccept();
    String localVarContentType = apiClient.selectHeaderContentType();
    String[] localVarAuthNames = new String[] {"auth_token"};
    return apiClient.invokeAPI("ProjectsApi.deleteASpecificProjectsDebugInformationFile", localVarPath, "DELETE", localVarQueryParams, null,
                               new LinkedHashMap<>(), new LinkedHashMap<>(), new LinkedHashMap<>(), localVarAccept, localVarContentType,
                               localVarAuthNames, null, false);
  }
  /**
   * 
   * Return a list of client keys bound to a project.
   * @param organizationSlug The slug of the organization the client keys belong to. (required)
   * @param projectSlug The slug of the project the client keys belong to. (required)
   * @param cursor A pointer to the last object fetched and its sort order; used to retrieve the next or previous results. (optional)
   * @return List&lt;ListAProjectSClientKeys200ResponseInner&gt;
   * @throws ApiException if fails to make API call
   * @http.response.details
     <table summary="Response Details" border="1">
       <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
       <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
       <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
   */
  public List<ListAProjectSClientKeys200ResponseInner> listAProjectsClientKeys(String organizationSlug, String projectSlug, String cursor) throws ApiException {
    return listAProjectsClientKeysWithHttpInfo(organizationSlug, projectSlug, cursor).getData();
  }

  /**
   * 
   * Return a list of client keys bound to a project.
   * @param organizationSlug The slug of the organization the client keys belong to. (required)
   * @param projectSlug The slug of the project the client keys belong to. (required)
   * @param cursor A pointer to the last object fetched and its sort order; used to retrieve the next or previous results. (optional)
   * @return ApiResponse&lt;List&lt;ListAProjectSClientKeys200ResponseInner&gt;&gt;
   * @throws ApiException if fails to make API call
   * @http.response.details
     <table summary="Response Details" border="1">
       <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
       <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
       <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
   */
  public ApiResponse<List<ListAProjectSClientKeys200ResponseInner>> listAProjectsClientKeysWithHttpInfo(String organizationSlug, String projectSlug, String cursor) throws ApiException {
    // Check required parameters
    if (organizationSlug == null) {
      throw new ApiException(400, "Missing the required parameter 'organizationSlug' when calling listAProjectsClientKeys");
    }
    if (projectSlug == null) {
      throw new ApiException(400, "Missing the required parameter 'projectSlug' when calling listAProjectsClientKeys");
    }

    // Path parameters
    String localVarPath = "/api/0/projects/{organization_slug}/{project_slug}/keys/"
            .replaceAll("\\{organization_slug}", apiClient.escapeString(organizationSlug))
            .replaceAll("\\{project_slug}", apiClient.escapeString(projectSlug));

    // Query parameters
    List<Pair> localVarQueryParams = new ArrayList<>(
            apiClient.parameterToPairs("", "cursor", cursor)
    );

    String localVarAccept = apiClient.selectHeaderAccept("application/json");
    String localVarContentType = apiClient.selectHeaderContentType();
    String[] localVarAuthNames = new String[] {"auth_token"};
    GenericType<List<ListAProjectSClientKeys200ResponseInner>> localVarReturnType = new GenericType<List<ListAProjectSClientKeys200ResponseInner>>() {};
    return apiClient.invokeAPI("ProjectsApi.listAProjectsClientKeys", localVarPath, "GET", localVarQueryParams, null,
                               new LinkedHashMap<>(), new LinkedHashMap<>(), new LinkedHashMap<>(), localVarAccept, localVarContentType,
                               localVarAuthNames, localVarReturnType, false);
  }
  /**
   * 
   * Retrieve a list of debug information files for a given project.
   * @param organizationSlug The slug of the organization the file belongs to. (required)
   * @param projectSlug The slug of the project to list the DIFs of. (required)
   * @throws ApiException if fails to make API call
   * @http.response.details
     <table summary="Response Details" border="1">
       <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
       <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
       <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
       <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
   */
  public void listAProjectsDebugInformationFiles(String organizationSlug, String projectSlug) throws ApiException {
    listAProjectsDebugInformationFilesWithHttpInfo(organizationSlug, projectSlug);
  }

  /**
   * 
   * Retrieve a list of debug information files for a given project.
   * @param organizationSlug The slug of the organization the file belongs to. (required)
   * @param projectSlug The slug of the project to list the DIFs of. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   * @http.response.details
     <table summary="Response Details" border="1">
       <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
       <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
       <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
       <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
   */
  public ApiResponse<Void> listAProjectsDebugInformationFilesWithHttpInfo(String organizationSlug, String projectSlug) throws ApiException {
    // Check required parameters
    if (organizationSlug == null) {
      throw new ApiException(400, "Missing the required parameter 'organizationSlug' when calling listAProjectsDebugInformationFiles");
    }
    if (projectSlug == null) {
      throw new ApiException(400, "Missing the required parameter 'projectSlug' when calling listAProjectsDebugInformationFiles");
    }

    // Path parameters
    String localVarPath = "/api/0/projects/{organization_slug}/{project_slug}/files/dsyms/"
            .replaceAll("\\{organization_slug}", apiClient.escapeString(organizationSlug))
            .replaceAll("\\{project_slug}", apiClient.escapeString(projectSlug));

    String localVarAccept = apiClient.selectHeaderAccept("application/json");
    String localVarContentType = apiClient.selectHeaderContentType();
    String[] localVarAuthNames = new String[] {"auth_token"};
    return apiClient.invokeAPI("ProjectsApi.listAProjectsDebugInformationFiles", localVarPath, "GET", new ArrayList<>(), null,
                               new LinkedHashMap<>(), new LinkedHashMap<>(), new LinkedHashMap<>(), localVarAccept, localVarContentType,
                               localVarAuthNames, null, false);
  }
  /**
   * 
   * Return a list of service hooks bound to a project.
   * @param organizationSlug The slug of the organization the client keys belong to. (required)
   * @param projectSlug The slug of the project the client keys belong to. (required)
   * @param cursor A pointer to the last object fetched and its sort order; used to retrieve the next or previous results. (optional)
   * @return List&lt;ListAProjectSServiceHooks200ResponseInner&gt;
   * @throws ApiException if fails to make API call
   * @http.response.details
     <table summary="Response Details" border="1">
       <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
       <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
       <tr><td> 403 </td><td> You do not have that feature enabled </td><td>  -  </td></tr>
     </table>
   */
  public List<ListAProjectSServiceHooks200ResponseInner> listAProjectsServiceHooks(String organizationSlug, String projectSlug, String cursor) throws ApiException {
    return listAProjectsServiceHooksWithHttpInfo(organizationSlug, projectSlug, cursor).getData();
  }

  /**
   * 
   * Return a list of service hooks bound to a project.
   * @param organizationSlug The slug of the organization the client keys belong to. (required)
   * @param projectSlug The slug of the project the client keys belong to. (required)
   * @param cursor A pointer to the last object fetched and its sort order; used to retrieve the next or previous results. (optional)
   * @return ApiResponse&lt;List&lt;ListAProjectSServiceHooks200ResponseInner&gt;&gt;
   * @throws ApiException if fails to make API call
   * @http.response.details
     <table summary="Response Details" border="1">
       <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
       <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
       <tr><td> 403 </td><td> You do not have that feature enabled </td><td>  -  </td></tr>
     </table>
   */
  public ApiResponse<List<ListAProjectSServiceHooks200ResponseInner>> listAProjectsServiceHooksWithHttpInfo(String organizationSlug, String projectSlug, String cursor) throws ApiException {
    // Check required parameters
    if (organizationSlug == null) {
      throw new ApiException(400, "Missing the required parameter 'organizationSlug' when calling listAProjectsServiceHooks");
    }
    if (projectSlug == null) {
      throw new ApiException(400, "Missing the required parameter 'projectSlug' when calling listAProjectsServiceHooks");
    }

    // Path parameters
    String localVarPath = "/api/0/projects/{organization_slug}/{project_slug}/hooks/"
            .replaceAll("\\{organization_slug}", apiClient.escapeString(organizationSlug))
            .replaceAll("\\{project_slug}", apiClient.escapeString(projectSlug));

    // Query parameters
    List<Pair> localVarQueryParams = new ArrayList<>(
            apiClient.parameterToPairs("", "cursor", cursor)
    );

    String localVarAccept = apiClient.selectHeaderAccept("application/json");
    String localVarContentType = apiClient.selectHeaderContentType();
    String[] localVarAuthNames = new String[] {"auth_token"};
    GenericType<List<ListAProjectSServiceHooks200ResponseInner>> localVarReturnType = new GenericType<List<ListAProjectSServiceHooks200ResponseInner>>() {};
    return apiClient.invokeAPI("ProjectsApi.listAProjectsServiceHooks", localVarPath, "GET", localVarQueryParams, null,
                               new LinkedHashMap<>(), new LinkedHashMap<>(), new LinkedHashMap<>(), localVarAccept, localVarContentType,
                               localVarAuthNames, localVarReturnType, false);
  }
  /**
   * 
   * Return a list of user feedback items within this project.
   * @param organizationSlug The slug of the organization. (required)
   * @param projectSlug The slug of the project. (required)
   * @return List&lt;ListAProjectSUserFeedback200ResponseInner&gt;
   * @throws ApiException if fails to make API call
   * @http.response.details
     <table summary="Response Details" border="1">
       <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
       <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
       <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
       <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
   */
  public List<ListAProjectSUserFeedback200ResponseInner> listAProjectsUserFeedback(String organizationSlug, String projectSlug) throws ApiException {
    return listAProjectsUserFeedbackWithHttpInfo(organizationSlug, projectSlug).getData();
  }

  /**
   * 
   * Return a list of user feedback items within this project.
   * @param organizationSlug The slug of the organization. (required)
   * @param projectSlug The slug of the project. (required)
   * @return ApiResponse&lt;List&lt;ListAProjectSUserFeedback200ResponseInner&gt;&gt;
   * @throws ApiException if fails to make API call
   * @http.response.details
     <table summary="Response Details" border="1">
       <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
       <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
       <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
       <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
   */
  public ApiResponse<List<ListAProjectSUserFeedback200ResponseInner>> listAProjectsUserFeedbackWithHttpInfo(String organizationSlug, String projectSlug) throws ApiException {
    // Check required parameters
    if (organizationSlug == null) {
      throw new ApiException(400, "Missing the required parameter 'organizationSlug' when calling listAProjectsUserFeedback");
    }
    if (projectSlug == null) {
      throw new ApiException(400, "Missing the required parameter 'projectSlug' when calling listAProjectsUserFeedback");
    }

    // Path parameters
    String localVarPath = "/api/0/projects/{organization_slug}/{project_slug}/user-feedback/"
            .replaceAll("\\{organization_slug}", apiClient.escapeString(organizationSlug))
            .replaceAll("\\{project_slug}", apiClient.escapeString(projectSlug));

    String localVarAccept = apiClient.selectHeaderAccept("application/json");
    String localVarContentType = apiClient.selectHeaderContentType();
    String[] localVarAuthNames = new String[] {"auth_token"};
    GenericType<List<ListAProjectSUserFeedback200ResponseInner>> localVarReturnType = new GenericType<List<ListAProjectSUserFeedback200ResponseInner>>() {};
    return apiClient.invokeAPI("ProjectsApi.listAProjectsUserFeedback", localVarPath, "GET", new ArrayList<>(), null,
                               new LinkedHashMap<>(), new LinkedHashMap<>(), new LinkedHashMap<>(), localVarAccept, localVarContentType,
                               localVarAuthNames, localVarReturnType, false);
  }
  /**
   * 
   * Return a list of users seen within this project.
   * @param organizationSlug The slug of the organization. (required)
   * @param projectSlug The slug of the project. (required)
   * @param query Limit results to users matching the given query. Prefixes should be used to suggest the field to match on: &#x60;id&#x60;, &#x60;email&#x60;, &#x60;username&#x60;, &#x60;ip&#x60;. For example, &#x60;query&#x3D;email:foo@example.com&#x60; (optional)
   * @return List&lt;ListAProjectSUsers200ResponseInner&gt;
   * @throws ApiException if fails to make API call
   * @http.response.details
     <table summary="Response Details" border="1">
       <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
       <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
       <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
   */
  public List<ListAProjectSUsers200ResponseInner> listAProjectsUsers(String organizationSlug, String projectSlug, String query) throws ApiException {
    return listAProjectsUsersWithHttpInfo(organizationSlug, projectSlug, query).getData();
  }

  /**
   * 
   * Return a list of users seen within this project.
   * @param organizationSlug The slug of the organization. (required)
   * @param projectSlug The slug of the project. (required)
   * @param query Limit results to users matching the given query. Prefixes should be used to suggest the field to match on: &#x60;id&#x60;, &#x60;email&#x60;, &#x60;username&#x60;, &#x60;ip&#x60;. For example, &#x60;query&#x3D;email:foo@example.com&#x60; (optional)
   * @return ApiResponse&lt;List&lt;ListAProjectSUsers200ResponseInner&gt;&gt;
   * @throws ApiException if fails to make API call
   * @http.response.details
     <table summary="Response Details" border="1">
       <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
       <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
       <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
   */
  public ApiResponse<List<ListAProjectSUsers200ResponseInner>> listAProjectsUsersWithHttpInfo(String organizationSlug, String projectSlug, String query) throws ApiException {
    // Check required parameters
    if (organizationSlug == null) {
      throw new ApiException(400, "Missing the required parameter 'organizationSlug' when calling listAProjectsUsers");
    }
    if (projectSlug == null) {
      throw new ApiException(400, "Missing the required parameter 'projectSlug' when calling listAProjectsUsers");
    }

    // Path parameters
    String localVarPath = "/api/0/projects/{organization_slug}/{project_slug}/users/"
            .replaceAll("\\{organization_slug}", apiClient.escapeString(organizationSlug))
            .replaceAll("\\{project_slug}", apiClient.escapeString(projectSlug));

    // Query parameters
    List<Pair> localVarQueryParams = new ArrayList<>(
            apiClient.parameterToPairs("", "query", query)
    );

    String localVarAccept = apiClient.selectHeaderAccept("application/json");
    String localVarContentType = apiClient.selectHeaderContentType();
    String[] localVarAuthNames = new String[] {"auth_token"};
    GenericType<List<ListAProjectSUsers200ResponseInner>> localVarReturnType = new GenericType<List<ListAProjectSUsers200ResponseInner>>() {};
    return apiClient.invokeAPI("ProjectsApi.listAProjectsUsers", localVarPath, "GET", localVarQueryParams, null,
                               new LinkedHashMap<>(), new LinkedHashMap<>(), new LinkedHashMap<>(), localVarAccept, localVarContentType,
                               localVarAuthNames, localVarReturnType, false);
  }
  /**
   * 
   * Return a list of values associated with this key.  The &#x60;query&#x60; parameter can be used to to perform a \&quot;contains\&quot; match on values.   When [paginated](/api/pagination) can return at most 1000 values.
   * @param organizationSlug The slug of the organization. (required)
   * @param projectSlug The slug of the project. (required)
   * @param key The tag key to look up. (required)
   * @return List&lt;ListATagSValues200ResponseInner&gt;
   * @throws ApiException if fails to make API call
   * @http.response.details
     <table summary="Response Details" border="1">
       <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
       <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
       <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
   */
  public List<ListATagSValues200ResponseInner> listATagsValues(String organizationSlug, String projectSlug, String key) throws ApiException {
    return listATagsValuesWithHttpInfo(organizationSlug, projectSlug, key).getData();
  }

  /**
   * 
   * Return a list of values associated with this key.  The &#x60;query&#x60; parameter can be used to to perform a \&quot;contains\&quot; match on values.   When [paginated](/api/pagination) can return at most 1000 values.
   * @param organizationSlug The slug of the organization. (required)
   * @param projectSlug The slug of the project. (required)
   * @param key The tag key to look up. (required)
   * @return ApiResponse&lt;List&lt;ListATagSValues200ResponseInner&gt;&gt;
   * @throws ApiException if fails to make API call
   * @http.response.details
     <table summary="Response Details" border="1">
       <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
       <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
       <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
   */
  public ApiResponse<List<ListATagSValues200ResponseInner>> listATagsValuesWithHttpInfo(String organizationSlug, String projectSlug, String key) throws ApiException {
    // Check required parameters
    if (organizationSlug == null) {
      throw new ApiException(400, "Missing the required parameter 'organizationSlug' when calling listATagsValues");
    }
    if (projectSlug == null) {
      throw new ApiException(400, "Missing the required parameter 'projectSlug' when calling listATagsValues");
    }
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling listATagsValues");
    }

    // Path parameters
    String localVarPath = "/api/0/projects/{organization_slug}/{project_slug}/tags/{key}/values/"
            .replaceAll("\\{organization_slug}", apiClient.escapeString(organizationSlug))
            .replaceAll("\\{project_slug}", apiClient.escapeString(projectSlug))
            .replaceAll("\\{key}", apiClient.escapeString(key));

    String localVarAccept = apiClient.selectHeaderAccept("application/json");
    String localVarContentType = apiClient.selectHeaderContentType();
    String[] localVarAuthNames = new String[] {"auth_token"};
    GenericType<List<ListATagSValues200ResponseInner>> localVarReturnType = new GenericType<List<ListATagSValues200ResponseInner>>() {};
    return apiClient.invokeAPI("ProjectsApi.listATagsValues", localVarPath, "GET", new ArrayList<>(), null,
                               new LinkedHashMap<>(), new LinkedHashMap<>(), new LinkedHashMap<>(), localVarAccept, localVarContentType,
                               localVarAuthNames, localVarReturnType, false);
  }
  /**
   * 
   * Return a list of projects available to the authenticated session.
   * @param cursor A pointer to the last object fetched and its sort order; used to retrieve the next or previous results. (optional)
   * @return List&lt;ListYourProjects200ResponseInner&gt;
   * @throws ApiException if fails to make API call
   * @http.response.details
     <table summary="Response Details" border="1">
       <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
       <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
       <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
   */
  public List<ListYourProjects200ResponseInner> listYourProjects(String cursor) throws ApiException {
    return listYourProjectsWithHttpInfo(cursor).getData();
  }

  /**
   * 
   * Return a list of projects available to the authenticated session.
   * @param cursor A pointer to the last object fetched and its sort order; used to retrieve the next or previous results. (optional)
   * @return ApiResponse&lt;List&lt;ListYourProjects200ResponseInner&gt;&gt;
   * @throws ApiException if fails to make API call
   * @http.response.details
     <table summary="Response Details" border="1">
       <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
       <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
       <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
   */
  public ApiResponse<List<ListYourProjects200ResponseInner>> listYourProjectsWithHttpInfo(String cursor) throws ApiException {
    // Query parameters
    List<Pair> localVarQueryParams = new ArrayList<>(
            apiClient.parameterToPairs("", "cursor", cursor)
    );

    String localVarAccept = apiClient.selectHeaderAccept("application/json");
    String localVarContentType = apiClient.selectHeaderContentType();
    String[] localVarAuthNames = new String[] {"auth_token"};
    GenericType<List<ListYourProjects200ResponseInner>> localVarReturnType = new GenericType<List<ListYourProjects200ResponseInner>>() {};
    return apiClient.invokeAPI("ProjectsApi.listYourProjects", "/api/0/projects/", "GET", localVarQueryParams, null,
                               new LinkedHashMap<>(), new LinkedHashMap<>(), new LinkedHashMap<>(), localVarAccept, localVarContentType,
                               localVarAuthNames, localVarReturnType, false);
  }
  /**
   * 
   * Register a new service hook on a project.  Events include:  - event.alert: An alert is generated for an event (via rules). - event.created: A new event has been processed.  This endpoint requires the &#39;servicehooks&#39; feature to be enabled for your project.
   * @param organizationSlug The slug of the organization the client keys belong to. (required)
   * @param projectSlug The slug of the project the client keys belong to. (required)
   * @param registerANewServiceHookRequest  (required)
   * @return ListAProjectSServiceHooks200ResponseInner
   * @throws ApiException if fails to make API call
   * @http.response.details
     <table summary="Response Details" border="1">
       <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
       <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
       <tr><td> 403 </td><td> You do not have that feature enabled </td><td>  -  </td></tr>
       <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
   */
  public ListAProjectSServiceHooks200ResponseInner registerANewServiceHook(String organizationSlug, String projectSlug, RegisterANewServiceHookRequest registerANewServiceHookRequest) throws ApiException {
    return registerANewServiceHookWithHttpInfo(organizationSlug, projectSlug, registerANewServiceHookRequest).getData();
  }

  /**
   * 
   * Register a new service hook on a project.  Events include:  - event.alert: An alert is generated for an event (via rules). - event.created: A new event has been processed.  This endpoint requires the &#39;servicehooks&#39; feature to be enabled for your project.
   * @param organizationSlug The slug of the organization the client keys belong to. (required)
   * @param projectSlug The slug of the project the client keys belong to. (required)
   * @param registerANewServiceHookRequest  (required)
   * @return ApiResponse&lt;ListAProjectSServiceHooks200ResponseInner&gt;
   * @throws ApiException if fails to make API call
   * @http.response.details
     <table summary="Response Details" border="1">
       <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
       <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
       <tr><td> 403 </td><td> You do not have that feature enabled </td><td>  -  </td></tr>
       <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
   */
  public ApiResponse<ListAProjectSServiceHooks200ResponseInner> registerANewServiceHookWithHttpInfo(String organizationSlug, String projectSlug, RegisterANewServiceHookRequest registerANewServiceHookRequest) throws ApiException {
    // Check required parameters
    if (organizationSlug == null) {
      throw new ApiException(400, "Missing the required parameter 'organizationSlug' when calling registerANewServiceHook");
    }
    if (projectSlug == null) {
      throw new ApiException(400, "Missing the required parameter 'projectSlug' when calling registerANewServiceHook");
    }
    if (registerANewServiceHookRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'registerANewServiceHookRequest' when calling registerANewServiceHook");
    }

    // Path parameters
    String localVarPath = "/api/0/projects/{organization_slug}/{project_slug}/hooks/"
            .replaceAll("\\{organization_slug}", apiClient.escapeString(organizationSlug))
            .replaceAll("\\{project_slug}", apiClient.escapeString(projectSlug));

    String localVarAccept = apiClient.selectHeaderAccept("application/json");
    String localVarContentType = apiClient.selectHeaderContentType("application/json");
    String[] localVarAuthNames = new String[] {"auth_token"};
    GenericType<ListAProjectSServiceHooks200ResponseInner> localVarReturnType = new GenericType<ListAProjectSServiceHooks200ResponseInner>() {};
    return apiClient.invokeAPI("ProjectsApi.registerANewServiceHook", localVarPath, "POST", new ArrayList<>(), registerANewServiceHookRequest,
                               new LinkedHashMap<>(), new LinkedHashMap<>(), new LinkedHashMap<>(), localVarAccept, localVarContentType,
                               localVarAuthNames, localVarReturnType, false);
  }
  /**
   * 
   * Remove a service hook.
   * @param organizationSlug The slug of the organization the client keys belong to. (required)
   * @param projectSlug The slug of the project the client keys belong to. (required)
   * @param hookId The GUID of the service hook. (required)
   * @throws ApiException if fails to make API call
   * @http.response.details
     <table summary="Response Details" border="1">
       <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
       <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
       <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
       <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
   */
  public void removeAServiceHook(String organizationSlug, String projectSlug, String hookId) throws ApiException {
    removeAServiceHookWithHttpInfo(organizationSlug, projectSlug, hookId);
  }

  /**
   * 
   * Remove a service hook.
   * @param organizationSlug The slug of the organization the client keys belong to. (required)
   * @param projectSlug The slug of the project the client keys belong to. (required)
   * @param hookId The GUID of the service hook. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   * @http.response.details
     <table summary="Response Details" border="1">
       <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
       <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
       <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
       <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
   */
  public ApiResponse<Void> removeAServiceHookWithHttpInfo(String organizationSlug, String projectSlug, String hookId) throws ApiException {
    // Check required parameters
    if (organizationSlug == null) {
      throw new ApiException(400, "Missing the required parameter 'organizationSlug' when calling removeAServiceHook");
    }
    if (projectSlug == null) {
      throw new ApiException(400, "Missing the required parameter 'projectSlug' when calling removeAServiceHook");
    }
    if (hookId == null) {
      throw new ApiException(400, "Missing the required parameter 'hookId' when calling removeAServiceHook");
    }

    // Path parameters
    String localVarPath = "/api/0/projects/{organization_slug}/{project_slug}/hooks/{hook_id}/"
            .replaceAll("\\{organization_slug}", apiClient.escapeString(organizationSlug))
            .replaceAll("\\{project_slug}", apiClient.escapeString(projectSlug))
            .replaceAll("\\{hook_id}", apiClient.escapeString(hookId));

    String localVarAccept = apiClient.selectHeaderAccept();
    String localVarContentType = apiClient.selectHeaderContentType();
    String[] localVarAuthNames = new String[] {"auth_token"};
    return apiClient.invokeAPI("ProjectsApi.removeAServiceHook", localVarPath, "DELETE", new ArrayList<>(), null,
                               new LinkedHashMap<>(), new LinkedHashMap<>(), new LinkedHashMap<>(), localVarAccept, localVarContentType,
                               localVarAuthNames, null, false);
  }
  /**
   * 
   * Return details on an individual project.
   * @param organizationSlug The slug of the organization the project belongs to. (required)
   * @param projectSlug The slug of the project to retrieve. (required)
   * @return RetrieveAProject200Response
   * @throws ApiException if fails to make API call
   * @http.response.details
     <table summary="Response Details" border="1">
       <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
       <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
       <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
       <tr><td> 404 </td><td> Project not found </td><td>  -  </td></tr>
     </table>
   */
  public RetrieveAProject200Response retrieveAProject(String organizationSlug, String projectSlug) throws ApiException {
    return retrieveAProjectWithHttpInfo(organizationSlug, projectSlug).getData();
  }

  /**
   * 
   * Return details on an individual project.
   * @param organizationSlug The slug of the organization the project belongs to. (required)
   * @param projectSlug The slug of the project to retrieve. (required)
   * @return ApiResponse&lt;RetrieveAProject200Response&gt;
   * @throws ApiException if fails to make API call
   * @http.response.details
     <table summary="Response Details" border="1">
       <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
       <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
       <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
       <tr><td> 404 </td><td> Project not found </td><td>  -  </td></tr>
     </table>
   */
  public ApiResponse<RetrieveAProject200Response> retrieveAProjectWithHttpInfo(String organizationSlug, String projectSlug) throws ApiException {
    // Check required parameters
    if (organizationSlug == null) {
      throw new ApiException(400, "Missing the required parameter 'organizationSlug' when calling retrieveAProject");
    }
    if (projectSlug == null) {
      throw new ApiException(400, "Missing the required parameter 'projectSlug' when calling retrieveAProject");
    }

    // Path parameters
    String localVarPath = "/api/0/projects/{organization_slug}/{project_slug}/"
            .replaceAll("\\{organization_slug}", apiClient.escapeString(organizationSlug))
            .replaceAll("\\{project_slug}", apiClient.escapeString(projectSlug));

    String localVarAccept = apiClient.selectHeaderAccept("application/json");
    String localVarContentType = apiClient.selectHeaderContentType();
    String[] localVarAuthNames = new String[] {"auth_token"};
    GenericType<RetrieveAProject200Response> localVarReturnType = new GenericType<RetrieveAProject200Response>() {};
    return apiClient.invokeAPI("ProjectsApi.retrieveAProject", localVarPath, "GET", new ArrayList<>(), null,
                               new LinkedHashMap<>(), new LinkedHashMap<>(), new LinkedHashMap<>(), localVarAccept, localVarContentType,
                               localVarAuthNames, localVarReturnType, false);
  }
  /**
   * 
   * Return a service hook bound to a project.
   * @param organizationSlug The slug of the organization the client keys belong to. (required)
   * @param projectSlug The slug of the project the client keys belong to. (required)
   * @param hookId The GUID of the service hook. (required)
   * @return ListAProjectSServiceHooks200ResponseInner
   * @throws ApiException if fails to make API call
   * @http.response.details
     <table summary="Response Details" border="1">
       <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
       <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
       <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
       <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
   */
  public ListAProjectSServiceHooks200ResponseInner retrieveAServiceHook(String organizationSlug, String projectSlug, String hookId) throws ApiException {
    return retrieveAServiceHookWithHttpInfo(organizationSlug, projectSlug, hookId).getData();
  }

  /**
   * 
   * Return a service hook bound to a project.
   * @param organizationSlug The slug of the organization the client keys belong to. (required)
   * @param projectSlug The slug of the project the client keys belong to. (required)
   * @param hookId The GUID of the service hook. (required)
   * @return ApiResponse&lt;ListAProjectSServiceHooks200ResponseInner&gt;
   * @throws ApiException if fails to make API call
   * @http.response.details
     <table summary="Response Details" border="1">
       <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
       <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
       <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
       <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
   */
  public ApiResponse<ListAProjectSServiceHooks200ResponseInner> retrieveAServiceHookWithHttpInfo(String organizationSlug, String projectSlug, String hookId) throws ApiException {
    // Check required parameters
    if (organizationSlug == null) {
      throw new ApiException(400, "Missing the required parameter 'organizationSlug' when calling retrieveAServiceHook");
    }
    if (projectSlug == null) {
      throw new ApiException(400, "Missing the required parameter 'projectSlug' when calling retrieveAServiceHook");
    }
    if (hookId == null) {
      throw new ApiException(400, "Missing the required parameter 'hookId' when calling retrieveAServiceHook");
    }

    // Path parameters
    String localVarPath = "/api/0/projects/{organization_slug}/{project_slug}/hooks/{hook_id}/"
            .replaceAll("\\{organization_slug}", apiClient.escapeString(organizationSlug))
            .replaceAll("\\{project_slug}", apiClient.escapeString(projectSlug))
            .replaceAll("\\{hook_id}", apiClient.escapeString(hookId));

    String localVarAccept = apiClient.selectHeaderAccept("application/json");
    String localVarContentType = apiClient.selectHeaderContentType();
    String[] localVarAuthNames = new String[] {"auth_token"};
    GenericType<ListAProjectSServiceHooks200ResponseInner> localVarReturnType = new GenericType<ListAProjectSServiceHooks200ResponseInner>() {};
    return apiClient.invokeAPI("ProjectsApi.retrieveAServiceHook", localVarPath, "GET", new ArrayList<>(), null,
                               new LinkedHashMap<>(), new LinkedHashMap<>(), new LinkedHashMap<>(), localVarAccept, localVarContentType,
                               localVarAuthNames, localVarReturnType, false);
  }
  /**
   * Caution This endpoint may change in the future without  notice.
   * Return a set of points representing a normalized timestamp and the number of events seen in the period.  Query ranges are limited to Sentry&#39;s configured time-series resolutions.
   * @param organizationSlug The slug of the organization. (required)
   * @param projectSlug The slug of the project. (required)
   * @param stat The name of the stat to query &#x60;(\&quot;received\&quot;, \&quot;rejected\&quot;, \&quot;blacklisted\&quot;, \&quot;generated\&quot;)&#x60;. (optional)
   * @param since A timestamp to set the start of the query in seconds since UNIX epoch. (optional)
   * @param until A timestamp to set the end of the query in seconds since UNIX epoch. (optional)
   * @param resolution An explicit resolution to search for (one of &#x60;10s&#x60;, &#x60;1h&#x60;, and &#x60;1d&#x60;). (optional)
   * @return List&lt;List&lt;Integer&gt;&gt;
   * @throws ApiException if fails to make API call
   * @http.response.details
     <table summary="Response Details" border="1">
       <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
       <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
       <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
   */
  public List<List<Integer>> retrieveEventCountsForAProject(String organizationSlug, String projectSlug, String stat, OffsetDateTime since, OffsetDateTime until, String resolution) throws ApiException {
    return retrieveEventCountsForAProjectWithHttpInfo(organizationSlug, projectSlug, stat, since, until, resolution).getData();
  }

  /**
   * Caution This endpoint may change in the future without  notice.
   * Return a set of points representing a normalized timestamp and the number of events seen in the period.  Query ranges are limited to Sentry&#39;s configured time-series resolutions.
   * @param organizationSlug The slug of the organization. (required)
   * @param projectSlug The slug of the project. (required)
   * @param stat The name of the stat to query &#x60;(\&quot;received\&quot;, \&quot;rejected\&quot;, \&quot;blacklisted\&quot;, \&quot;generated\&quot;)&#x60;. (optional)
   * @param since A timestamp to set the start of the query in seconds since UNIX epoch. (optional)
   * @param until A timestamp to set the end of the query in seconds since UNIX epoch. (optional)
   * @param resolution An explicit resolution to search for (one of &#x60;10s&#x60;, &#x60;1h&#x60;, and &#x60;1d&#x60;). (optional)
   * @return ApiResponse&lt;List&lt;List&lt;Integer&gt;&gt;&gt;
   * @throws ApiException if fails to make API call
   * @http.response.details
     <table summary="Response Details" border="1">
       <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
       <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
       <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
   */
  public ApiResponse<List<List<Integer>>> retrieveEventCountsForAProjectWithHttpInfo(String organizationSlug, String projectSlug, String stat, OffsetDateTime since, OffsetDateTime until, String resolution) throws ApiException {
    // Check required parameters
    if (organizationSlug == null) {
      throw new ApiException(400, "Missing the required parameter 'organizationSlug' when calling retrieveEventCountsForAProject");
    }
    if (projectSlug == null) {
      throw new ApiException(400, "Missing the required parameter 'projectSlug' when calling retrieveEventCountsForAProject");
    }

    // Path parameters
    String localVarPath = "/api/0/projects/{organization_slug}/{project_slug}/stats/"
            .replaceAll("\\{organization_slug}", apiClient.escapeString(organizationSlug))
            .replaceAll("\\{project_slug}", apiClient.escapeString(projectSlug));

    // Query parameters
    List<Pair> localVarQueryParams = new ArrayList<>(
            apiClient.parameterToPairs("", "stat", stat)
    );
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "since", since));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "until", until));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "resolution", resolution));

    String localVarAccept = apiClient.selectHeaderAccept("application/json");
    String localVarContentType = apiClient.selectHeaderContentType();
    String[] localVarAuthNames = new String[] {"auth_token"};
    GenericType<List<List<Integer>>> localVarReturnType = new GenericType<List<List<Integer>>>() {};
    return apiClient.invokeAPI("ProjectsApi.retrieveEventCountsForAProject", localVarPath, "GET", localVarQueryParams, null,
                               new LinkedHashMap<>(), new LinkedHashMap<>(), new LinkedHashMap<>(), localVarAccept, localVarContentType,
                               localVarAuthNames, localVarReturnType, false);
  }
  /**
   * 
   * Submit and associate user feedback with an issue.  Feedback must be received by the server no more than 30 minutes after the event was saved.  Additionally, within 5 minutes of submitting feedback it may also be overwritten. This is useful in situations where you may need to retry sending a request due to network failures.  If feedback is rejected due to a mutability threshold, a 409 status code will be returned.  Note: Feedback may be submitted with DSN authentication (see auth documentation).
   * @param organizationSlug The slug of the organization. (required)
   * @param projectSlug The slug of the project. (required)
   * @param submitUserFeedbackRequest  (optional)
   * @return ListAProjectSUserFeedback200ResponseInner
   * @throws ApiException if fails to make API call
   * @http.response.details
     <table summary="Response Details" border="1">
       <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
       <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
       <tr><td> 400 </td><td> Bad Input </td><td>  -  </td></tr>
       <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
       <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
       <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
   */
  public ListAProjectSUserFeedback200ResponseInner submitUserFeedback(String organizationSlug, String projectSlug, SubmitUserFeedbackRequest submitUserFeedbackRequest) throws ApiException {
    return submitUserFeedbackWithHttpInfo(organizationSlug, projectSlug, submitUserFeedbackRequest).getData();
  }

  /**
   * 
   * Submit and associate user feedback with an issue.  Feedback must be received by the server no more than 30 minutes after the event was saved.  Additionally, within 5 minutes of submitting feedback it may also be overwritten. This is useful in situations where you may need to retry sending a request due to network failures.  If feedback is rejected due to a mutability threshold, a 409 status code will be returned.  Note: Feedback may be submitted with DSN authentication (see auth documentation).
   * @param organizationSlug The slug of the organization. (required)
   * @param projectSlug The slug of the project. (required)
   * @param submitUserFeedbackRequest  (optional)
   * @return ApiResponse&lt;ListAProjectSUserFeedback200ResponseInner&gt;
   * @throws ApiException if fails to make API call
   * @http.response.details
     <table summary="Response Details" border="1">
       <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
       <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
       <tr><td> 400 </td><td> Bad Input </td><td>  -  </td></tr>
       <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
       <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
       <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
   */
  public ApiResponse<ListAProjectSUserFeedback200ResponseInner> submitUserFeedbackWithHttpInfo(String organizationSlug, String projectSlug, SubmitUserFeedbackRequest submitUserFeedbackRequest) throws ApiException {
    // Check required parameters
    if (organizationSlug == null) {
      throw new ApiException(400, "Missing the required parameter 'organizationSlug' when calling submitUserFeedback");
    }
    if (projectSlug == null) {
      throw new ApiException(400, "Missing the required parameter 'projectSlug' when calling submitUserFeedback");
    }

    // Path parameters
    String localVarPath = "/api/0/projects/{organization_slug}/{project_slug}/user-feedback/"
            .replaceAll("\\{organization_slug}", apiClient.escapeString(organizationSlug))
            .replaceAll("\\{project_slug}", apiClient.escapeString(projectSlug));

    String localVarAccept = apiClient.selectHeaderAccept("application/json");
    String localVarContentType = apiClient.selectHeaderContentType("application/json");
    String[] localVarAuthNames = new String[] {"auth_token", "dsn"};
    GenericType<ListAProjectSUserFeedback200ResponseInner> localVarReturnType = new GenericType<ListAProjectSUserFeedback200ResponseInner>() {};
    return apiClient.invokeAPI("ProjectsApi.submitUserFeedback", localVarPath, "POST", new ArrayList<>(), submitUserFeedbackRequest,
                               new LinkedHashMap<>(), new LinkedHashMap<>(), new LinkedHashMap<>(), localVarAccept, localVarContentType,
                               localVarAuthNames, localVarReturnType, false);
  }
  /**
   * 
   * Update a client key.  This can be used to rename a key.
   * @param organizationSlug The slug of the organization the client keys belong to. (required)
   * @param projectSlug The slug of the project the client keys belong to. (required)
   * @param keyId The ID of the key to update. (required)
   * @param updateAClientKeyRequest  (required)
   * @return ListAProjectSClientKeys200ResponseInner
   * @throws ApiException if fails to make API call
   * @http.response.details
     <table summary="Response Details" border="1">
       <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
       <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
       <tr><td> 400 </td><td> Bad Input </td><td>  -  </td></tr>
       <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
       <tr><td> 404 </td><td> Project not found </td><td>  -  </td></tr>
     </table>
   */
  public ListAProjectSClientKeys200ResponseInner updateAClientKey(String organizationSlug, String projectSlug, String keyId, UpdateAClientKeyRequest updateAClientKeyRequest) throws ApiException {
    return updateAClientKeyWithHttpInfo(organizationSlug, projectSlug, keyId, updateAClientKeyRequest).getData();
  }

  /**
   * 
   * Update a client key.  This can be used to rename a key.
   * @param organizationSlug The slug of the organization the client keys belong to. (required)
   * @param projectSlug The slug of the project the client keys belong to. (required)
   * @param keyId The ID of the key to update. (required)
   * @param updateAClientKeyRequest  (required)
   * @return ApiResponse&lt;ListAProjectSClientKeys200ResponseInner&gt;
   * @throws ApiException if fails to make API call
   * @http.response.details
     <table summary="Response Details" border="1">
       <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
       <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
       <tr><td> 400 </td><td> Bad Input </td><td>  -  </td></tr>
       <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
       <tr><td> 404 </td><td> Project not found </td><td>  -  </td></tr>
     </table>
   */
  public ApiResponse<ListAProjectSClientKeys200ResponseInner> updateAClientKeyWithHttpInfo(String organizationSlug, String projectSlug, String keyId, UpdateAClientKeyRequest updateAClientKeyRequest) throws ApiException {
    // Check required parameters
    if (organizationSlug == null) {
      throw new ApiException(400, "Missing the required parameter 'organizationSlug' when calling updateAClientKey");
    }
    if (projectSlug == null) {
      throw new ApiException(400, "Missing the required parameter 'projectSlug' when calling updateAClientKey");
    }
    if (keyId == null) {
      throw new ApiException(400, "Missing the required parameter 'keyId' when calling updateAClientKey");
    }
    if (updateAClientKeyRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'updateAClientKeyRequest' when calling updateAClientKey");
    }

    // Path parameters
    String localVarPath = "/api/0/projects/{organization_slug}/{project_slug}/keys/{key_id}/"
            .replaceAll("\\{organization_slug}", apiClient.escapeString(organizationSlug))
            .replaceAll("\\{project_slug}", apiClient.escapeString(projectSlug))
            .replaceAll("\\{key_id}", apiClient.escapeString(keyId));

    String localVarAccept = apiClient.selectHeaderAccept("application/json");
    String localVarContentType = apiClient.selectHeaderContentType("application/json");
    String[] localVarAuthNames = new String[] {"auth_token"};
    GenericType<ListAProjectSClientKeys200ResponseInner> localVarReturnType = new GenericType<ListAProjectSClientKeys200ResponseInner>() {};
    return apiClient.invokeAPI("ProjectsApi.updateAClientKey", localVarPath, "PUT", new ArrayList<>(), updateAClientKeyRequest,
                               new LinkedHashMap<>(), new LinkedHashMap<>(), new LinkedHashMap<>(), localVarAccept, localVarContentType,
                               localVarAuthNames, localVarReturnType, false);
  }
  /**
   * 
   * Update various attributes and configurable settings for the given project.  Only supplied values are updated.
   * @param organizationSlug The slug of the organization the project belongs to. (required)
   * @param projectSlug The slug of the project to update. (required)
   * @param updateAProjectRequest  (optional)
   * @return RetrieveAProject200Response
   * @throws ApiException if fails to make API call
   * @http.response.details
     <table summary="Response Details" border="1">
       <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
       <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
       <tr><td> 400 </td><td> Bad Input </td><td>  -  </td></tr>
       <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
       <tr><td> 404 </td><td> Project not found </td><td>  -  </td></tr>
     </table>
   */
  public RetrieveAProject200Response updateAProject(String organizationSlug, String projectSlug, UpdateAProjectRequest updateAProjectRequest) throws ApiException {
    return updateAProjectWithHttpInfo(organizationSlug, projectSlug, updateAProjectRequest).getData();
  }

  /**
   * 
   * Update various attributes and configurable settings for the given project.  Only supplied values are updated.
   * @param organizationSlug The slug of the organization the project belongs to. (required)
   * @param projectSlug The slug of the project to update. (required)
   * @param updateAProjectRequest  (optional)
   * @return ApiResponse&lt;RetrieveAProject200Response&gt;
   * @throws ApiException if fails to make API call
   * @http.response.details
     <table summary="Response Details" border="1">
       <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
       <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
       <tr><td> 400 </td><td> Bad Input </td><td>  -  </td></tr>
       <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
       <tr><td> 404 </td><td> Project not found </td><td>  -  </td></tr>
     </table>
   */
  public ApiResponse<RetrieveAProject200Response> updateAProjectWithHttpInfo(String organizationSlug, String projectSlug, UpdateAProjectRequest updateAProjectRequest) throws ApiException {
    // Check required parameters
    if (organizationSlug == null) {
      throw new ApiException(400, "Missing the required parameter 'organizationSlug' when calling updateAProject");
    }
    if (projectSlug == null) {
      throw new ApiException(400, "Missing the required parameter 'projectSlug' when calling updateAProject");
    }

    // Path parameters
    String localVarPath = "/api/0/projects/{organization_slug}/{project_slug}/"
            .replaceAll("\\{organization_slug}", apiClient.escapeString(organizationSlug))
            .replaceAll("\\{project_slug}", apiClient.escapeString(projectSlug));

    String localVarAccept = apiClient.selectHeaderAccept("application/json");
    String localVarContentType = apiClient.selectHeaderContentType("application/json");
    String[] localVarAuthNames = new String[] {"auth_token"};
    GenericType<RetrieveAProject200Response> localVarReturnType = new GenericType<RetrieveAProject200Response>() {};
    return apiClient.invokeAPI("ProjectsApi.updateAProject", localVarPath, "PUT", new ArrayList<>(), updateAProjectRequest,
                               new LinkedHashMap<>(), new LinkedHashMap<>(), new LinkedHashMap<>(), localVarAccept, localVarContentType,
                               localVarAuthNames, localVarReturnType, false);
  }
  /**
   * 
   * Update a service hook.
   * @param organizationSlug The slug of the organization the client keys belong to. (required)
   * @param projectSlug The slug of the project the client keys belong to. (required)
   * @param hookId The GUID of the service hook. (required)
   * @param registerANewServiceHookRequest  (optional)
   * @return ListAProjectSServiceHooks200ResponseInner
   * @throws ApiException if fails to make API call
   * @http.response.details
     <table summary="Response Details" border="1">
       <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
       <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
       <tr><td> 400 </td><td> Bad Input </td><td>  -  </td></tr>
       <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
       <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
   */
  public ListAProjectSServiceHooks200ResponseInner updateAServiceHook(String organizationSlug, String projectSlug, String hookId, RegisterANewServiceHookRequest registerANewServiceHookRequest) throws ApiException {
    return updateAServiceHookWithHttpInfo(organizationSlug, projectSlug, hookId, registerANewServiceHookRequest).getData();
  }

  /**
   * 
   * Update a service hook.
   * @param organizationSlug The slug of the organization the client keys belong to. (required)
   * @param projectSlug The slug of the project the client keys belong to. (required)
   * @param hookId The GUID of the service hook. (required)
   * @param registerANewServiceHookRequest  (optional)
   * @return ApiResponse&lt;ListAProjectSServiceHooks200ResponseInner&gt;
   * @throws ApiException if fails to make API call
   * @http.response.details
     <table summary="Response Details" border="1">
       <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
       <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
       <tr><td> 400 </td><td> Bad Input </td><td>  -  </td></tr>
       <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
       <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
   */
  public ApiResponse<ListAProjectSServiceHooks200ResponseInner> updateAServiceHookWithHttpInfo(String organizationSlug, String projectSlug, String hookId, RegisterANewServiceHookRequest registerANewServiceHookRequest) throws ApiException {
    // Check required parameters
    if (organizationSlug == null) {
      throw new ApiException(400, "Missing the required parameter 'organizationSlug' when calling updateAServiceHook");
    }
    if (projectSlug == null) {
      throw new ApiException(400, "Missing the required parameter 'projectSlug' when calling updateAServiceHook");
    }
    if (hookId == null) {
      throw new ApiException(400, "Missing the required parameter 'hookId' when calling updateAServiceHook");
    }

    // Path parameters
    String localVarPath = "/api/0/projects/{organization_slug}/{project_slug}/hooks/{hook_id}/"
            .replaceAll("\\{organization_slug}", apiClient.escapeString(organizationSlug))
            .replaceAll("\\{project_slug}", apiClient.escapeString(projectSlug))
            .replaceAll("\\{hook_id}", apiClient.escapeString(hookId));

    String localVarAccept = apiClient.selectHeaderAccept("application/json");
    String localVarContentType = apiClient.selectHeaderContentType("application/json");
    String[] localVarAuthNames = new String[] {"auth_token"};
    GenericType<ListAProjectSServiceHooks200ResponseInner> localVarReturnType = new GenericType<ListAProjectSServiceHooks200ResponseInner>() {};
    return apiClient.invokeAPI("ProjectsApi.updateAServiceHook", localVarPath, "PUT", new ArrayList<>(), registerANewServiceHookRequest,
                               new LinkedHashMap<>(), new LinkedHashMap<>(), new LinkedHashMap<>(), localVarAccept, localVarContentType,
                               localVarAuthNames, localVarReturnType, false);
  }
  /**
   * 
   * Upload a new debug information file for the given release.  Unlike other API requests, files must be uploaded using the traditional multipart/form-data content-type.  The file uploaded is a zip archive of an Apple .dSYM folder which contains the individual debug images.  Uploading through this endpoint will create different files for the contained images.
   * @param organizationSlug The slug of the organization the project belongs to. (required)
   * @param projectSlug The slug of the project to upload a file to. (required)
   * @param _file The multipart encoded file. (required)
   * @throws ApiException if fails to make API call
   * @http.response.details
     <table summary="Response Details" border="1">
       <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
       <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
       <tr><td> 400 </td><td> Bad Input </td><td>  -  </td></tr>
       <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
       <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
   */
  public void uploadANewFile(String organizationSlug, String projectSlug, File _file) throws ApiException {
    uploadANewFileWithHttpInfo(organizationSlug, projectSlug, _file);
  }

  /**
   * 
   * Upload a new debug information file for the given release.  Unlike other API requests, files must be uploaded using the traditional multipart/form-data content-type.  The file uploaded is a zip archive of an Apple .dSYM folder which contains the individual debug images.  Uploading through this endpoint will create different files for the contained images.
   * @param organizationSlug The slug of the organization the project belongs to. (required)
   * @param projectSlug The slug of the project to upload a file to. (required)
   * @param _file The multipart encoded file. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   * @http.response.details
     <table summary="Response Details" border="1">
       <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
       <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
       <tr><td> 400 </td><td> Bad Input </td><td>  -  </td></tr>
       <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
       <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
   */
  public ApiResponse<Void> uploadANewFileWithHttpInfo(String organizationSlug, String projectSlug, File _file) throws ApiException {
    // Check required parameters
    if (organizationSlug == null) {
      throw new ApiException(400, "Missing the required parameter 'organizationSlug' when calling uploadANewFile");
    }
    if (projectSlug == null) {
      throw new ApiException(400, "Missing the required parameter 'projectSlug' when calling uploadANewFile");
    }
    if (_file == null) {
      throw new ApiException(400, "Missing the required parameter '_file' when calling uploadANewFile");
    }

    // Path parameters
    String localVarPath = "/api/0/projects/{organization_slug}/{project_slug}/files/dsyms/"
            .replaceAll("\\{organization_slug}", apiClient.escapeString(organizationSlug))
            .replaceAll("\\{project_slug}", apiClient.escapeString(projectSlug));

    // Form parameters
    Map<String, Object> localVarFormParams = new LinkedHashMap<>();
    localVarFormParams.put("file", _file);

    String localVarAccept = apiClient.selectHeaderAccept("application/json");
    String localVarContentType = apiClient.selectHeaderContentType("multipart/form-data");
    String[] localVarAuthNames = new String[] {"auth_token"};
    return apiClient.invokeAPI("ProjectsApi.uploadANewFile", localVarPath, "POST", new ArrayList<>(), null,
                               new LinkedHashMap<>(), new LinkedHashMap<>(), localVarFormParams, localVarAccept, localVarContentType,
                               localVarAuthNames, null, false);
  }
}
