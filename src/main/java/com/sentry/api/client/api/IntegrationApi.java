/*
 * API Reference
 * Sentry Public API
 *
 * The version of the OpenAPI document: v0
 * Contact: partners@sentry.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sentry.api.client.api;

import com.sentry.api.client.ApiCallback;
import com.sentry.api.client.ApiClient;
import com.sentry.api.client.ApiException;
import com.sentry.api.client.ApiResponse;
import com.sentry.api.client.Configuration;
import com.sentry.api.client.Pair;
import com.sentry.api.client.ProgressRequestBody;
import com.sentry.api.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.sentry.api.client.model.CreateAnExternalIssue200Response;
import com.sentry.api.client.model.CreateAnExternalIssueRequest;
import com.sentry.api.client.model.ListAnOrganizationSIntegrationPlatformInstallations200ResponseInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class IntegrationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IntegrationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IntegrationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createAnExternalIssue
     * @param uuid The uuid of the integration platform integration. (required)
     * @param createAnExternalIssueRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAnExternalIssueCall(String uuid, CreateAnExternalIssueRequest createAnExternalIssueRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAnExternalIssueRequest;

        // create path and map variables
        String localVarPath = "/api/0/sentry-app-installations/{uuid}/external-issues/"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAnExternalIssueValidateBeforeCall(String uuid, CreateAnExternalIssueRequest createAnExternalIssueRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createAnExternalIssue(Async)");
        }

        // verify the required parameter 'createAnExternalIssueRequest' is set
        if (createAnExternalIssueRequest == null) {
            throw new ApiException("Missing the required parameter 'createAnExternalIssueRequest' when calling createAnExternalIssue(Async)");
        }

        return createAnExternalIssueCall(uuid, createAnExternalIssueRequest, _callback);

    }

    /**
     * 
     * Create an external issue from an integration platform integration.
     * @param uuid The uuid of the integration platform integration. (required)
     * @param createAnExternalIssueRequest  (required)
     * @return CreateAnExternalIssue200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public CreateAnExternalIssue200Response createAnExternalIssue(String uuid, CreateAnExternalIssueRequest createAnExternalIssueRequest) throws ApiException {
        ApiResponse<CreateAnExternalIssue200Response> localVarResp = createAnExternalIssueWithHttpInfo(uuid, createAnExternalIssueRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Create an external issue from an integration platform integration.
     * @param uuid The uuid of the integration platform integration. (required)
     * @param createAnExternalIssueRequest  (required)
     * @return ApiResponse&lt;CreateAnExternalIssue200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAnExternalIssue200Response> createAnExternalIssueWithHttpInfo(String uuid, CreateAnExternalIssueRequest createAnExternalIssueRequest) throws ApiException {
        okhttp3.Call localVarCall = createAnExternalIssueValidateBeforeCall(uuid, createAnExternalIssueRequest, null);
        Type localVarReturnType = new TypeToken<CreateAnExternalIssue200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create an external issue from an integration platform integration.
     * @param uuid The uuid of the integration platform integration. (required)
     * @param createAnExternalIssueRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAnExternalIssueAsync(String uuid, CreateAnExternalIssueRequest createAnExternalIssueRequest, final ApiCallback<CreateAnExternalIssue200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAnExternalIssueValidateBeforeCall(uuid, createAnExternalIssueRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateAnExternalIssue200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAnExternalIssue
     * @param uuid The uuid of the integration platform integration. (required)
     * @param externalIssueId The id of the external issue. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> External issue not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAnExternalIssueCall(String uuid, String externalIssueId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/sentry-app-installations/{uuid}/external-issues/{external_issue_id}/"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()))
            .replace("{" + "external_issue_id" + "}", localVarApiClient.escapeString(externalIssueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAnExternalIssueValidateBeforeCall(String uuid, String externalIssueId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteAnExternalIssue(Async)");
        }

        // verify the required parameter 'externalIssueId' is set
        if (externalIssueId == null) {
            throw new ApiException("Missing the required parameter 'externalIssueId' when calling deleteAnExternalIssue(Async)");
        }

        return deleteAnExternalIssueCall(uuid, externalIssueId, _callback);

    }

    /**
     * 
     * Delete an external issue.
     * @param uuid The uuid of the integration platform integration. (required)
     * @param externalIssueId The id of the external issue. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> External issue not found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAnExternalIssue(String uuid, String externalIssueId) throws ApiException {
        deleteAnExternalIssueWithHttpInfo(uuid, externalIssueId);
    }

    /**
     * 
     * Delete an external issue.
     * @param uuid The uuid of the integration platform integration. (required)
     * @param externalIssueId The id of the external issue. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> External issue not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAnExternalIssueWithHttpInfo(String uuid, String externalIssueId) throws ApiException {
        okhttp3.Call localVarCall = deleteAnExternalIssueValidateBeforeCall(uuid, externalIssueId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete an external issue.
     * @param uuid The uuid of the integration platform integration. (required)
     * @param externalIssueId The id of the external issue. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> External issue not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAnExternalIssueAsync(String uuid, String externalIssueId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAnExternalIssueValidateBeforeCall(uuid, externalIssueId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAnOrganizationsIntegrationPlatformInstallations
     * @param organizationSlug The organization short name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAnOrganizationsIntegrationPlatformInstallationsCall(String organizationSlug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/organizations/{organization_slug}/sentry-app-installations/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAnOrganizationsIntegrationPlatformInstallationsValidateBeforeCall(String organizationSlug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling listAnOrganizationsIntegrationPlatformInstallations(Async)");
        }

        return listAnOrganizationsIntegrationPlatformInstallationsCall(organizationSlug, _callback);

    }

    /**
     * 
     * Return a list of integration platform installations for a given organization.
     * @param organizationSlug The organization short name. (required)
     * @return List&lt;ListAnOrganizationSIntegrationPlatformInstallations200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<ListAnOrganizationSIntegrationPlatformInstallations200ResponseInner> listAnOrganizationsIntegrationPlatformInstallations(String organizationSlug) throws ApiException {
        ApiResponse<List<ListAnOrganizationSIntegrationPlatformInstallations200ResponseInner>> localVarResp = listAnOrganizationsIntegrationPlatformInstallationsWithHttpInfo(organizationSlug);
        return localVarResp.getData();
    }

    /**
     * 
     * Return a list of integration platform installations for a given organization.
     * @param organizationSlug The organization short name. (required)
     * @return ApiResponse&lt;List&lt;ListAnOrganizationSIntegrationPlatformInstallations200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListAnOrganizationSIntegrationPlatformInstallations200ResponseInner>> listAnOrganizationsIntegrationPlatformInstallationsWithHttpInfo(String organizationSlug) throws ApiException {
        okhttp3.Call localVarCall = listAnOrganizationsIntegrationPlatformInstallationsValidateBeforeCall(organizationSlug, null);
        Type localVarReturnType = new TypeToken<List<ListAnOrganizationSIntegrationPlatformInstallations200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return a list of integration platform installations for a given organization.
     * @param organizationSlug The organization short name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAnOrganizationsIntegrationPlatformInstallationsAsync(String organizationSlug, final ApiCallback<List<ListAnOrganizationSIntegrationPlatformInstallations200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAnOrganizationsIntegrationPlatformInstallationsValidateBeforeCall(organizationSlug, _callback);
        Type localVarReturnType = new TypeToken<List<ListAnOrganizationSIntegrationPlatformInstallations200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
