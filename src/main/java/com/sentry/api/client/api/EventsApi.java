/*
 * API Reference
 * Sentry Public API
 *
 * The version of the OpenAPI document: v0
 * Contact: partners@sentry.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sentry.api.client.api;

import com.sentry.api.client.ApiCallback;
import com.sentry.api.client.ApiClient;
import com.sentry.api.client.ApiException;
import com.sentry.api.client.ApiResponse;
import com.sentry.api.client.Configuration;
import com.sentry.api.client.Pair;
import com.sentry.api.client.ProgressRequestBody;
import com.sentry.api.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.sentry.api.client.model.BulkMutateAListOfIssues200Response;
import com.sentry.api.client.model.BulkMutateAListOfIssuesRequest;
import com.sentry.api.client.model.DebugIssuesRelatedToSourceMapsForAGivenEvent200Response;
import com.sentry.api.client.model.ListAProjectSEvents200ResponseInner;
import com.sentry.api.client.model.ListAProjectSIssues200ResponseInner;
import com.sentry.api.client.model.ListATagSValuesRelatedToAnIssue200ResponseInner;
import com.sentry.api.client.model.ListAnIssueSHashes200ResponseInner;
import com.sentry.api.client.model.RetrieveAnEventForAProject200Response;
import com.sentry.api.client.model.RetrieveAnIssue200Response;
import com.sentry.api.client.model.RetrieveTagDetails200Response;
import java.util.UUID;
import com.sentry.api.client.model.UpdateAnIssue200Response;
import com.sentry.api.client.model.UpdateAnIssueRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import jakarta.ws.rs.core.GenericType;

public class EventsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EventsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EventsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for bulkMutateAListOfIssues
     * @param organizationSlug The slug of the organization the issues belong to. (required)
     * @param projectSlug The slug of the project the issues belong to. (required)
     * @param bulkMutateAListOfIssuesRequest  (required)
     * @param id A list of IDs of the issues to be mutated. This parameter shall be repeated for each issue. It is optional only if a status is mutated in which case an implicit update all is assumed. (optional)
     * @param status Optionally limits the query to issues of the specified status. Valid values are &#x60;\&quot;resolved\&quot;&#x60;, &#x60;\&quot;unresolved\&quot;&#x60;, and &#x60;\&quot;ignored\&quot;&#x60;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Input </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkMutateAListOfIssuesCall(String organizationSlug, String projectSlug, BulkMutateAListOfIssuesRequest bulkMutateAListOfIssuesRequest, Integer id, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bulkMutateAListOfIssuesRequest;

        // create path and map variables
        String localVarPath = "/api/0/projects/{organization_slug}/{project_slug}/issues/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkMutateAListOfIssuesValidateBeforeCall(String organizationSlug, String projectSlug, BulkMutateAListOfIssuesRequest bulkMutateAListOfIssuesRequest, Integer id, String status, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling bulkMutateAListOfIssues(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling bulkMutateAListOfIssues(Async)");
        }

        // verify the required parameter 'bulkMutateAListOfIssuesRequest' is set
        if (bulkMutateAListOfIssuesRequest == null) {
            throw new ApiException("Missing the required parameter 'bulkMutateAListOfIssuesRequest' when calling bulkMutateAListOfIssues(Async)");
        }

        return bulkMutateAListOfIssuesCall(organizationSlug, projectSlug, bulkMutateAListOfIssuesRequest, id, status, _callback);

    }

    /**
     * 
     * Bulk mutate various attributes on issues.  The list of issues to modify is given through the &#x60;id&#x60; query parameter.  It is repeated for each issue that should be modified.  - For non-status updates, the &#x60;id&#x60; query parameter is required. - For status updates, the &#x60;id&#x60; query parameter may be omitted for a batch \&quot;update all\&quot; query. - An optional &#x60;status&#x60; query parameter may be used to restrict mutations to only events with the given status.  The following attributes can be modified and are supplied as JSON object in the body:  If any ids are out of scope this operation will succeed without any data mutation.
     * @param organizationSlug The slug of the organization the issues belong to. (required)
     * @param projectSlug The slug of the project the issues belong to. (required)
     * @param bulkMutateAListOfIssuesRequest  (required)
     * @param id A list of IDs of the issues to be mutated. This parameter shall be repeated for each issue. It is optional only if a status is mutated in which case an implicit update all is assumed. (optional)
     * @param status Optionally limits the query to issues of the specified status. Valid values are &#x60;\&quot;resolved\&quot;&#x60;, &#x60;\&quot;unresolved\&quot;&#x60;, and &#x60;\&quot;ignored\&quot;&#x60;. (optional)
     * @return BulkMutateAListOfIssues200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Input </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
     */
    public BulkMutateAListOfIssues200Response bulkMutateAListOfIssues(String organizationSlug, String projectSlug, BulkMutateAListOfIssuesRequest bulkMutateAListOfIssuesRequest, Integer id, String status) throws ApiException {
        ApiResponse<BulkMutateAListOfIssues200Response> localVarResp = bulkMutateAListOfIssuesWithHttpInfo(organizationSlug, projectSlug, bulkMutateAListOfIssuesRequest, id, status);
        return localVarResp.getData();
    }

    /**
     * 
     * Bulk mutate various attributes on issues.  The list of issues to modify is given through the &#x60;id&#x60; query parameter.  It is repeated for each issue that should be modified.  - For non-status updates, the &#x60;id&#x60; query parameter is required. - For status updates, the &#x60;id&#x60; query parameter may be omitted for a batch \&quot;update all\&quot; query. - An optional &#x60;status&#x60; query parameter may be used to restrict mutations to only events with the given status.  The following attributes can be modified and are supplied as JSON object in the body:  If any ids are out of scope this operation will succeed without any data mutation.
     * @param organizationSlug The slug of the organization the issues belong to. (required)
     * @param projectSlug The slug of the project the issues belong to. (required)
     * @param bulkMutateAListOfIssuesRequest  (required)
     * @param id A list of IDs of the issues to be mutated. This parameter shall be repeated for each issue. It is optional only if a status is mutated in which case an implicit update all is assumed. (optional)
     * @param status Optionally limits the query to issues of the specified status. Valid values are &#x60;\&quot;resolved\&quot;&#x60;, &#x60;\&quot;unresolved\&quot;&#x60;, and &#x60;\&quot;ignored\&quot;&#x60;. (optional)
     * @return ApiResponse&lt;BulkMutateAListOfIssues200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Input </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BulkMutateAListOfIssues200Response> bulkMutateAListOfIssuesWithHttpInfo(String organizationSlug, String projectSlug, BulkMutateAListOfIssuesRequest bulkMutateAListOfIssuesRequest, Integer id, String status) throws ApiException {
        okhttp3.Call localVarCall = bulkMutateAListOfIssuesValidateBeforeCall(organizationSlug, projectSlug, bulkMutateAListOfIssuesRequest, id, status, null);
        Type localVarReturnType = new TypeToken<BulkMutateAListOfIssues200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Bulk mutate various attributes on issues.  The list of issues to modify is given through the &#x60;id&#x60; query parameter.  It is repeated for each issue that should be modified.  - For non-status updates, the &#x60;id&#x60; query parameter is required. - For status updates, the &#x60;id&#x60; query parameter may be omitted for a batch \&quot;update all\&quot; query. - An optional &#x60;status&#x60; query parameter may be used to restrict mutations to only events with the given status.  The following attributes can be modified and are supplied as JSON object in the body:  If any ids are out of scope this operation will succeed without any data mutation.
     * @param organizationSlug The slug of the organization the issues belong to. (required)
     * @param projectSlug The slug of the project the issues belong to. (required)
     * @param bulkMutateAListOfIssuesRequest  (required)
     * @param id A list of IDs of the issues to be mutated. This parameter shall be repeated for each issue. It is optional only if a status is mutated in which case an implicit update all is assumed. (optional)
     * @param status Optionally limits the query to issues of the specified status. Valid values are &#x60;\&quot;resolved\&quot;&#x60;, &#x60;\&quot;unresolved\&quot;&#x60;, and &#x60;\&quot;ignored\&quot;&#x60;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Input </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkMutateAListOfIssuesAsync(String organizationSlug, String projectSlug, BulkMutateAListOfIssuesRequest bulkMutateAListOfIssuesRequest, Integer id, String status, final ApiCallback<BulkMutateAListOfIssues200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkMutateAListOfIssuesValidateBeforeCall(organizationSlug, projectSlug, bulkMutateAListOfIssuesRequest, id, status, _callback);
        Type localVarReturnType = new TypeToken<BulkMutateAListOfIssues200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bulkRemoveAListOfIssues
     * @param organizationSlug The slug of the organization the issues belong to. (required)
     * @param projectSlug The slug of the project the issues belong to. (required)
     * @param id A list of IDs of the issues to be removed. This parameter shall be repeated for each issue. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Project not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkRemoveAListOfIssuesCall(String organizationSlug, String projectSlug, Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/projects/{organization_slug}/{project_slug}/issues/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkRemoveAListOfIssuesValidateBeforeCall(String organizationSlug, String projectSlug, Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling bulkRemoveAListOfIssues(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling bulkRemoveAListOfIssues(Async)");
        }

        return bulkRemoveAListOfIssuesCall(organizationSlug, projectSlug, id, _callback);

    }

    /**
     * 
     * Permanently remove the given issues. The list of issues to modify is given through the &#x60;id&#x60; query parameter.  It is repeated for each issue that should be removed.  Only queries by &#39;id&#39; are accepted.  If any ids are out of scope this operation will succeed without any data mutation.
     * @param organizationSlug The slug of the organization the issues belong to. (required)
     * @param projectSlug The slug of the project the issues belong to. (required)
     * @param id A list of IDs of the issues to be removed. This parameter shall be repeated for each issue. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Project not found </td><td>  -  </td></tr>
     </table>
     */
    public void bulkRemoveAListOfIssues(String organizationSlug, String projectSlug, Integer id) throws ApiException {
        bulkRemoveAListOfIssuesWithHttpInfo(organizationSlug, projectSlug, id);
    }

    /**
     * 
     * Permanently remove the given issues. The list of issues to modify is given through the &#x60;id&#x60; query parameter.  It is repeated for each issue that should be removed.  Only queries by &#39;id&#39; are accepted.  If any ids are out of scope this operation will succeed without any data mutation.
     * @param organizationSlug The slug of the organization the issues belong to. (required)
     * @param projectSlug The slug of the project the issues belong to. (required)
     * @param id A list of IDs of the issues to be removed. This parameter shall be repeated for each issue. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Project not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> bulkRemoveAListOfIssuesWithHttpInfo(String organizationSlug, String projectSlug, Integer id) throws ApiException {
        okhttp3.Call localVarCall = bulkRemoveAListOfIssuesValidateBeforeCall(organizationSlug, projectSlug, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Permanently remove the given issues. The list of issues to modify is given through the &#x60;id&#x60; query parameter.  It is repeated for each issue that should be removed.  Only queries by &#39;id&#39; are accepted.  If any ids are out of scope this operation will succeed without any data mutation.
     * @param organizationSlug The slug of the organization the issues belong to. (required)
     * @param projectSlug The slug of the project the issues belong to. (required)
     * @param id A list of IDs of the issues to be removed. This parameter shall be repeated for each issue. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Project not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkRemoveAListOfIssuesAsync(String organizationSlug, String projectSlug, Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkRemoveAListOfIssuesValidateBeforeCall(organizationSlug, projectSlug, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for debugIssuesRelatedToSourceMapsForAGivenEvent
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param projectSlug The slug of the project the resource belongs to. (required)
     * @param eventId The id of the event (required)
     * @param frameIdx Index of the frame that should be used for source map resolution. (required)
     * @param exceptionIdx Index of the exception that should be used for source map resolution. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call debugIssuesRelatedToSourceMapsForAGivenEventCall(String organizationSlug, String projectSlug, UUID eventId, Integer frameIdx, Integer exceptionIdx, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/projects/{organization_slug}/{project_slug}/events/{event_id}/source-map-debug/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()))
            .replace("{" + "event_id" + "}", localVarApiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (frameIdx != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("frame_idx", frameIdx));
        }

        if (exceptionIdx != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exception_idx", exceptionIdx));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call debugIssuesRelatedToSourceMapsForAGivenEventValidateBeforeCall(String organizationSlug, String projectSlug, UUID eventId, Integer frameIdx, Integer exceptionIdx, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling debugIssuesRelatedToSourceMapsForAGivenEvent(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling debugIssuesRelatedToSourceMapsForAGivenEvent(Async)");
        }

        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling debugIssuesRelatedToSourceMapsForAGivenEvent(Async)");
        }

        // verify the required parameter 'frameIdx' is set
        if (frameIdx == null) {
            throw new ApiException("Missing the required parameter 'frameIdx' when calling debugIssuesRelatedToSourceMapsForAGivenEvent(Async)");
        }

        // verify the required parameter 'exceptionIdx' is set
        if (exceptionIdx == null) {
            throw new ApiException("Missing the required parameter 'exceptionIdx' when calling debugIssuesRelatedToSourceMapsForAGivenEvent(Async)");
        }

        return debugIssuesRelatedToSourceMapsForAGivenEventCall(organizationSlug, projectSlug, eventId, frameIdx, exceptionIdx, _callback);

    }

    /**
     * 
     * Retrieve information about source maps for a given event. &#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60; Return a list of source map errors for a given event.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param projectSlug The slug of the project the resource belongs to. (required)
     * @param eventId The id of the event (required)
     * @param frameIdx Index of the frame that should be used for source map resolution. (required)
     * @param exceptionIdx Index of the exception that should be used for source map resolution. (required)
     * @return DebugIssuesRelatedToSourceMapsForAGivenEvent200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public DebugIssuesRelatedToSourceMapsForAGivenEvent200Response debugIssuesRelatedToSourceMapsForAGivenEvent(String organizationSlug, String projectSlug, UUID eventId, Integer frameIdx, Integer exceptionIdx) throws ApiException {
        ApiResponse<DebugIssuesRelatedToSourceMapsForAGivenEvent200Response> localVarResp = debugIssuesRelatedToSourceMapsForAGivenEventWithHttpInfo(organizationSlug, projectSlug, eventId, frameIdx, exceptionIdx);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve information about source maps for a given event. &#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60; Return a list of source map errors for a given event.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param projectSlug The slug of the project the resource belongs to. (required)
     * @param eventId The id of the event (required)
     * @param frameIdx Index of the frame that should be used for source map resolution. (required)
     * @param exceptionIdx Index of the exception that should be used for source map resolution. (required)
     * @return ApiResponse&lt;DebugIssuesRelatedToSourceMapsForAGivenEvent200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DebugIssuesRelatedToSourceMapsForAGivenEvent200Response> debugIssuesRelatedToSourceMapsForAGivenEventWithHttpInfo(String organizationSlug, String projectSlug, UUID eventId, Integer frameIdx, Integer exceptionIdx) throws ApiException {
        okhttp3.Call localVarCall = debugIssuesRelatedToSourceMapsForAGivenEventValidateBeforeCall(organizationSlug, projectSlug, eventId, frameIdx, exceptionIdx, null);
        Type localVarReturnType = new TypeToken<DebugIssuesRelatedToSourceMapsForAGivenEvent200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve information about source maps for a given event. &#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60; Return a list of source map errors for a given event.
     * @param organizationSlug The slug of the organization the resource belongs to. (required)
     * @param projectSlug The slug of the project the resource belongs to. (required)
     * @param eventId The id of the event (required)
     * @param frameIdx Index of the frame that should be used for source map resolution. (required)
     * @param exceptionIdx Index of the exception that should be used for source map resolution. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call debugIssuesRelatedToSourceMapsForAGivenEventAsync(String organizationSlug, String projectSlug, UUID eventId, Integer frameIdx, Integer exceptionIdx, final ApiCallback<DebugIssuesRelatedToSourceMapsForAGivenEvent200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = debugIssuesRelatedToSourceMapsForAGivenEventValidateBeforeCall(organizationSlug, projectSlug, eventId, frameIdx, exceptionIdx, _callback);
        Type localVarReturnType = new TypeToken<DebugIssuesRelatedToSourceMapsForAGivenEvent200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAProjectsEvents
     * @param organizationSlug The slug of the organization the groups belong to. (required)
     * @param projectSlug The slug of the project the groups belong to. (required)
     * @param full If this is set to true then the event payload will include the full event body, including the stacktrace.  Set to true to enable. (optional)
     * @param cursor A pointer to the last object fetched and its sort order; used to retrieve the next or previous results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAProjectsEventsCall(String organizationSlug, String projectSlug, Boolean full, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/projects/{organization_slug}/{project_slug}/events/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (full != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("full", full));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAProjectsEventsValidateBeforeCall(String organizationSlug, String projectSlug, Boolean full, String cursor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling listAProjectsEvents(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling listAProjectsEvents(Async)");
        }

        return listAProjectsEventsCall(organizationSlug, projectSlug, full, cursor, _callback);

    }

    /**
     * 
     * Return a list of events bound to a project.
     * @param organizationSlug The slug of the organization the groups belong to. (required)
     * @param projectSlug The slug of the project the groups belong to. (required)
     * @param full If this is set to true then the event payload will include the full event body, including the stacktrace.  Set to true to enable. (optional)
     * @param cursor A pointer to the last object fetched and its sort order; used to retrieve the next or previous results. (optional)
     * @return List&lt;ListAProjectSEvents200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public List<ListAProjectSEvents200ResponseInner> listAProjectsEvents(String organizationSlug, String projectSlug, Boolean full, String cursor) throws ApiException {
        ApiResponse<List<ListAProjectSEvents200ResponseInner>> localVarResp = listAProjectsEventsWithHttpInfo(organizationSlug, projectSlug, full, cursor);
        return localVarResp.getData();
    }

    /**
     * 
     * Return a list of events bound to a project.
     * @param organizationSlug The slug of the organization the groups belong to. (required)
     * @param projectSlug The slug of the project the groups belong to. (required)
     * @param full If this is set to true then the event payload will include the full event body, including the stacktrace.  Set to true to enable. (optional)
     * @param cursor A pointer to the last object fetched and its sort order; used to retrieve the next or previous results. (optional)
     * @return ApiResponse&lt;List&lt;ListAProjectSEvents200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListAProjectSEvents200ResponseInner>> listAProjectsEventsWithHttpInfo(String organizationSlug, String projectSlug, Boolean full, String cursor) throws ApiException {
        okhttp3.Call localVarCall = listAProjectsEventsValidateBeforeCall(organizationSlug, projectSlug, full, cursor, null);
        Type localVarReturnType = new TypeToken<List<ListAProjectSEvents200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return a list of events bound to a project.
     * @param organizationSlug The slug of the organization the groups belong to. (required)
     * @param projectSlug The slug of the project the groups belong to. (required)
     * @param full If this is set to true then the event payload will include the full event body, including the stacktrace.  Set to true to enable. (optional)
     * @param cursor A pointer to the last object fetched and its sort order; used to retrieve the next or previous results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAProjectsEventsAsync(String organizationSlug, String projectSlug, Boolean full, String cursor, final ApiCallback<List<ListAProjectSEvents200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAProjectsEventsValidateBeforeCall(organizationSlug, projectSlug, full, cursor, _callback);
        Type localVarReturnType = new TypeToken<List<ListAProjectSEvents200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAProjectsIssues
     * @param organizationSlug The slug of the organization the issues belong to. (required)
     * @param projectSlug The slug of the project the issues belong to. (required)
     * @param statsPeriod An optional stat period (can be one of &#x60;\&quot;24h\&quot;&#x60;, &#x60;\&quot;14d\&quot;&#x60;, and &#x60;\&quot;\&quot;&#x60;). (optional)
     * @param shortIdLookup If this is set to true then short IDs are looked up by this function as well. This can cause the return value of the function to return an event issue of a different project which is why this is an opt-in. Set to 1 to enable. (optional)
     * @param query An optional Sentry structured search query. If not provided an implied &#x60;\&quot;is:unresolved\&quot;&#x60; is assumed. (optional)
     * @param cursor A pointer to the last object fetched and its sort order; used to retrieve the next or previous results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAProjectsIssuesCall(String organizationSlug, String projectSlug, String statsPeriod, Boolean shortIdLookup, String query, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/projects/{organization_slug}/{project_slug}/issues/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (statsPeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("statsPeriod", statsPeriod));
        }

        if (shortIdLookup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shortIdLookup", shortIdLookup));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAProjectsIssuesValidateBeforeCall(String organizationSlug, String projectSlug, String statsPeriod, Boolean shortIdLookup, String query, String cursor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling listAProjectsIssues(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling listAProjectsIssues(Async)");
        }

        return listAProjectsIssuesCall(organizationSlug, projectSlug, statsPeriod, shortIdLookup, query, cursor, _callback);

    }

    /**
     * 
     * Return a list of issues (groups) bound to a project.  All parameters are supplied as query string parameters.    A default query of &#x60;&#x60;is:unresolved&#x60;&#x60; is applied. To return results with other statuses send an new query value (i.e. &#x60;&#x60;?query&#x3D;&#x60;&#x60; for all results).  The &#x60;&#x60;statsPeriod&#x60;&#x60; parameter can be used to select the timeline stats which should be present. Possible values are: &#x60;&#x60;\&quot;\&quot;&#x60;&#x60; (disable),&#x60;&#x60;\&quot;24h\&quot;&#x60;&#x60;, &#x60;&#x60;\&quot;14d\&quot;&#x60;&#x60;
     * @param organizationSlug The slug of the organization the issues belong to. (required)
     * @param projectSlug The slug of the project the issues belong to. (required)
     * @param statsPeriod An optional stat period (can be one of &#x60;\&quot;24h\&quot;&#x60;, &#x60;\&quot;14d\&quot;&#x60;, and &#x60;\&quot;\&quot;&#x60;). (optional)
     * @param shortIdLookup If this is set to true then short IDs are looked up by this function as well. This can cause the return value of the function to return an event issue of a different project which is why this is an opt-in. Set to 1 to enable. (optional)
     * @param query An optional Sentry structured search query. If not provided an implied &#x60;\&quot;is:unresolved\&quot;&#x60; is assumed. (optional)
     * @param cursor A pointer to the last object fetched and its sort order; used to retrieve the next or previous results. (optional)
     * @return List&lt;ListAProjectSIssues200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public List<ListAProjectSIssues200ResponseInner> listAProjectsIssues(String organizationSlug, String projectSlug, String statsPeriod, Boolean shortIdLookup, String query, String cursor) throws ApiException {
        ApiResponse<List<ListAProjectSIssues200ResponseInner>> localVarResp = listAProjectsIssuesWithHttpInfo(organizationSlug, projectSlug, statsPeriod, shortIdLookup, query, cursor);
        return localVarResp.getData();
    }

    /**
     * 
     * Return a list of issues (groups) bound to a project.  All parameters are supplied as query string parameters.    A default query of &#x60;&#x60;is:unresolved&#x60;&#x60; is applied. To return results with other statuses send an new query value (i.e. &#x60;&#x60;?query&#x3D;&#x60;&#x60; for all results).  The &#x60;&#x60;statsPeriod&#x60;&#x60; parameter can be used to select the timeline stats which should be present. Possible values are: &#x60;&#x60;\&quot;\&quot;&#x60;&#x60; (disable),&#x60;&#x60;\&quot;24h\&quot;&#x60;&#x60;, &#x60;&#x60;\&quot;14d\&quot;&#x60;&#x60;
     * @param organizationSlug The slug of the organization the issues belong to. (required)
     * @param projectSlug The slug of the project the issues belong to. (required)
     * @param statsPeriod An optional stat period (can be one of &#x60;\&quot;24h\&quot;&#x60;, &#x60;\&quot;14d\&quot;&#x60;, and &#x60;\&quot;\&quot;&#x60;). (optional)
     * @param shortIdLookup If this is set to true then short IDs are looked up by this function as well. This can cause the return value of the function to return an event issue of a different project which is why this is an opt-in. Set to 1 to enable. (optional)
     * @param query An optional Sentry structured search query. If not provided an implied &#x60;\&quot;is:unresolved\&quot;&#x60; is assumed. (optional)
     * @param cursor A pointer to the last object fetched and its sort order; used to retrieve the next or previous results. (optional)
     * @return ApiResponse&lt;List&lt;ListAProjectSIssues200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListAProjectSIssues200ResponseInner>> listAProjectsIssuesWithHttpInfo(String organizationSlug, String projectSlug, String statsPeriod, Boolean shortIdLookup, String query, String cursor) throws ApiException {
        okhttp3.Call localVarCall = listAProjectsIssuesValidateBeforeCall(organizationSlug, projectSlug, statsPeriod, shortIdLookup, query, cursor, null);
        Type localVarReturnType = new TypeToken<List<ListAProjectSIssues200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return a list of issues (groups) bound to a project.  All parameters are supplied as query string parameters.    A default query of &#x60;&#x60;is:unresolved&#x60;&#x60; is applied. To return results with other statuses send an new query value (i.e. &#x60;&#x60;?query&#x3D;&#x60;&#x60; for all results).  The &#x60;&#x60;statsPeriod&#x60;&#x60; parameter can be used to select the timeline stats which should be present. Possible values are: &#x60;&#x60;\&quot;\&quot;&#x60;&#x60; (disable),&#x60;&#x60;\&quot;24h\&quot;&#x60;&#x60;, &#x60;&#x60;\&quot;14d\&quot;&#x60;&#x60;
     * @param organizationSlug The slug of the organization the issues belong to. (required)
     * @param projectSlug The slug of the project the issues belong to. (required)
     * @param statsPeriod An optional stat period (can be one of &#x60;\&quot;24h\&quot;&#x60;, &#x60;\&quot;14d\&quot;&#x60;, and &#x60;\&quot;\&quot;&#x60;). (optional)
     * @param shortIdLookup If this is set to true then short IDs are looked up by this function as well. This can cause the return value of the function to return an event issue of a different project which is why this is an opt-in. Set to 1 to enable. (optional)
     * @param query An optional Sentry structured search query. If not provided an implied &#x60;\&quot;is:unresolved\&quot;&#x60; is assumed. (optional)
     * @param cursor A pointer to the last object fetched and its sort order; used to retrieve the next or previous results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAProjectsIssuesAsync(String organizationSlug, String projectSlug, String statsPeriod, Boolean shortIdLookup, String query, String cursor, final ApiCallback<List<ListAProjectSIssues200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAProjectsIssuesValidateBeforeCall(organizationSlug, projectSlug, statsPeriod, shortIdLookup, query, cursor, _callback);
        Type localVarReturnType = new TypeToken<List<ListAProjectSIssues200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listATagsValuesRelatedToAnIssue
     * @param issueId The ID of the issue to retrieve. (required)
     * @param key The tag key to look the values up for. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listATagsValuesRelatedToAnIssueCall(String issueId, String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/issues/{issue_id}/tags/{key}/values/"
            .replace("{" + "issue_id" + "}", localVarApiClient.escapeString(issueId.toString()))
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listATagsValuesRelatedToAnIssueValidateBeforeCall(String issueId, String key, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issueId' is set
        if (issueId == null) {
            throw new ApiException("Missing the required parameter 'issueId' when calling listATagsValuesRelatedToAnIssue(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling listATagsValuesRelatedToAnIssue(Async)");
        }

        return listATagsValuesRelatedToAnIssueCall(issueId, key, _callback);

    }

    /**
     * 
     * Returns details for given tag key related to an issue.   When [paginated](/api/pagination) can return at most 1000 values.
     * @param issueId The ID of the issue to retrieve. (required)
     * @param key The tag key to look the values up for. (required)
     * @return List&lt;ListATagSValuesRelatedToAnIssue200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public List<ListATagSValuesRelatedToAnIssue200ResponseInner> listATagsValuesRelatedToAnIssue(String issueId, String key) throws ApiException {
        ApiResponse<List<ListATagSValuesRelatedToAnIssue200ResponseInner>> localVarResp = listATagsValuesRelatedToAnIssueWithHttpInfo(issueId, key);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns details for given tag key related to an issue.   When [paginated](/api/pagination) can return at most 1000 values.
     * @param issueId The ID of the issue to retrieve. (required)
     * @param key The tag key to look the values up for. (required)
     * @return ApiResponse&lt;List&lt;ListATagSValuesRelatedToAnIssue200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListATagSValuesRelatedToAnIssue200ResponseInner>> listATagsValuesRelatedToAnIssueWithHttpInfo(String issueId, String key) throws ApiException {
        okhttp3.Call localVarCall = listATagsValuesRelatedToAnIssueValidateBeforeCall(issueId, key, null);
        Type localVarReturnType = new TypeToken<List<ListATagSValuesRelatedToAnIssue200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns details for given tag key related to an issue.   When [paginated](/api/pagination) can return at most 1000 values.
     * @param issueId The ID of the issue to retrieve. (required)
     * @param key The tag key to look the values up for. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listATagsValuesRelatedToAnIssueAsync(String issueId, String key, final ApiCallback<List<ListATagSValuesRelatedToAnIssue200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listATagsValuesRelatedToAnIssueValidateBeforeCall(issueId, key, _callback);
        Type localVarReturnType = new TypeToken<List<ListATagSValuesRelatedToAnIssue200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAnIssuesEvents
     * @param issueId The ID of the issue to retrieve. (required)
     * @param full If this is set to true then the event payload will include the full event body, including the stacktrace.  Set to true to enable. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAnIssuesEventsCall(String issueId, Boolean full, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/issues/{issue_id}/events/"
            .replace("{" + "issue_id" + "}", localVarApiClient.escapeString(issueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (full != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("full", full));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAnIssuesEventsValidateBeforeCall(String issueId, Boolean full, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issueId' is set
        if (issueId == null) {
            throw new ApiException("Missing the required parameter 'issueId' when calling listAnIssuesEvents(Async)");
        }

        return listAnIssuesEventsCall(issueId, full, _callback);

    }

    /**
     * 
     * This endpoint lists an issue&#39;s events.
     * @param issueId The ID of the issue to retrieve. (required)
     * @param full If this is set to true then the event payload will include the full event body, including the stacktrace.  Set to true to enable. (optional)
     * @return List&lt;ListAProjectSEvents200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public List<ListAProjectSEvents200ResponseInner> listAnIssuesEvents(String issueId, Boolean full) throws ApiException {
        ApiResponse<List<ListAProjectSEvents200ResponseInner>> localVarResp = listAnIssuesEventsWithHttpInfo(issueId, full);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint lists an issue&#39;s events.
     * @param issueId The ID of the issue to retrieve. (required)
     * @param full If this is set to true then the event payload will include the full event body, including the stacktrace.  Set to true to enable. (optional)
     * @return ApiResponse&lt;List&lt;ListAProjectSEvents200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListAProjectSEvents200ResponseInner>> listAnIssuesEventsWithHttpInfo(String issueId, Boolean full) throws ApiException {
        okhttp3.Call localVarCall = listAnIssuesEventsValidateBeforeCall(issueId, full, null);
        Type localVarReturnType = new TypeToken<List<ListAProjectSEvents200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint lists an issue&#39;s events.
     * @param issueId The ID of the issue to retrieve. (required)
     * @param full If this is set to true then the event payload will include the full event body, including the stacktrace.  Set to true to enable. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAnIssuesEventsAsync(String issueId, Boolean full, final ApiCallback<List<ListAProjectSEvents200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAnIssuesEventsValidateBeforeCall(issueId, full, _callback);
        Type localVarReturnType = new TypeToken<List<ListAProjectSEvents200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAnIssuesHashes
     * @param issueId The ID of the issue to retrieve. (required)
     * @param cursor A pointer to the last object fetched and its sort order; used to retrieve the next or previous results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAnIssuesHashesCall(String issueId, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/issues/{issue_id}/hashes/"
            .replace("{" + "issue_id" + "}", localVarApiClient.escapeString(issueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAnIssuesHashesValidateBeforeCall(String issueId, String cursor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issueId' is set
        if (issueId == null) {
            throw new ApiException("Missing the required parameter 'issueId' when calling listAnIssuesHashes(Async)");
        }

        return listAnIssuesHashesCall(issueId, cursor, _callback);

    }

    /**
     * 
     * This endpoint lists an issue&#39;s hashes, which are the generated checksums used to aggregate individual events.
     * @param issueId The ID of the issue to retrieve. (required)
     * @param cursor A pointer to the last object fetched and its sort order; used to retrieve the next or previous results. (optional)
     * @return List&lt;ListAnIssueSHashes200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public List<ListAnIssueSHashes200ResponseInner> listAnIssuesHashes(String issueId, String cursor) throws ApiException {
        ApiResponse<List<ListAnIssueSHashes200ResponseInner>> localVarResp = listAnIssuesHashesWithHttpInfo(issueId, cursor);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint lists an issue&#39;s hashes, which are the generated checksums used to aggregate individual events.
     * @param issueId The ID of the issue to retrieve. (required)
     * @param cursor A pointer to the last object fetched and its sort order; used to retrieve the next or previous results. (optional)
     * @return ApiResponse&lt;List&lt;ListAnIssueSHashes200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListAnIssueSHashes200ResponseInner>> listAnIssuesHashesWithHttpInfo(String issueId, String cursor) throws ApiException {
        okhttp3.Call localVarCall = listAnIssuesHashesValidateBeforeCall(issueId, cursor, null);
        Type localVarReturnType = new TypeToken<List<ListAnIssueSHashes200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint lists an issue&#39;s hashes, which are the generated checksums used to aggregate individual events.
     * @param issueId The ID of the issue to retrieve. (required)
     * @param cursor A pointer to the last object fetched and its sort order; used to retrieve the next or previous results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAnIssuesHashesAsync(String issueId, String cursor, final ApiCallback<List<ListAnIssueSHashes200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAnIssuesHashesValidateBeforeCall(issueId, cursor, _callback);
        Type localVarReturnType = new TypeToken<List<ListAnIssueSHashes200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeAnIssue
     * @param issueId The ID of the issue to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeAnIssueCall(String issueId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/issues/{issue_id}/"
            .replace("{" + "issue_id" + "}", localVarApiClient.escapeString(issueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeAnIssueValidateBeforeCall(String issueId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issueId' is set
        if (issueId == null) {
            throw new ApiException("Missing the required parameter 'issueId' when calling removeAnIssue(Async)");
        }

        return removeAnIssueCall(issueId, _callback);

    }

    /**
     * 
     * Removes an individual issue.
     * @param issueId The ID of the issue to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
     */
    public void removeAnIssue(String issueId) throws ApiException {
        removeAnIssueWithHttpInfo(issueId);
    }

    /**
     * 
     * Removes an individual issue.
     * @param issueId The ID of the issue to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeAnIssueWithHttpInfo(String issueId) throws ApiException {
        okhttp3.Call localVarCall = removeAnIssueValidateBeforeCall(issueId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Removes an individual issue.
     * @param issueId The ID of the issue to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeAnIssueAsync(String issueId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeAnIssueValidateBeforeCall(issueId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveAnEventForAProject
     * @param organizationSlug The slug of the organization the event belongs to. (required)
     * @param projectSlug The slug of the project the event belongs to. (required)
     * @param eventId The ID of the event to retrieve. It is the hexadecimal ID as reported by the client. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAnEventForAProjectCall(String organizationSlug, String projectSlug, String eventId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/projects/{organization_slug}/{project_slug}/events/{event_id}/"
            .replace("{" + "organization_slug" + "}", localVarApiClient.escapeString(organizationSlug.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()))
            .replace("{" + "event_id" + "}", localVarApiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveAnEventForAProjectValidateBeforeCall(String organizationSlug, String projectSlug, String eventId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationSlug' is set
        if (organizationSlug == null) {
            throw new ApiException("Missing the required parameter 'organizationSlug' when calling retrieveAnEventForAProject(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling retrieveAnEventForAProject(Async)");
        }

        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling retrieveAnEventForAProject(Async)");
        }

        return retrieveAnEventForAProjectCall(organizationSlug, projectSlug, eventId, _callback);

    }

    /**
     * 
     * Return details on an individual event.
     * @param organizationSlug The slug of the organization the event belongs to. (required)
     * @param projectSlug The slug of the project the event belongs to. (required)
     * @param eventId The ID of the event to retrieve. It is the hexadecimal ID as reported by the client. (required)
     * @return RetrieveAnEventForAProject200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveAnEventForAProject200Response retrieveAnEventForAProject(String organizationSlug, String projectSlug, String eventId) throws ApiException {
        ApiResponse<RetrieveAnEventForAProject200Response> localVarResp = retrieveAnEventForAProjectWithHttpInfo(organizationSlug, projectSlug, eventId);
        return localVarResp.getData();
    }

    /**
     * 
     * Return details on an individual event.
     * @param organizationSlug The slug of the organization the event belongs to. (required)
     * @param projectSlug The slug of the project the event belongs to. (required)
     * @param eventId The ID of the event to retrieve. It is the hexadecimal ID as reported by the client. (required)
     * @return ApiResponse&lt;RetrieveAnEventForAProject200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveAnEventForAProject200Response> retrieveAnEventForAProjectWithHttpInfo(String organizationSlug, String projectSlug, String eventId) throws ApiException {
        okhttp3.Call localVarCall = retrieveAnEventForAProjectValidateBeforeCall(organizationSlug, projectSlug, eventId, null);
        Type localVarReturnType = new TypeToken<RetrieveAnEventForAProject200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return details on an individual event.
     * @param organizationSlug The slug of the organization the event belongs to. (required)
     * @param projectSlug The slug of the project the event belongs to. (required)
     * @param eventId The ID of the event to retrieve. It is the hexadecimal ID as reported by the client. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAnEventForAProjectAsync(String organizationSlug, String projectSlug, String eventId, final ApiCallback<RetrieveAnEventForAProject200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveAnEventForAProjectValidateBeforeCall(organizationSlug, projectSlug, eventId, _callback);
        Type localVarReturnType = new TypeToken<RetrieveAnEventForAProject200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveAnIssue
     * @param issueId The ID of the issue to retrieve. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAnIssueCall(String issueId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/issues/{issue_id}/"
            .replace("{" + "issue_id" + "}", localVarApiClient.escapeString(issueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveAnIssueValidateBeforeCall(String issueId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issueId' is set
        if (issueId == null) {
            throw new ApiException("Missing the required parameter 'issueId' when calling retrieveAnIssue(Async)");
        }

        return retrieveAnIssueCall(issueId, _callback);

    }

    /**
     * 
     * Return details on an individual issue. This returns the basic stats for the issue (title, last seen, first seen), some overall numbers (number of comments, user reports) as well as the summarized event data.
     * @param issueId The ID of the issue to retrieve. (required)
     * @return RetrieveAnIssue200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveAnIssue200Response retrieveAnIssue(String issueId) throws ApiException {
        ApiResponse<RetrieveAnIssue200Response> localVarResp = retrieveAnIssueWithHttpInfo(issueId);
        return localVarResp.getData();
    }

    /**
     * 
     * Return details on an individual issue. This returns the basic stats for the issue (title, last seen, first seen), some overall numbers (number of comments, user reports) as well as the summarized event data.
     * @param issueId The ID of the issue to retrieve. (required)
     * @return ApiResponse&lt;RetrieveAnIssue200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveAnIssue200Response> retrieveAnIssueWithHttpInfo(String issueId) throws ApiException {
        okhttp3.Call localVarCall = retrieveAnIssueValidateBeforeCall(issueId, null);
        Type localVarReturnType = new TypeToken<RetrieveAnIssue200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return details on an individual issue. This returns the basic stats for the issue (title, last seen, first seen), some overall numbers (number of comments, user reports) as well as the summarized event data.
     * @param issueId The ID of the issue to retrieve. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAnIssueAsync(String issueId, final ApiCallback<RetrieveAnIssue200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveAnIssueValidateBeforeCall(issueId, _callback);
        Type localVarReturnType = new TypeToken<RetrieveAnIssue200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveTagDetails
     * @param issueId The ID of the issue to retrieve. (required)
     * @param key The tag key to look the values up for. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveTagDetailsCall(String issueId, String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/issues/{issue_id}/tags/{key}/"
            .replace("{" + "issue_id" + "}", localVarApiClient.escapeString(issueId.toString()))
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveTagDetailsValidateBeforeCall(String issueId, String key, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issueId' is set
        if (issueId == null) {
            throw new ApiException("Missing the required parameter 'issueId' when calling retrieveTagDetails(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling retrieveTagDetails(Async)");
        }

        return retrieveTagDetailsCall(issueId, key, _callback);

    }

    /**
     * 
     * Returns details for given tag key related to an issue.
     * @param issueId The ID of the issue to retrieve. (required)
     * @param key The tag key to look the values up for. (required)
     * @return RetrieveTagDetails200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveTagDetails200Response retrieveTagDetails(String issueId, String key) throws ApiException {
        ApiResponse<RetrieveTagDetails200Response> localVarResp = retrieveTagDetailsWithHttpInfo(issueId, key);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns details for given tag key related to an issue.
     * @param issueId The ID of the issue to retrieve. (required)
     * @param key The tag key to look the values up for. (required)
     * @return ApiResponse&lt;RetrieveTagDetails200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveTagDetails200Response> retrieveTagDetailsWithHttpInfo(String issueId, String key) throws ApiException {
        okhttp3.Call localVarCall = retrieveTagDetailsValidateBeforeCall(issueId, key, null);
        Type localVarReturnType = new TypeToken<RetrieveTagDetails200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns details for given tag key related to an issue.
     * @param issueId The ID of the issue to retrieve. (required)
     * @param key The tag key to look the values up for. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveTagDetailsAsync(String issueId, String key, final ApiCallback<RetrieveTagDetails200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveTagDetailsValidateBeforeCall(issueId, key, _callback);
        Type localVarReturnType = new TypeToken<RetrieveTagDetails200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveTheLatestEventForAnIssue
     * @param issueId The ID of the issue. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveTheLatestEventForAnIssueCall(String issueId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/issues/{issue_id}/events/latest/"
            .replace("{" + "issue_id" + "}", localVarApiClient.escapeString(issueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveTheLatestEventForAnIssueValidateBeforeCall(String issueId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issueId' is set
        if (issueId == null) {
            throw new ApiException("Missing the required parameter 'issueId' when calling retrieveTheLatestEventForAnIssue(Async)");
        }

        return retrieveTheLatestEventForAnIssueCall(issueId, _callback);

    }

    /**
     * 
     * Retrieves the details of the latest event for an issue.
     * @param issueId The ID of the issue. (required)
     * @return RetrieveAnEventForAProject200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveAnEventForAProject200Response retrieveTheLatestEventForAnIssue(String issueId) throws ApiException {
        ApiResponse<RetrieveAnEventForAProject200Response> localVarResp = retrieveTheLatestEventForAnIssueWithHttpInfo(issueId);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the details of the latest event for an issue.
     * @param issueId The ID of the issue. (required)
     * @return ApiResponse&lt;RetrieveAnEventForAProject200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveAnEventForAProject200Response> retrieveTheLatestEventForAnIssueWithHttpInfo(String issueId) throws ApiException {
        okhttp3.Call localVarCall = retrieveTheLatestEventForAnIssueValidateBeforeCall(issueId, null);
        Type localVarReturnType = new TypeToken<RetrieveAnEventForAProject200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the details of the latest event for an issue.
     * @param issueId The ID of the issue. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveTheLatestEventForAnIssueAsync(String issueId, final ApiCallback<RetrieveAnEventForAProject200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveTheLatestEventForAnIssueValidateBeforeCall(issueId, _callback);
        Type localVarReturnType = new TypeToken<RetrieveAnEventForAProject200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveTheOldestEventForAnIssue
     * @param issueId The ID of the issue. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveTheOldestEventForAnIssueCall(String issueId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/0/issues/{issue_id}/events/oldest/"
            .replace("{" + "issue_id" + "}", localVarApiClient.escapeString(issueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveTheOldestEventForAnIssueValidateBeforeCall(String issueId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issueId' is set
        if (issueId == null) {
            throw new ApiException("Missing the required parameter 'issueId' when calling retrieveTheOldestEventForAnIssue(Async)");
        }

        return retrieveTheOldestEventForAnIssueCall(issueId, _callback);

    }

    /**
     * 
     * Retrieves the details of the oldest event for an issue.
     * @param issueId The ID of the issue. (required)
     * @return RetrieveAnEventForAProject200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveAnEventForAProject200Response retrieveTheOldestEventForAnIssue(String issueId) throws ApiException {
        ApiResponse<RetrieveAnEventForAProject200Response> localVarResp = retrieveTheOldestEventForAnIssueWithHttpInfo(issueId);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the details of the oldest event for an issue.
     * @param issueId The ID of the issue. (required)
     * @return ApiResponse&lt;RetrieveAnEventForAProject200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveAnEventForAProject200Response> retrieveTheOldestEventForAnIssueWithHttpInfo(String issueId) throws ApiException {
        okhttp3.Call localVarCall = retrieveTheOldestEventForAnIssueValidateBeforeCall(issueId, null);
        Type localVarReturnType = new TypeToken<RetrieveAnEventForAProject200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the details of the oldest event for an issue.
     * @param issueId The ID of the issue. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveTheOldestEventForAnIssueAsync(String issueId, final ApiCallback<RetrieveAnEventForAProject200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveTheOldestEventForAnIssueValidateBeforeCall(issueId, _callback);
        Type localVarReturnType = new TypeToken<RetrieveAnEventForAProject200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAnIssue
     * @param issueId The ID of the group to retrieve. (required)
     * @param updateAnIssueRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAnIssueCall(String issueId, UpdateAnIssueRequest updateAnIssueRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAnIssueRequest;

        // create path and map variables
        String localVarPath = "/api/0/issues/{issue_id}/"
            .replace("{" + "issue_id" + "}", localVarApiClient.escapeString(issueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAnIssueValidateBeforeCall(String issueId, UpdateAnIssueRequest updateAnIssueRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issueId' is set
        if (issueId == null) {
            throw new ApiException("Missing the required parameter 'issueId' when calling updateAnIssue(Async)");
        }

        // verify the required parameter 'updateAnIssueRequest' is set
        if (updateAnIssueRequest == null) {
            throw new ApiException("Missing the required parameter 'updateAnIssueRequest' when calling updateAnIssue(Async)");
        }

        return updateAnIssueCall(issueId, updateAnIssueRequest, _callback);

    }

    /**
     * 
     * Updates an individual issue&#39;s attributes.  Only the attributes submitted are modified.
     * @param issueId The ID of the group to retrieve. (required)
     * @param updateAnIssueRequest  (required)
     * @return UpdateAnIssue200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
     */
    public UpdateAnIssue200Response updateAnIssue(String issueId, UpdateAnIssueRequest updateAnIssueRequest) throws ApiException {
        ApiResponse<UpdateAnIssue200Response> localVarResp = updateAnIssueWithHttpInfo(issueId, updateAnIssueRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates an individual issue&#39;s attributes.  Only the attributes submitted are modified.
     * @param issueId The ID of the group to retrieve. (required)
     * @param updateAnIssueRequest  (required)
     * @return ApiResponse&lt;UpdateAnIssue200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateAnIssue200Response> updateAnIssueWithHttpInfo(String issueId, UpdateAnIssueRequest updateAnIssueRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAnIssueValidateBeforeCall(issueId, updateAnIssueRequest, null);
        Type localVarReturnType = new TypeToken<UpdateAnIssue200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an individual issue&#39;s attributes.  Only the attributes submitted are modified.
     * @param issueId The ID of the group to retrieve. (required)
     * @param updateAnIssueRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAnIssueAsync(String issueId, UpdateAnIssueRequest updateAnIssueRequest, final ApiCallback<UpdateAnIssue200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAnIssueValidateBeforeCall(issueId, updateAnIssueRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateAnIssue200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
