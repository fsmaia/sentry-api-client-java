/*
 * API Reference
 * Sentry Public API
 *
 * The version of the OpenAPI document: v0
 * Contact: partners@sentry.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sentry.api.client.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.sentry.api.client.model.ResolveAnEventID200ResponseEventContextsForbiddenErrorResponseJSON;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.sentry.api.client.JSON;


/**
 * ResolveAnEventID200ResponseEventContextsForbiddenError
 */
@JsonPropertyOrder({
  ResolveAnEventID200ResponseEventContextsForbiddenError.JSON_PROPERTY_STATUS,
  ResolveAnEventID200ResponseEventContextsForbiddenError.JSON_PROPERTY_STATUS_TEXT,
  ResolveAnEventID200ResponseEventContextsForbiddenError.JSON_PROPERTY_RESPONSE_J_S_O_N,
  ResolveAnEventID200ResponseEventContextsForbiddenError.JSON_PROPERTY_TYPE
})
@JsonTypeName("Resolve_an_Event_ID_200_response_event_contexts_ForbiddenError")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-16T15:22:58.941842Z[Etc/UTC]")
public class ResolveAnEventID200ResponseEventContextsForbiddenError {
  public static final String JSON_PROPERTY_STATUS = "status";
  private Integer status;

  public static final String JSON_PROPERTY_STATUS_TEXT = "statusText";
  private String statusText;

  public static final String JSON_PROPERTY_RESPONSE_J_S_O_N = "responseJSON";
  private ResolveAnEventID200ResponseEventContextsForbiddenErrorResponseJSON responseJSON;

  public static final String JSON_PROPERTY_TYPE = "type";
  private String type;

  public ResolveAnEventID200ResponseEventContextsForbiddenError() { 
  }

  public ResolveAnEventID200ResponseEventContextsForbiddenError status(Integer status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStatus(Integer status) {
    this.status = status;
  }


  public ResolveAnEventID200ResponseEventContextsForbiddenError statusText(String statusText) {
    this.statusText = statusText;
    return this;
  }

   /**
   * Get statusText
   * @return statusText
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STATUS_TEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getStatusText() {
    return statusText;
  }


  @JsonProperty(JSON_PROPERTY_STATUS_TEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStatusText(String statusText) {
    this.statusText = statusText;
  }


  public ResolveAnEventID200ResponseEventContextsForbiddenError responseJSON(ResolveAnEventID200ResponseEventContextsForbiddenErrorResponseJSON responseJSON) {
    this.responseJSON = responseJSON;
    return this;
  }

   /**
   * Get responseJSON
   * @return responseJSON
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RESPONSE_J_S_O_N)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ResolveAnEventID200ResponseEventContextsForbiddenErrorResponseJSON getResponseJSON() {
    return responseJSON;
  }


  @JsonProperty(JSON_PROPERTY_RESPONSE_J_S_O_N)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResponseJSON(ResolveAnEventID200ResponseEventContextsForbiddenErrorResponseJSON responseJSON) {
    this.responseJSON = responseJSON;
  }


  public ResolveAnEventID200ResponseEventContextsForbiddenError type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(String type) {
    this.type = type;
  }


  /**
   * Return true if this Resolve_an_Event_ID_200_response_event_contexts_ForbiddenError object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResolveAnEventID200ResponseEventContextsForbiddenError resolveAnEventID200ResponseEventContextsForbiddenError = (ResolveAnEventID200ResponseEventContextsForbiddenError) o;
    return Objects.equals(this.status, resolveAnEventID200ResponseEventContextsForbiddenError.status) &&
        Objects.equals(this.statusText, resolveAnEventID200ResponseEventContextsForbiddenError.statusText) &&
        Objects.equals(this.responseJSON, resolveAnEventID200ResponseEventContextsForbiddenError.responseJSON) &&
        Objects.equals(this.type, resolveAnEventID200ResponseEventContextsForbiddenError.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, statusText, responseJSON, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResolveAnEventID200ResponseEventContextsForbiddenError {\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusText: ").append(toIndentedString(statusText)).append("\n");
    sb.append("    responseJSON: ").append(toIndentedString(responseJSON)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

