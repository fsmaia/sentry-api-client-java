/*
 * API Reference
 * Sentry Public API
 *
 * The version of the OpenAPI document: v0
 * Contact: partners@sentry.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sentry.api.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.sentry.api.client.JSON;

/**
 * RetrieveCheckInsForAMonitor200ResponseInner
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-15T10:13:02.301928Z[Etc/UTC]")
public class RetrieveCheckInsForAMonitor200ResponseInner implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ENVIRONMENT = "environment";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT)
  private String environment;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Integer duration;

  public static final String SERIALIZED_NAME_DATE_CREATED = "dateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_ATTACHMENT_ID = "attachmentId";
  @SerializedName(SERIALIZED_NAME_ATTACHMENT_ID)
  private String attachmentId;

  public static final String SERIALIZED_NAME_EXPECTED_TIME = "expectedTime";
  @SerializedName(SERIALIZED_NAME_EXPECTED_TIME)
  private OffsetDateTime expectedTime;

  public static final String SERIALIZED_NAME_MONITOR_CONFIG = "monitorConfig";
  @SerializedName(SERIALIZED_NAME_MONITOR_CONFIG)
  private Object monitorConfig = null;

  public RetrieveCheckInsForAMonitor200ResponseInner() {
  }

  public RetrieveCheckInsForAMonitor200ResponseInner id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nonnull
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public RetrieveCheckInsForAMonitor200ResponseInner environment(String environment) {
    
    this.environment = environment;
    return this;
  }

   /**
   * Get environment
   * @return environment
  **/
  @jakarta.annotation.Nonnull
  public String getEnvironment() {
    return environment;
  }


  public void setEnvironment(String environment) {
    this.environment = environment;
  }


  public RetrieveCheckInsForAMonitor200ResponseInner status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @jakarta.annotation.Nonnull
  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public RetrieveCheckInsForAMonitor200ResponseInner duration(Integer duration) {
    
    this.duration = duration;
    return this;
  }

   /**
   * Get duration
   * @return duration
  **/
  @jakarta.annotation.Nonnull
  public Integer getDuration() {
    return duration;
  }


  public void setDuration(Integer duration) {
    this.duration = duration;
  }


  public RetrieveCheckInsForAMonitor200ResponseInner dateCreated(OffsetDateTime dateCreated) {
    
    this.dateCreated = dateCreated;
    return this;
  }

   /**
   * Get dateCreated
   * @return dateCreated
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }


  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public RetrieveCheckInsForAMonitor200ResponseInner attachmentId(String attachmentId) {
    
    this.attachmentId = attachmentId;
    return this;
  }

   /**
   * Get attachmentId
   * @return attachmentId
  **/
  @jakarta.annotation.Nonnull
  public String getAttachmentId() {
    return attachmentId;
  }


  public void setAttachmentId(String attachmentId) {
    this.attachmentId = attachmentId;
  }


  public RetrieveCheckInsForAMonitor200ResponseInner expectedTime(OffsetDateTime expectedTime) {
    
    this.expectedTime = expectedTime;
    return this;
  }

   /**
   * Get expectedTime
   * @return expectedTime
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getExpectedTime() {
    return expectedTime;
  }


  public void setExpectedTime(OffsetDateTime expectedTime) {
    this.expectedTime = expectedTime;
  }


  public RetrieveCheckInsForAMonitor200ResponseInner monitorConfig(Object monitorConfig) {
    
    this.monitorConfig = monitorConfig;
    return this;
  }

   /**
   * Get monitorConfig
   * @return monitorConfig
  **/
  @jakarta.annotation.Nullable
  public Object getMonitorConfig() {
    return monitorConfig;
  }


  public void setMonitorConfig(Object monitorConfig) {
    this.monitorConfig = monitorConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RetrieveCheckInsForAMonitor200ResponseInner retrieveCheckInsForAMonitor200ResponseInner = (RetrieveCheckInsForAMonitor200ResponseInner) o;
    return Objects.equals(this.id, retrieveCheckInsForAMonitor200ResponseInner.id) &&
        Objects.equals(this.environment, retrieveCheckInsForAMonitor200ResponseInner.environment) &&
        Objects.equals(this.status, retrieveCheckInsForAMonitor200ResponseInner.status) &&
        Objects.equals(this.duration, retrieveCheckInsForAMonitor200ResponseInner.duration) &&
        Objects.equals(this.dateCreated, retrieveCheckInsForAMonitor200ResponseInner.dateCreated) &&
        Objects.equals(this.attachmentId, retrieveCheckInsForAMonitor200ResponseInner.attachmentId) &&
        Objects.equals(this.expectedTime, retrieveCheckInsForAMonitor200ResponseInner.expectedTime) &&
        Objects.equals(this.monitorConfig, retrieveCheckInsForAMonitor200ResponseInner.monitorConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, environment, status, duration, dateCreated, attachmentId, expectedTime, monitorConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RetrieveCheckInsForAMonitor200ResponseInner {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    attachmentId: ").append(toIndentedString(attachmentId)).append("\n");
    sb.append("    expectedTime: ").append(toIndentedString(expectedTime)).append("\n");
    sb.append("    monitorConfig: ").append(toIndentedString(monitorConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("environment");
    openapiFields.add("status");
    openapiFields.add("duration");
    openapiFields.add("dateCreated");
    openapiFields.add("attachmentId");
    openapiFields.add("expectedTime");
    openapiFields.add("monitorConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("environment");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("duration");
    openapiRequiredFields.add("dateCreated");
    openapiRequiredFields.add("attachmentId");
    openapiRequiredFields.add("expectedTime");
    openapiRequiredFields.add("monitorConfig");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RetrieveCheckInsForAMonitor200ResponseInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!RetrieveCheckInsForAMonitor200ResponseInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RetrieveCheckInsForAMonitor200ResponseInner is not found in the empty JSON string", RetrieveCheckInsForAMonitor200ResponseInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!RetrieveCheckInsForAMonitor200ResponseInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RetrieveCheckInsForAMonitor200ResponseInner` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RetrieveCheckInsForAMonitor200ResponseInner.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("environment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `environment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("environment").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (!jsonObj.get("attachmentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attachmentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attachmentId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RetrieveCheckInsForAMonitor200ResponseInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RetrieveCheckInsForAMonitor200ResponseInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RetrieveCheckInsForAMonitor200ResponseInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RetrieveCheckInsForAMonitor200ResponseInner.class));

       return (TypeAdapter<T>) new TypeAdapter<RetrieveCheckInsForAMonitor200ResponseInner>() {
           @Override
           public void write(JsonWriter out, RetrieveCheckInsForAMonitor200ResponseInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RetrieveCheckInsForAMonitor200ResponseInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RetrieveCheckInsForAMonitor200ResponseInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RetrieveCheckInsForAMonitor200ResponseInner
  * @throws IOException if the JSON string is invalid with respect to RetrieveCheckInsForAMonitor200ResponseInner
  */
  public static RetrieveCheckInsForAMonitor200ResponseInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RetrieveCheckInsForAMonitor200ResponseInner.class);
  }

 /**
  * Convert an instance of RetrieveCheckInsForAMonitor200ResponseInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

