/*
 * API Reference
 * Sentry Public API
 *
 * The version of the OpenAPI document: v0
 * Contact: partners@sentry.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sentry.api.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.sentry.api.client.model.ListAnOrganizationSMembers200ResponseResourcesInnerEmailsInner;
import com.sentry.api.client.model.ListAnOrganizationSMembers200ResponseResourcesInnerName;
import com.sentry.api.client.model.QueryAnIndividualTeam200ResponseMeta;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.sentry.api.client.JSON;

/**
 * Conforming to the SCIM RFC, this represents a Sentry Org Member as a SCIM user object.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-16T12:28:08.282703Z[Etc/UTC]")
public class OrganizationMemberSCIM {
  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<String> schemas = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_USER_NAME = "userName";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  private String userName;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private ListAnOrganizationSMembers200ResponseResourcesInnerName name;

  public static final String SERIALIZED_NAME_EMAILS = "emails";
  @SerializedName(SERIALIZED_NAME_EMAILS)
  private List<ListAnOrganizationSMembers200ResponseResourcesInnerEmailsInner> emails = new ArrayList<>();

  public static final String SERIALIZED_NAME_META = "meta";
  @SerializedName(SERIALIZED_NAME_META)
  private QueryAnIndividualTeam200ResponseMeta meta;

  public static final String SERIALIZED_NAME_SENTRY_ORG_ROLE = "sentryOrgRole";
  @SerializedName(SERIALIZED_NAME_SENTRY_ORG_ROLE)
  private String sentryOrgRole;

  public OrganizationMemberSCIM() {
  }

  public OrganizationMemberSCIM active(Boolean active) {
    
    this.active = active;
    return this;
  }

   /**
   * Get active
   * @return active
  **/
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }


  public void setActive(Boolean active) {
    this.active = active;
  }


  public OrganizationMemberSCIM schemas(List<String> schemas) {
    
    this.schemas = schemas;
    return this;
  }

  public OrganizationMemberSCIM addSchemasItem(String schemasItem) {
    if (this.schemas == null) {
      this.schemas = new ArrayList<>();
    }
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nonnull
  public List<String> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<String> schemas) {
    this.schemas = schemas;
  }


  public OrganizationMemberSCIM id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public OrganizationMemberSCIM userName(String userName) {
    
    this.userName = userName;
    return this;
  }

   /**
   * Get userName
   * @return userName
  **/
  @javax.annotation.Nonnull
  public String getUserName() {
    return userName;
  }


  public void setUserName(String userName) {
    this.userName = userName;
  }


  public OrganizationMemberSCIM name(ListAnOrganizationSMembers200ResponseResourcesInnerName name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  public ListAnOrganizationSMembers200ResponseResourcesInnerName getName() {
    return name;
  }


  public void setName(ListAnOrganizationSMembers200ResponseResourcesInnerName name) {
    this.name = name;
  }


  public OrganizationMemberSCIM emails(List<ListAnOrganizationSMembers200ResponseResourcesInnerEmailsInner> emails) {
    
    this.emails = emails;
    return this;
  }

  public OrganizationMemberSCIM addEmailsItem(ListAnOrganizationSMembers200ResponseResourcesInnerEmailsInner emailsItem) {
    if (this.emails == null) {
      this.emails = new ArrayList<>();
    }
    this.emails.add(emailsItem);
    return this;
  }

   /**
   * Get emails
   * @return emails
  **/
  @javax.annotation.Nonnull
  public List<ListAnOrganizationSMembers200ResponseResourcesInnerEmailsInner> getEmails() {
    return emails;
  }


  public void setEmails(List<ListAnOrganizationSMembers200ResponseResourcesInnerEmailsInner> emails) {
    this.emails = emails;
  }


  public OrganizationMemberSCIM meta(QueryAnIndividualTeam200ResponseMeta meta) {
    
    this.meta = meta;
    return this;
  }

   /**
   * Get meta
   * @return meta
  **/
  @javax.annotation.Nonnull
  public QueryAnIndividualTeam200ResponseMeta getMeta() {
    return meta;
  }


  public void setMeta(QueryAnIndividualTeam200ResponseMeta meta) {
    this.meta = meta;
  }


  public OrganizationMemberSCIM sentryOrgRole(String sentryOrgRole) {
    
    this.sentryOrgRole = sentryOrgRole;
    return this;
  }

   /**
   * Get sentryOrgRole
   * @return sentryOrgRole
  **/
  @javax.annotation.Nonnull
  public String getSentryOrgRole() {
    return sentryOrgRole;
  }


  public void setSentryOrgRole(String sentryOrgRole) {
    this.sentryOrgRole = sentryOrgRole;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrganizationMemberSCIM organizationMemberSCIM = (OrganizationMemberSCIM) o;
    return Objects.equals(this.active, organizationMemberSCIM.active) &&
        Objects.equals(this.schemas, organizationMemberSCIM.schemas) &&
        Objects.equals(this.id, organizationMemberSCIM.id) &&
        Objects.equals(this.userName, organizationMemberSCIM.userName) &&
        Objects.equals(this.name, organizationMemberSCIM.name) &&
        Objects.equals(this.emails, organizationMemberSCIM.emails) &&
        Objects.equals(this.meta, organizationMemberSCIM.meta) &&
        Objects.equals(this.sentryOrgRole, organizationMemberSCIM.sentryOrgRole);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, schemas, id, userName, name, emails, meta, sentryOrgRole);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrganizationMemberSCIM {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    emails: ").append(toIndentedString(emails)).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    sentryOrgRole: ").append(toIndentedString(sentryOrgRole)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active");
    openapiFields.add("schemas");
    openapiFields.add("id");
    openapiFields.add("userName");
    openapiFields.add("name");
    openapiFields.add("emails");
    openapiFields.add("meta");
    openapiFields.add("sentryOrgRole");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("schemas");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("userName");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("emails");
    openapiRequiredFields.add("meta");
    openapiRequiredFields.add("sentryOrgRole");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OrganizationMemberSCIM
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!OrganizationMemberSCIM.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrganizationMemberSCIM is not found in the empty JSON string", OrganizationMemberSCIM.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!OrganizationMemberSCIM.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrganizationMemberSCIM` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OrganizationMemberSCIM.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the required json array is present
      if (jsonObj.get("schemas") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("userName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userName").toString()));
      }
      // validate the required field `name`
      ListAnOrganizationSMembers200ResponseResourcesInnerName.validateJsonObject(jsonObj.getAsJsonObject("name"));
      // ensure the json data is an array
      if (!jsonObj.get("emails").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `emails` to be an array in the JSON string but got `%s`", jsonObj.get("emails").toString()));
      }

      JsonArray jsonArrayemails = jsonObj.getAsJsonArray("emails");
      // validate the required field `emails` (array)
      for (int i = 0; i < jsonArrayemails.size(); i++) {
        ListAnOrganizationSMembers200ResponseResourcesInnerEmailsInner.validateJsonObject(jsonArrayemails.get(i).getAsJsonObject());
      };
      // validate the required field `meta`
      QueryAnIndividualTeam200ResponseMeta.validateJsonObject(jsonObj.getAsJsonObject("meta"));
      if (!jsonObj.get("sentryOrgRole").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sentryOrgRole` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sentryOrgRole").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrganizationMemberSCIM.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrganizationMemberSCIM' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrganizationMemberSCIM> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrganizationMemberSCIM.class));

       return (TypeAdapter<T>) new TypeAdapter<OrganizationMemberSCIM>() {
           @Override
           public void write(JsonWriter out, OrganizationMemberSCIM value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrganizationMemberSCIM read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OrganizationMemberSCIM given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OrganizationMemberSCIM
  * @throws IOException if the JSON string is invalid with respect to OrganizationMemberSCIM
  */
  public static OrganizationMemberSCIM fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrganizationMemberSCIM.class);
  }

 /**
  * Convert an instance of OrganizationMemberSCIM to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

