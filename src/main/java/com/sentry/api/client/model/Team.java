/*
 * API Reference
 * Sentry Public API
 *
 * The version of the OpenAPI document: v0
 * Contact: partners@sentry.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sentry.api.client.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.sentry.api.client.model.ListAnOrganizationSTeams200ResponseInnerOrganization;
import com.sentry.api.client.model.RetrieveAnOrganizationMember200ResponseExternalUsersInner;
import com.sentry.api.client.model.RetrieveAnOrganizationMember200ResponseUserAvatar;
import com.sentry.api.client.model.RetrieveMonitorsForAnOrganization200ResponseInnerProject;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.sentry.api.client.JSON;


/**
 * Team
 */
@JsonPropertyOrder({
  Team.JSON_PROPERTY_EXTERNAL_TEAMS,
  Team.JSON_PROPERTY_ORGANIZATION,
  Team.JSON_PROPERTY_PROJECTS,
  Team.JSON_PROPERTY_ID,
  Team.JSON_PROPERTY_SLUG,
  Team.JSON_PROPERTY_NAME,
  Team.JSON_PROPERTY_DATE_CREATED,
  Team.JSON_PROPERTY_IS_MEMBER,
  Team.JSON_PROPERTY_TEAM_ROLE,
  Team.JSON_PROPERTY_FLAGS,
  Team.JSON_PROPERTY_ACCESS,
  Team.JSON_PROPERTY_HAS_ACCESS,
  Team.JSON_PROPERTY_IS_PENDING,
  Team.JSON_PROPERTY_MEMBER_COUNT,
  Team.JSON_PROPERTY_AVATAR,
  Team.JSON_PROPERTY_ORG_ROLE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-16T12:58:30.193453Z[Etc/UTC]")
public class Team {
  public static final String JSON_PROPERTY_EXTERNAL_TEAMS = "externalTeams";
  private List<RetrieveAnOrganizationMember200ResponseExternalUsersInner> externalTeams;

  public static final String JSON_PROPERTY_ORGANIZATION = "organization";
  private ListAnOrganizationSTeams200ResponseInnerOrganization organization;

  public static final String JSON_PROPERTY_PROJECTS = "projects";
  private List<RetrieveMonitorsForAnOrganization200ResponseInnerProject> projects;

  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_SLUG = "slug";
  private String slug;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_DATE_CREATED = "dateCreated";
  private OffsetDateTime dateCreated;

  public static final String JSON_PROPERTY_IS_MEMBER = "isMember";
  private Boolean isMember;

  public static final String JSON_PROPERTY_TEAM_ROLE = "teamRole";
  private String teamRole;

  public static final String JSON_PROPERTY_FLAGS = "flags";
  private Map<String, Object> flags = new HashMap<>();

  public static final String JSON_PROPERTY_ACCESS = "access";
  private List<String> access = new ArrayList<>();

  public static final String JSON_PROPERTY_HAS_ACCESS = "hasAccess";
  private Boolean hasAccess;

  public static final String JSON_PROPERTY_IS_PENDING = "isPending";
  private Boolean isPending;

  public static final String JSON_PROPERTY_MEMBER_COUNT = "memberCount";
  private Integer memberCount;

  public static final String JSON_PROPERTY_AVATAR = "avatar";
  private RetrieveAnOrganizationMember200ResponseUserAvatar avatar;

  public static final String JSON_PROPERTY_ORG_ROLE = "orgRole";
  private String orgRole;

  public Team() { 
  }

  public Team externalTeams(List<RetrieveAnOrganizationMember200ResponseExternalUsersInner> externalTeams) {
    this.externalTeams = externalTeams;
    return this;
  }

  public Team addExternalTeamsItem(RetrieveAnOrganizationMember200ResponseExternalUsersInner externalTeamsItem) {
    if (this.externalTeams == null) {
      this.externalTeams = new ArrayList<>();
    }
    this.externalTeams.add(externalTeamsItem);
    return this;
  }

   /**
   * Get externalTeams
   * @return externalTeams
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXTERNAL_TEAMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<RetrieveAnOrganizationMember200ResponseExternalUsersInner> getExternalTeams() {
    return externalTeams;
  }


  @JsonProperty(JSON_PROPERTY_EXTERNAL_TEAMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExternalTeams(List<RetrieveAnOrganizationMember200ResponseExternalUsersInner> externalTeams) {
    this.externalTeams = externalTeams;
  }


  public Team organization(ListAnOrganizationSTeams200ResponseInnerOrganization organization) {
    this.organization = organization;
    return this;
  }

   /**
   * Get organization
   * @return organization
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ORGANIZATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ListAnOrganizationSTeams200ResponseInnerOrganization getOrganization() {
    return organization;
  }


  @JsonProperty(JSON_PROPERTY_ORGANIZATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOrganization(ListAnOrganizationSTeams200ResponseInnerOrganization organization) {
    this.organization = organization;
  }


  public Team projects(List<RetrieveMonitorsForAnOrganization200ResponseInnerProject> projects) {
    this.projects = projects;
    return this;
  }

  public Team addProjectsItem(RetrieveMonitorsForAnOrganization200ResponseInnerProject projectsItem) {
    if (this.projects == null) {
      this.projects = new ArrayList<>();
    }
    this.projects.add(projectsItem);
    return this;
  }

   /**
   * Get projects
   * @return projects
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROJECTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<RetrieveMonitorsForAnOrganization200ResponseInnerProject> getProjects() {
    return projects;
  }


  @JsonProperty(JSON_PROPERTY_PROJECTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProjects(List<RetrieveMonitorsForAnOrganization200ResponseInnerProject> projects) {
    this.projects = projects;
  }


  public Team id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(String id) {
    this.id = id;
  }


  public Team slug(String slug) {
    this.slug = slug;
    return this;
  }

   /**
   * Get slug
   * @return slug
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SLUG)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSlug() {
    return slug;
  }


  @JsonProperty(JSON_PROPERTY_SLUG)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSlug(String slug) {
    this.slug = slug;
  }


  public Team name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public Team dateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

   /**
   * Get dateCreated
   * @return dateCreated
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DATE_CREATED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }


  @JsonProperty(JSON_PROPERTY_DATE_CREATED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public Team isMember(Boolean isMember) {
    this.isMember = isMember;
    return this;
  }

   /**
   * Get isMember
   * @return isMember
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IS_MEMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getIsMember() {
    return isMember;
  }


  @JsonProperty(JSON_PROPERTY_IS_MEMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIsMember(Boolean isMember) {
    this.isMember = isMember;
  }


  public Team teamRole(String teamRole) {
    this.teamRole = teamRole;
    return this;
  }

   /**
   * Get teamRole
   * @return teamRole
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TEAM_ROLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTeamRole() {
    return teamRole;
  }


  @JsonProperty(JSON_PROPERTY_TEAM_ROLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTeamRole(String teamRole) {
    this.teamRole = teamRole;
  }


  public Team flags(Map<String, Object> flags) {
    this.flags = flags;
    return this;
  }

  public Team putFlagsItem(String key, Object flagsItem) {
    if (this.flags == null) {
      this.flags = new HashMap<>();
    }
    this.flags.put(key, flagsItem);
    return this;
  }

   /**
   * Get flags
   * @return flags
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FLAGS)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.ALWAYS)

  public Map<String, Object> getFlags() {
    return flags;
  }


  @JsonProperty(JSON_PROPERTY_FLAGS)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.ALWAYS)
  public void setFlags(Map<String, Object> flags) {
    this.flags = flags;
  }


  public Team access(List<String> access) {
    this.access = access;
    return this;
  }

  public Team addAccessItem(String accessItem) {
    if (this.access == null) {
      this.access = new ArrayList<>();
    }
    this.access.add(accessItem);
    return this;
  }

   /**
   * Get access
   * @return access
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ACCESS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getAccess() {
    return access;
  }


  @JsonProperty(JSON_PROPERTY_ACCESS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAccess(List<String> access) {
    this.access = access;
  }


  public Team hasAccess(Boolean hasAccess) {
    this.hasAccess = hasAccess;
    return this;
  }

   /**
   * Get hasAccess
   * @return hasAccess
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_HAS_ACCESS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getHasAccess() {
    return hasAccess;
  }


  @JsonProperty(JSON_PROPERTY_HAS_ACCESS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHasAccess(Boolean hasAccess) {
    this.hasAccess = hasAccess;
  }


  public Team isPending(Boolean isPending) {
    this.isPending = isPending;
    return this;
  }

   /**
   * Get isPending
   * @return isPending
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IS_PENDING)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getIsPending() {
    return isPending;
  }


  @JsonProperty(JSON_PROPERTY_IS_PENDING)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIsPending(Boolean isPending) {
    this.isPending = isPending;
  }


  public Team memberCount(Integer memberCount) {
    this.memberCount = memberCount;
    return this;
  }

   /**
   * Get memberCount
   * @return memberCount
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MEMBER_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getMemberCount() {
    return memberCount;
  }


  @JsonProperty(JSON_PROPERTY_MEMBER_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMemberCount(Integer memberCount) {
    this.memberCount = memberCount;
  }


  public Team avatar(RetrieveAnOrganizationMember200ResponseUserAvatar avatar) {
    this.avatar = avatar;
    return this;
  }

   /**
   * Get avatar
   * @return avatar
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AVATAR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public RetrieveAnOrganizationMember200ResponseUserAvatar getAvatar() {
    return avatar;
  }


  @JsonProperty(JSON_PROPERTY_AVATAR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAvatar(RetrieveAnOrganizationMember200ResponseUserAvatar avatar) {
    this.avatar = avatar;
  }


  public Team orgRole(String orgRole) {
    this.orgRole = orgRole;
    return this;
  }

   /**
   * Get orgRole
   * @return orgRole
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ORG_ROLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getOrgRole() {
    return orgRole;
  }


  @JsonProperty(JSON_PROPERTY_ORG_ROLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOrgRole(String orgRole) {
    this.orgRole = orgRole;
  }


  /**
   * Return true if this Team object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Team team = (Team) o;
    return Objects.equals(this.externalTeams, team.externalTeams) &&
        Objects.equals(this.organization, team.organization) &&
        Objects.equals(this.projects, team.projects) &&
        Objects.equals(this.id, team.id) &&
        Objects.equals(this.slug, team.slug) &&
        Objects.equals(this.name, team.name) &&
        Objects.equals(this.dateCreated, team.dateCreated) &&
        Objects.equals(this.isMember, team.isMember) &&
        Objects.equals(this.teamRole, team.teamRole) &&
        Objects.equals(this.flags, team.flags) &&
        Objects.equals(this.access, team.access) &&
        Objects.equals(this.hasAccess, team.hasAccess) &&
        Objects.equals(this.isPending, team.isPending) &&
        Objects.equals(this.memberCount, team.memberCount) &&
        Objects.equals(this.avatar, team.avatar) &&
        Objects.equals(this.orgRole, team.orgRole);
  }

  @Override
  public int hashCode() {
    return Objects.hash(externalTeams, organization, projects, id, slug, name, dateCreated, isMember, teamRole, flags, access, hasAccess, isPending, memberCount, avatar, orgRole);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Team {\n");
    sb.append("    externalTeams: ").append(toIndentedString(externalTeams)).append("\n");
    sb.append("    organization: ").append(toIndentedString(organization)).append("\n");
    sb.append("    projects: ").append(toIndentedString(projects)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    isMember: ").append(toIndentedString(isMember)).append("\n");
    sb.append("    teamRole: ").append(toIndentedString(teamRole)).append("\n");
    sb.append("    flags: ").append(toIndentedString(flags)).append("\n");
    sb.append("    access: ").append(toIndentedString(access)).append("\n");
    sb.append("    hasAccess: ").append(toIndentedString(hasAccess)).append("\n");
    sb.append("    isPending: ").append(toIndentedString(isPending)).append("\n");
    sb.append("    memberCount: ").append(toIndentedString(memberCount)).append("\n");
    sb.append("    avatar: ").append(toIndentedString(avatar)).append("\n");
    sb.append("    orgRole: ").append(toIndentedString(orgRole)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

