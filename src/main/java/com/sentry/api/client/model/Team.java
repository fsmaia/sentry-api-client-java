/*
 * API Reference
 * Sentry Public API
 *
 * The version of the OpenAPI document: v0
 * Contact: partners@sentry.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sentry.api.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.sentry.api.client.model.ListAnOrganizationSTeams200ResponseInnerOrganization;
import com.sentry.api.client.model.RetrieveAnOrganizationMember200ResponseExternalUsersInner;
import com.sentry.api.client.model.RetrieveAnOrganizationMember200ResponseUserAvatar;
import com.sentry.api.client.model.RetrieveMonitorsForAnOrganization200ResponseInnerProject;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.sentry.api.client.JSON;

/**
 * Team
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-15T10:01:41.950429Z[Etc/UTC]")
public class Team implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_EXTERNAL_TEAMS = "externalTeams";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_TEAMS)
  private List<RetrieveAnOrganizationMember200ResponseExternalUsersInner> externalTeams;

  public static final String SERIALIZED_NAME_ORGANIZATION = "organization";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION)
  private ListAnOrganizationSTeams200ResponseInnerOrganization organization;

  public static final String SERIALIZED_NAME_PROJECTS = "projects";
  @SerializedName(SERIALIZED_NAME_PROJECTS)
  private List<RetrieveMonitorsForAnOrganization200ResponseInnerProject> projects;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_SLUG = "slug";
  @SerializedName(SERIALIZED_NAME_SLUG)
  private String slug;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DATE_CREATED = "dateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_IS_MEMBER = "isMember";
  @SerializedName(SERIALIZED_NAME_IS_MEMBER)
  private Boolean isMember;

  public static final String SERIALIZED_NAME_TEAM_ROLE = "teamRole";
  @SerializedName(SERIALIZED_NAME_TEAM_ROLE)
  private String teamRole;

  public static final String SERIALIZED_NAME_FLAGS = "flags";
  @SerializedName(SERIALIZED_NAME_FLAGS)
  private Map<String, Object> flags = new HashMap<>();

  public static final String SERIALIZED_NAME_ACCESS = "access";
  @SerializedName(SERIALIZED_NAME_ACCESS)
  private List<String> access = new ArrayList<>();

  public static final String SERIALIZED_NAME_HAS_ACCESS = "hasAccess";
  @SerializedName(SERIALIZED_NAME_HAS_ACCESS)
  private Boolean hasAccess;

  public static final String SERIALIZED_NAME_IS_PENDING = "isPending";
  @SerializedName(SERIALIZED_NAME_IS_PENDING)
  private Boolean isPending;

  public static final String SERIALIZED_NAME_MEMBER_COUNT = "memberCount";
  @SerializedName(SERIALIZED_NAME_MEMBER_COUNT)
  private Integer memberCount;

  public static final String SERIALIZED_NAME_AVATAR = "avatar";
  @SerializedName(SERIALIZED_NAME_AVATAR)
  private RetrieveAnOrganizationMember200ResponseUserAvatar avatar;

  public static final String SERIALIZED_NAME_ORG_ROLE = "orgRole";
  @SerializedName(SERIALIZED_NAME_ORG_ROLE)
  private String orgRole;

  public Team() {
  }

  public Team externalTeams(List<RetrieveAnOrganizationMember200ResponseExternalUsersInner> externalTeams) {
    
    this.externalTeams = externalTeams;
    return this;
  }

  public Team addExternalTeamsItem(RetrieveAnOrganizationMember200ResponseExternalUsersInner externalTeamsItem) {
    if (this.externalTeams == null) {
      this.externalTeams = new ArrayList<>();
    }
    this.externalTeams.add(externalTeamsItem);
    return this;
  }

   /**
   * Get externalTeams
   * @return externalTeams
  **/
  @javax.annotation.Nullable
  public List<RetrieveAnOrganizationMember200ResponseExternalUsersInner> getExternalTeams() {
    return externalTeams;
  }


  public void setExternalTeams(List<RetrieveAnOrganizationMember200ResponseExternalUsersInner> externalTeams) {
    this.externalTeams = externalTeams;
  }


  public Team organization(ListAnOrganizationSTeams200ResponseInnerOrganization organization) {
    
    this.organization = organization;
    return this;
  }

   /**
   * Get organization
   * @return organization
  **/
  @javax.annotation.Nullable
  public ListAnOrganizationSTeams200ResponseInnerOrganization getOrganization() {
    return organization;
  }


  public void setOrganization(ListAnOrganizationSTeams200ResponseInnerOrganization organization) {
    this.organization = organization;
  }


  public Team projects(List<RetrieveMonitorsForAnOrganization200ResponseInnerProject> projects) {
    
    this.projects = projects;
    return this;
  }

  public Team addProjectsItem(RetrieveMonitorsForAnOrganization200ResponseInnerProject projectsItem) {
    if (this.projects == null) {
      this.projects = new ArrayList<>();
    }
    this.projects.add(projectsItem);
    return this;
  }

   /**
   * Get projects
   * @return projects
  **/
  @javax.annotation.Nullable
  public List<RetrieveMonitorsForAnOrganization200ResponseInnerProject> getProjects() {
    return projects;
  }


  public void setProjects(List<RetrieveMonitorsForAnOrganization200ResponseInnerProject> projects) {
    this.projects = projects;
  }


  public Team id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public Team slug(String slug) {
    
    this.slug = slug;
    return this;
  }

   /**
   * Get slug
   * @return slug
  **/
  @javax.annotation.Nonnull
  public String getSlug() {
    return slug;
  }


  public void setSlug(String slug) {
    this.slug = slug;
  }


  public Team name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public Team dateCreated(OffsetDateTime dateCreated) {
    
    this.dateCreated = dateCreated;
    return this;
  }

   /**
   * Get dateCreated
   * @return dateCreated
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }


  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public Team isMember(Boolean isMember) {
    
    this.isMember = isMember;
    return this;
  }

   /**
   * Get isMember
   * @return isMember
  **/
  @javax.annotation.Nonnull
  public Boolean getIsMember() {
    return isMember;
  }


  public void setIsMember(Boolean isMember) {
    this.isMember = isMember;
  }


  public Team teamRole(String teamRole) {
    
    this.teamRole = teamRole;
    return this;
  }

   /**
   * Get teamRole
   * @return teamRole
  **/
  @javax.annotation.Nullable
  public String getTeamRole() {
    return teamRole;
  }


  public void setTeamRole(String teamRole) {
    this.teamRole = teamRole;
  }


  public Team flags(Map<String, Object> flags) {
    
    this.flags = flags;
    return this;
  }

  public Team putFlagsItem(String key, Object flagsItem) {
    if (this.flags == null) {
      this.flags = new HashMap<>();
    }
    this.flags.put(key, flagsItem);
    return this;
  }

   /**
   * Get flags
   * @return flags
  **/
  @javax.annotation.Nonnull
  public Map<String, Object> getFlags() {
    return flags;
  }


  public void setFlags(Map<String, Object> flags) {
    this.flags = flags;
  }


  public Team access(List<String> access) {
    
    this.access = access;
    return this;
  }

  public Team addAccessItem(String accessItem) {
    if (this.access == null) {
      this.access = new ArrayList<>();
    }
    this.access.add(accessItem);
    return this;
  }

   /**
   * Get access
   * @return access
  **/
  @javax.annotation.Nonnull
  public List<String> getAccess() {
    return access;
  }


  public void setAccess(List<String> access) {
    this.access = access;
  }


  public Team hasAccess(Boolean hasAccess) {
    
    this.hasAccess = hasAccess;
    return this;
  }

   /**
   * Get hasAccess
   * @return hasAccess
  **/
  @javax.annotation.Nonnull
  public Boolean getHasAccess() {
    return hasAccess;
  }


  public void setHasAccess(Boolean hasAccess) {
    this.hasAccess = hasAccess;
  }


  public Team isPending(Boolean isPending) {
    
    this.isPending = isPending;
    return this;
  }

   /**
   * Get isPending
   * @return isPending
  **/
  @javax.annotation.Nonnull
  public Boolean getIsPending() {
    return isPending;
  }


  public void setIsPending(Boolean isPending) {
    this.isPending = isPending;
  }


  public Team memberCount(Integer memberCount) {
    
    this.memberCount = memberCount;
    return this;
  }

   /**
   * Get memberCount
   * @return memberCount
  **/
  @javax.annotation.Nonnull
  public Integer getMemberCount() {
    return memberCount;
  }


  public void setMemberCount(Integer memberCount) {
    this.memberCount = memberCount;
  }


  public Team avatar(RetrieveAnOrganizationMember200ResponseUserAvatar avatar) {
    
    this.avatar = avatar;
    return this;
  }

   /**
   * Get avatar
   * @return avatar
  **/
  @javax.annotation.Nonnull
  public RetrieveAnOrganizationMember200ResponseUserAvatar getAvatar() {
    return avatar;
  }


  public void setAvatar(RetrieveAnOrganizationMember200ResponseUserAvatar avatar) {
    this.avatar = avatar;
  }


  public Team orgRole(String orgRole) {
    
    this.orgRole = orgRole;
    return this;
  }

   /**
   * Get orgRole
   * @return orgRole
  **/
  @javax.annotation.Nullable
  public String getOrgRole() {
    return orgRole;
  }


  public void setOrgRole(String orgRole) {
    this.orgRole = orgRole;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Team team = (Team) o;
    return Objects.equals(this.externalTeams, team.externalTeams) &&
        Objects.equals(this.organization, team.organization) &&
        Objects.equals(this.projects, team.projects) &&
        Objects.equals(this.id, team.id) &&
        Objects.equals(this.slug, team.slug) &&
        Objects.equals(this.name, team.name) &&
        Objects.equals(this.dateCreated, team.dateCreated) &&
        Objects.equals(this.isMember, team.isMember) &&
        Objects.equals(this.teamRole, team.teamRole) &&
        Objects.equals(this.flags, team.flags) &&
        Objects.equals(this.access, team.access) &&
        Objects.equals(this.hasAccess, team.hasAccess) &&
        Objects.equals(this.isPending, team.isPending) &&
        Objects.equals(this.memberCount, team.memberCount) &&
        Objects.equals(this.avatar, team.avatar) &&
        Objects.equals(this.orgRole, team.orgRole);
  }

  @Override
  public int hashCode() {
    return Objects.hash(externalTeams, organization, projects, id, slug, name, dateCreated, isMember, teamRole, flags, access, hasAccess, isPending, memberCount, avatar, orgRole);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Team {\n");
    sb.append("    externalTeams: ").append(toIndentedString(externalTeams)).append("\n");
    sb.append("    organization: ").append(toIndentedString(organization)).append("\n");
    sb.append("    projects: ").append(toIndentedString(projects)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    isMember: ").append(toIndentedString(isMember)).append("\n");
    sb.append("    teamRole: ").append(toIndentedString(teamRole)).append("\n");
    sb.append("    flags: ").append(toIndentedString(flags)).append("\n");
    sb.append("    access: ").append(toIndentedString(access)).append("\n");
    sb.append("    hasAccess: ").append(toIndentedString(hasAccess)).append("\n");
    sb.append("    isPending: ").append(toIndentedString(isPending)).append("\n");
    sb.append("    memberCount: ").append(toIndentedString(memberCount)).append("\n");
    sb.append("    avatar: ").append(toIndentedString(avatar)).append("\n");
    sb.append("    orgRole: ").append(toIndentedString(orgRole)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("externalTeams");
    openapiFields.add("organization");
    openapiFields.add("projects");
    openapiFields.add("id");
    openapiFields.add("slug");
    openapiFields.add("name");
    openapiFields.add("dateCreated");
    openapiFields.add("isMember");
    openapiFields.add("teamRole");
    openapiFields.add("flags");
    openapiFields.add("access");
    openapiFields.add("hasAccess");
    openapiFields.add("isPending");
    openapiFields.add("memberCount");
    openapiFields.add("avatar");
    openapiFields.add("orgRole");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("slug");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("dateCreated");
    openapiRequiredFields.add("isMember");
    openapiRequiredFields.add("teamRole");
    openapiRequiredFields.add("flags");
    openapiRequiredFields.add("access");
    openapiRequiredFields.add("hasAccess");
    openapiRequiredFields.add("isPending");
    openapiRequiredFields.add("memberCount");
    openapiRequiredFields.add("avatar");
    openapiRequiredFields.add("orgRole");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Team
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Team.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Team is not found in the empty JSON string", Team.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Team.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Team` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Team.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("externalTeams") != null && !jsonObj.get("externalTeams").isJsonNull()) {
        JsonArray jsonArrayexternalTeams = jsonObj.getAsJsonArray("externalTeams");
        if (jsonArrayexternalTeams != null) {
          // ensure the json data is an array
          if (!jsonObj.get("externalTeams").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `externalTeams` to be an array in the JSON string but got `%s`", jsonObj.get("externalTeams").toString()));
          }

          // validate the optional field `externalTeams` (array)
          for (int i = 0; i < jsonArrayexternalTeams.size(); i++) {
            RetrieveAnOrganizationMember200ResponseExternalUsersInner.validateJsonObject(jsonArrayexternalTeams.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `organization`
      if (jsonObj.get("organization") != null && !jsonObj.get("organization").isJsonNull()) {
        ListAnOrganizationSTeams200ResponseInnerOrganization.validateJsonObject(jsonObj.getAsJsonObject("organization"));
      }
      if (jsonObj.get("projects") != null && !jsonObj.get("projects").isJsonNull()) {
        JsonArray jsonArrayprojects = jsonObj.getAsJsonArray("projects");
        if (jsonArrayprojects != null) {
          // ensure the json data is an array
          if (!jsonObj.get("projects").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `projects` to be an array in the JSON string but got `%s`", jsonObj.get("projects").toString()));
          }

          // validate the optional field `projects` (array)
          for (int i = 0; i < jsonArrayprojects.size(); i++) {
            RetrieveMonitorsForAnOrganization200ResponseInnerProject.validateJsonObject(jsonArrayprojects.get(i).getAsJsonObject());
          };
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slug").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("teamRole").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `teamRole` to be a primitive type in the JSON string but got `%s`", jsonObj.get("teamRole").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("access") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("access").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `access` to be an array in the JSON string but got `%s`", jsonObj.get("access").toString()));
      }
      // validate the required field `avatar`
      RetrieveAnOrganizationMember200ResponseUserAvatar.validateJsonObject(jsonObj.getAsJsonObject("avatar"));
      if (!jsonObj.get("orgRole").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orgRole` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orgRole").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Team.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Team' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Team> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Team.class));

       return (TypeAdapter<T>) new TypeAdapter<Team>() {
           @Override
           public void write(JsonWriter out, Team value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Team read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Team given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Team
  * @throws IOException if the JSON string is invalid with respect to Team
  */
  public static Team fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Team.class);
  }

 /**
  * Convert an instance of Team to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

