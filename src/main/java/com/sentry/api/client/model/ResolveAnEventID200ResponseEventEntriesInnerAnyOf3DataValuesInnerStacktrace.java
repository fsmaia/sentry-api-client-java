/*
 * API Reference
 * Sentry Public API
 *
 * The version of the OpenAPI document: v0
 * Contact: partners@sentry.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sentry.api.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.sentry.api.client.model.ResolveAnEventID200ResponseEventEntriesInnerAnyOf3DataValuesInnerStacktraceFramesInner;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.sentry.api.client.JSON;

/**
 * ResolveAnEventID200ResponseEventEntriesInnerAnyOf3DataValuesInnerStacktrace
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-15T10:01:41.950429Z[Etc/UTC]")
public class ResolveAnEventID200ResponseEventEntriesInnerAnyOf3DataValuesInnerStacktrace implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_FRAMES = "frames";
  @SerializedName(SERIALIZED_NAME_FRAMES)
  private List<ResolveAnEventID200ResponseEventEntriesInnerAnyOf3DataValuesInnerStacktraceFramesInner> frames = new ArrayList<>();

  public static final String SERIALIZED_NAME_FRAMES_OMITTED = "framesOmitted";
  @SerializedName(SERIALIZED_NAME_FRAMES_OMITTED)
  private String framesOmitted;

  public static final String SERIALIZED_NAME_REGISTERS = "registers";
  @SerializedName(SERIALIZED_NAME_REGISTERS)
  private String registers;

  public static final String SERIALIZED_NAME_HAS_SYSTEM_FRAMES = "hasSystemFrames";
  @SerializedName(SERIALIZED_NAME_HAS_SYSTEM_FRAMES)
  private Boolean hasSystemFrames;

  public ResolveAnEventID200ResponseEventEntriesInnerAnyOf3DataValuesInnerStacktrace() {
  }

  public ResolveAnEventID200ResponseEventEntriesInnerAnyOf3DataValuesInnerStacktrace frames(List<ResolveAnEventID200ResponseEventEntriesInnerAnyOf3DataValuesInnerStacktraceFramesInner> frames) {
    
    this.frames = frames;
    return this;
  }

  public ResolveAnEventID200ResponseEventEntriesInnerAnyOf3DataValuesInnerStacktrace addFramesItem(ResolveAnEventID200ResponseEventEntriesInnerAnyOf3DataValuesInnerStacktraceFramesInner framesItem) {
    if (this.frames == null) {
      this.frames = new ArrayList<>();
    }
    this.frames.add(framesItem);
    return this;
  }

   /**
   * Get frames
   * @return frames
  **/
  @javax.annotation.Nonnull
  public List<ResolveAnEventID200ResponseEventEntriesInnerAnyOf3DataValuesInnerStacktraceFramesInner> getFrames() {
    return frames;
  }


  public void setFrames(List<ResolveAnEventID200ResponseEventEntriesInnerAnyOf3DataValuesInnerStacktraceFramesInner> frames) {
    this.frames = frames;
  }


  public ResolveAnEventID200ResponseEventEntriesInnerAnyOf3DataValuesInnerStacktrace framesOmitted(String framesOmitted) {
    
    this.framesOmitted = framesOmitted;
    return this;
  }

   /**
   * Get framesOmitted
   * @return framesOmitted
  **/
  @javax.annotation.Nullable
  public String getFramesOmitted() {
    return framesOmitted;
  }


  public void setFramesOmitted(String framesOmitted) {
    this.framesOmitted = framesOmitted;
  }


  public ResolveAnEventID200ResponseEventEntriesInnerAnyOf3DataValuesInnerStacktrace registers(String registers) {
    
    this.registers = registers;
    return this;
  }

   /**
   * Get registers
   * @return registers
  **/
  @javax.annotation.Nullable
  public String getRegisters() {
    return registers;
  }


  public void setRegisters(String registers) {
    this.registers = registers;
  }


  public ResolveAnEventID200ResponseEventEntriesInnerAnyOf3DataValuesInnerStacktrace hasSystemFrames(Boolean hasSystemFrames) {
    
    this.hasSystemFrames = hasSystemFrames;
    return this;
  }

   /**
   * Get hasSystemFrames
   * @return hasSystemFrames
  **/
  @javax.annotation.Nonnull
  public Boolean getHasSystemFrames() {
    return hasSystemFrames;
  }


  public void setHasSystemFrames(Boolean hasSystemFrames) {
    this.hasSystemFrames = hasSystemFrames;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResolveAnEventID200ResponseEventEntriesInnerAnyOf3DataValuesInnerStacktrace resolveAnEventID200ResponseEventEntriesInnerAnyOf3DataValuesInnerStacktrace = (ResolveAnEventID200ResponseEventEntriesInnerAnyOf3DataValuesInnerStacktrace) o;
    return Objects.equals(this.frames, resolveAnEventID200ResponseEventEntriesInnerAnyOf3DataValuesInnerStacktrace.frames) &&
        Objects.equals(this.framesOmitted, resolveAnEventID200ResponseEventEntriesInnerAnyOf3DataValuesInnerStacktrace.framesOmitted) &&
        Objects.equals(this.registers, resolveAnEventID200ResponseEventEntriesInnerAnyOf3DataValuesInnerStacktrace.registers) &&
        Objects.equals(this.hasSystemFrames, resolveAnEventID200ResponseEventEntriesInnerAnyOf3DataValuesInnerStacktrace.hasSystemFrames);
  }

  @Override
  public int hashCode() {
    return Objects.hash(frames, framesOmitted, registers, hasSystemFrames);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResolveAnEventID200ResponseEventEntriesInnerAnyOf3DataValuesInnerStacktrace {\n");
    sb.append("    frames: ").append(toIndentedString(frames)).append("\n");
    sb.append("    framesOmitted: ").append(toIndentedString(framesOmitted)).append("\n");
    sb.append("    registers: ").append(toIndentedString(registers)).append("\n");
    sb.append("    hasSystemFrames: ").append(toIndentedString(hasSystemFrames)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("frames");
    openapiFields.add("framesOmitted");
    openapiFields.add("registers");
    openapiFields.add("hasSystemFrames");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("frames");
    openapiRequiredFields.add("framesOmitted");
    openapiRequiredFields.add("registers");
    openapiRequiredFields.add("hasSystemFrames");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ResolveAnEventID200ResponseEventEntriesInnerAnyOf3DataValuesInnerStacktrace
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ResolveAnEventID200ResponseEventEntriesInnerAnyOf3DataValuesInnerStacktrace.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResolveAnEventID200ResponseEventEntriesInnerAnyOf3DataValuesInnerStacktrace is not found in the empty JSON string", ResolveAnEventID200ResponseEventEntriesInnerAnyOf3DataValuesInnerStacktrace.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ResolveAnEventID200ResponseEventEntriesInnerAnyOf3DataValuesInnerStacktrace.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResolveAnEventID200ResponseEventEntriesInnerAnyOf3DataValuesInnerStacktrace` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ResolveAnEventID200ResponseEventEntriesInnerAnyOf3DataValuesInnerStacktrace.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("frames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `frames` to be an array in the JSON string but got `%s`", jsonObj.get("frames").toString()));
      }

      JsonArray jsonArrayframes = jsonObj.getAsJsonArray("frames");
      // validate the required field `frames` (array)
      for (int i = 0; i < jsonArrayframes.size(); i++) {
        ResolveAnEventID200ResponseEventEntriesInnerAnyOf3DataValuesInnerStacktraceFramesInner.validateJsonObject(jsonArrayframes.get(i).getAsJsonObject());
      };
      if (!jsonObj.get("framesOmitted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `framesOmitted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("framesOmitted").toString()));
      }
      if (!jsonObj.get("registers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registers").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResolveAnEventID200ResponseEventEntriesInnerAnyOf3DataValuesInnerStacktrace.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResolveAnEventID200ResponseEventEntriesInnerAnyOf3DataValuesInnerStacktrace' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResolveAnEventID200ResponseEventEntriesInnerAnyOf3DataValuesInnerStacktrace> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResolveAnEventID200ResponseEventEntriesInnerAnyOf3DataValuesInnerStacktrace.class));

       return (TypeAdapter<T>) new TypeAdapter<ResolveAnEventID200ResponseEventEntriesInnerAnyOf3DataValuesInnerStacktrace>() {
           @Override
           public void write(JsonWriter out, ResolveAnEventID200ResponseEventEntriesInnerAnyOf3DataValuesInnerStacktrace value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResolveAnEventID200ResponseEventEntriesInnerAnyOf3DataValuesInnerStacktrace read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ResolveAnEventID200ResponseEventEntriesInnerAnyOf3DataValuesInnerStacktrace given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ResolveAnEventID200ResponseEventEntriesInnerAnyOf3DataValuesInnerStacktrace
  * @throws IOException if the JSON string is invalid with respect to ResolveAnEventID200ResponseEventEntriesInnerAnyOf3DataValuesInnerStacktrace
  */
  public static ResolveAnEventID200ResponseEventEntriesInnerAnyOf3DataValuesInnerStacktrace fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResolveAnEventID200ResponseEventEntriesInnerAnyOf3DataValuesInnerStacktrace.class);
  }

 /**
  * Convert an instance of ResolveAnEventID200ResponseEventEntriesInnerAnyOf3DataValuesInnerStacktrace to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

