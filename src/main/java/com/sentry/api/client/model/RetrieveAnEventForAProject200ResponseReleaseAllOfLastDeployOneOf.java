/*
 * API Reference
 * Sentry Public API
 *
 * The version of the OpenAPI document: v0
 * Contact: partners@sentry.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sentry.api.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.sentry.api.client.JSON;

/**
 * RetrieveAnEventForAProject200ResponseReleaseAllOfLastDeployOneOf
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-16T12:40:29.777755Z[Etc/UTC]")
public class RetrieveAnEventForAProject200ResponseReleaseAllOfLastDeployOneOf {
  public static final String SERIALIZED_NAME_ENVIRONMENT = "environment";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT)
  private String environment;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DATE_STARTED = "dateStarted";
  @SerializedName(SERIALIZED_NAME_DATE_STARTED)
  private OffsetDateTime dateStarted;

  public static final String SERIALIZED_NAME_DATE_FINISHED = "dateFinished";
  @SerializedName(SERIALIZED_NAME_DATE_FINISHED)
  private OffsetDateTime dateFinished;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public RetrieveAnEventForAProject200ResponseReleaseAllOfLastDeployOneOf() {
  }

  public RetrieveAnEventForAProject200ResponseReleaseAllOfLastDeployOneOf environment(String environment) {
    
    this.environment = environment;
    return this;
  }

   /**
   * Get environment
   * @return environment
  **/
  @javax.annotation.Nonnull
  public String getEnvironment() {
    return environment;
  }


  public void setEnvironment(String environment) {
    this.environment = environment;
  }


  public RetrieveAnEventForAProject200ResponseReleaseAllOfLastDeployOneOf name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public RetrieveAnEventForAProject200ResponseReleaseAllOfLastDeployOneOf dateStarted(OffsetDateTime dateStarted) {
    
    this.dateStarted = dateStarted;
    return this;
  }

   /**
   * Get dateStarted
   * @return dateStarted
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getDateStarted() {
    return dateStarted;
  }


  public void setDateStarted(OffsetDateTime dateStarted) {
    this.dateStarted = dateStarted;
  }


  public RetrieveAnEventForAProject200ResponseReleaseAllOfLastDeployOneOf dateFinished(OffsetDateTime dateFinished) {
    
    this.dateFinished = dateFinished;
    return this;
  }

   /**
   * Get dateFinished
   * @return dateFinished
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getDateFinished() {
    return dateFinished;
  }


  public void setDateFinished(OffsetDateTime dateFinished) {
    this.dateFinished = dateFinished;
  }


  public RetrieveAnEventForAProject200ResponseReleaseAllOfLastDeployOneOf url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    this.url = url;
  }


  public RetrieveAnEventForAProject200ResponseReleaseAllOfLastDeployOneOf id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RetrieveAnEventForAProject200ResponseReleaseAllOfLastDeployOneOf retrieveAnEventForAProject200ResponseReleaseAllOfLastDeployOneOf = (RetrieveAnEventForAProject200ResponseReleaseAllOfLastDeployOneOf) o;
    return Objects.equals(this.environment, retrieveAnEventForAProject200ResponseReleaseAllOfLastDeployOneOf.environment) &&
        Objects.equals(this.name, retrieveAnEventForAProject200ResponseReleaseAllOfLastDeployOneOf.name) &&
        Objects.equals(this.dateStarted, retrieveAnEventForAProject200ResponseReleaseAllOfLastDeployOneOf.dateStarted) &&
        Objects.equals(this.dateFinished, retrieveAnEventForAProject200ResponseReleaseAllOfLastDeployOneOf.dateFinished) &&
        Objects.equals(this.url, retrieveAnEventForAProject200ResponseReleaseAllOfLastDeployOneOf.url) &&
        Objects.equals(this.id, retrieveAnEventForAProject200ResponseReleaseAllOfLastDeployOneOf.id);
  }

  @Override
  public int hashCode() {
    return Objects.hash(environment, name, dateStarted, dateFinished, url, id);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RetrieveAnEventForAProject200ResponseReleaseAllOfLastDeployOneOf {\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    dateStarted: ").append(toIndentedString(dateStarted)).append("\n");
    sb.append("    dateFinished: ").append(toIndentedString(dateFinished)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("environment");
    openapiFields.add("name");
    openapiFields.add("dateStarted");
    openapiFields.add("dateFinished");
    openapiFields.add("url");
    openapiFields.add("id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("environment");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("dateStarted");
    openapiRequiredFields.add("dateFinished");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("id");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RetrieveAnEventForAProject200ResponseReleaseAllOfLastDeployOneOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!RetrieveAnEventForAProject200ResponseReleaseAllOfLastDeployOneOf.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RetrieveAnEventForAProject200ResponseReleaseAllOfLastDeployOneOf is not found in the empty JSON string", RetrieveAnEventForAProject200ResponseReleaseAllOfLastDeployOneOf.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!RetrieveAnEventForAProject200ResponseReleaseAllOfLastDeployOneOf.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RetrieveAnEventForAProject200ResponseReleaseAllOfLastDeployOneOf` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RetrieveAnEventForAProject200ResponseReleaseAllOfLastDeployOneOf.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("environment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `environment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("environment").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RetrieveAnEventForAProject200ResponseReleaseAllOfLastDeployOneOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RetrieveAnEventForAProject200ResponseReleaseAllOfLastDeployOneOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RetrieveAnEventForAProject200ResponseReleaseAllOfLastDeployOneOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RetrieveAnEventForAProject200ResponseReleaseAllOfLastDeployOneOf.class));

       return (TypeAdapter<T>) new TypeAdapter<RetrieveAnEventForAProject200ResponseReleaseAllOfLastDeployOneOf>() {
           @Override
           public void write(JsonWriter out, RetrieveAnEventForAProject200ResponseReleaseAllOfLastDeployOneOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RetrieveAnEventForAProject200ResponseReleaseAllOfLastDeployOneOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RetrieveAnEventForAProject200ResponseReleaseAllOfLastDeployOneOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RetrieveAnEventForAProject200ResponseReleaseAllOfLastDeployOneOf
  * @throws IOException if the JSON string is invalid with respect to RetrieveAnEventForAProject200ResponseReleaseAllOfLastDeployOneOf
  */
  public static RetrieveAnEventForAProject200ResponseReleaseAllOfLastDeployOneOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RetrieveAnEventForAProject200ResponseReleaseAllOfLastDeployOneOf.class);
  }

 /**
  * Convert an instance of RetrieveAnEventForAProject200ResponseReleaseAllOfLastDeployOneOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

