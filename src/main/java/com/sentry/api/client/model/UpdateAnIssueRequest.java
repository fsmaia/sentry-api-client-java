/*
 * API Reference
 * Sentry Public API
 *
 * The version of the OpenAPI document: v0
 * Contact: partners@sentry.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sentry.api.client.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.sentry.api.client.JSON;


/**
 * UpdateAnIssueRequest
 */
@JsonPropertyOrder({
  UpdateAnIssueRequest.JSON_PROPERTY_STATUS,
  UpdateAnIssueRequest.JSON_PROPERTY_ASSIGNED_TO,
  UpdateAnIssueRequest.JSON_PROPERTY_HAS_SEEN,
  UpdateAnIssueRequest.JSON_PROPERTY_IS_BOOKMARKED,
  UpdateAnIssueRequest.JSON_PROPERTY_IS_SUBSCRIBED,
  UpdateAnIssueRequest.JSON_PROPERTY_IS_PUBLIC
})
@JsonTypeName("Update_an_Issue_request")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-16T12:58:30.193453Z[Etc/UTC]")
public class UpdateAnIssueRequest {
  public static final String JSON_PROPERTY_STATUS = "status";
  private String status;

  public static final String JSON_PROPERTY_ASSIGNED_TO = "assignedTo";
  private String assignedTo;

  public static final String JSON_PROPERTY_HAS_SEEN = "hasSeen";
  private Boolean hasSeen;

  public static final String JSON_PROPERTY_IS_BOOKMARKED = "isBookmarked";
  private Boolean isBookmarked;

  public static final String JSON_PROPERTY_IS_SUBSCRIBED = "isSubscribed";
  private Boolean isSubscribed;

  public static final String JSON_PROPERTY_IS_PUBLIC = "isPublic";
  private Boolean isPublic;

  public UpdateAnIssueRequest() { 
  }

  public UpdateAnIssueRequest status(String status) {
    this.status = status;
    return this;
  }

   /**
   * The new status for the issues. Valid values are &#x60;\&quot;resolved\&quot;&#x60;, &#x60;\&quot;resolvedInNextRelease\&quot;&#x60;, &#x60;\&quot;unresolved\&quot;&#x60;, and &#x60;\&quot;ignored\&quot;&#x60;.
   * @return status
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStatus(String status) {
    this.status = status;
  }


  public UpdateAnIssueRequest assignedTo(String assignedTo) {
    this.assignedTo = assignedTo;
    return this;
  }

   /**
   * The actor id (or username) of the user or team that should be assigned to this issue.
   * @return assignedTo
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ASSIGNED_TO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAssignedTo() {
    return assignedTo;
  }


  @JsonProperty(JSON_PROPERTY_ASSIGNED_TO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAssignedTo(String assignedTo) {
    this.assignedTo = assignedTo;
  }


  public UpdateAnIssueRequest hasSeen(Boolean hasSeen) {
    this.hasSeen = hasSeen;
    return this;
  }

   /**
   * In case this API call is invoked with a user context this allows changing of the flag that indicates if the user has seen the event.
   * @return hasSeen
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HAS_SEEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getHasSeen() {
    return hasSeen;
  }


  @JsonProperty(JSON_PROPERTY_HAS_SEEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHasSeen(Boolean hasSeen) {
    this.hasSeen = hasSeen;
  }


  public UpdateAnIssueRequest isBookmarked(Boolean isBookmarked) {
    this.isBookmarked = isBookmarked;
    return this;
  }

   /**
   * In case this API call is invoked with a user context this allows changing of the bookmark flag.
   * @return isBookmarked
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_BOOKMARKED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsBookmarked() {
    return isBookmarked;
  }


  @JsonProperty(JSON_PROPERTY_IS_BOOKMARKED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsBookmarked(Boolean isBookmarked) {
    this.isBookmarked = isBookmarked;
  }


  public UpdateAnIssueRequest isSubscribed(Boolean isSubscribed) {
    this.isSubscribed = isSubscribed;
    return this;
  }

   /**
   * Get isSubscribed
   * @return isSubscribed
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_SUBSCRIBED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsSubscribed() {
    return isSubscribed;
  }


  @JsonProperty(JSON_PROPERTY_IS_SUBSCRIBED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsSubscribed(Boolean isSubscribed) {
    this.isSubscribed = isSubscribed;
  }


  public UpdateAnIssueRequest isPublic(Boolean isPublic) {
    this.isPublic = isPublic;
    return this;
  }

   /**
   * Sets the issue to public or private.
   * @return isPublic
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_PUBLIC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsPublic() {
    return isPublic;
  }


  @JsonProperty(JSON_PROPERTY_IS_PUBLIC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsPublic(Boolean isPublic) {
    this.isPublic = isPublic;
  }


  /**
   * Return true if this Update_an_Issue_request object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateAnIssueRequest updateAnIssueRequest = (UpdateAnIssueRequest) o;
    return Objects.equals(this.status, updateAnIssueRequest.status) &&
        Objects.equals(this.assignedTo, updateAnIssueRequest.assignedTo) &&
        Objects.equals(this.hasSeen, updateAnIssueRequest.hasSeen) &&
        Objects.equals(this.isBookmarked, updateAnIssueRequest.isBookmarked) &&
        Objects.equals(this.isSubscribed, updateAnIssueRequest.isSubscribed) &&
        Objects.equals(this.isPublic, updateAnIssueRequest.isPublic);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, assignedTo, hasSeen, isBookmarked, isSubscribed, isPublic);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateAnIssueRequest {\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    assignedTo: ").append(toIndentedString(assignedTo)).append("\n");
    sb.append("    hasSeen: ").append(toIndentedString(hasSeen)).append("\n");
    sb.append("    isBookmarked: ").append(toIndentedString(isBookmarked)).append("\n");
    sb.append("    isSubscribed: ").append(toIndentedString(isSubscribed)).append("\n");
    sb.append("    isPublic: ").append(toIndentedString(isPublic)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

