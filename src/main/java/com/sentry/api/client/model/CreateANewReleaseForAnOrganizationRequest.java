/*
 * API Reference
 * Sentry Public API
 *
 * The version of the OpenAPI document: v0
 * Contact: partners@sentry.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sentry.api.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.sentry.api.client.model.CreateANewReleaseForAnOrganizationRequestCommitsInner;
import com.sentry.api.client.model.CreateANewReleaseForAnOrganizationRequestRefsInner;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.sentry.api.client.JSON;

/**
 * CreateANewReleaseForAnOrganizationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-16T12:28:08.282703Z[Etc/UTC]")
public class CreateANewReleaseForAnOrganizationRequest {
  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_REF = "ref";
  @SerializedName(SERIALIZED_NAME_REF)
  private String ref;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_PROJECTS = "projects";
  @SerializedName(SERIALIZED_NAME_PROJECTS)
  private List<String> projects = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATE_RELEASED = "dateReleased";
  @SerializedName(SERIALIZED_NAME_DATE_RELEASED)
  private OffsetDateTime dateReleased;

  public static final String SERIALIZED_NAME_COMMITS = "commits";
  @SerializedName(SERIALIZED_NAME_COMMITS)
  private List<CreateANewReleaseForAnOrganizationRequestCommitsInner> commits;

  public static final String SERIALIZED_NAME_REFS = "refs";
  @SerializedName(SERIALIZED_NAME_REFS)
  private List<CreateANewReleaseForAnOrganizationRequestRefsInner> refs;

  public CreateANewReleaseForAnOrganizationRequest() {
  }

  public CreateANewReleaseForAnOrganizationRequest version(String version) {
    
    this.version = version;
    return this;
  }

   /**
   * A version identifier for this release. Can be a version number, a commit hash, etc.
   * @return version
  **/
  @javax.annotation.Nonnull
  public String getVersion() {
    return version;
  }


  public void setVersion(String version) {
    this.version = version;
  }


  public CreateANewReleaseForAnOrganizationRequest ref(String ref) {
    
    this.ref = ref;
    return this;
  }

   /**
   * An optional commit reference. This is useful if a tagged version has been provided.
   * @return ref
  **/
  @javax.annotation.Nullable
  public String getRef() {
    return ref;
  }


  public void setRef(String ref) {
    this.ref = ref;
  }


  public CreateANewReleaseForAnOrganizationRequest url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * A URL that points to the release. This can be the path to an online interface to the source code for instance
   * @return url
  **/
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    this.url = url;
  }


  public CreateANewReleaseForAnOrganizationRequest projects(List<String> projects) {
    
    this.projects = projects;
    return this;
  }

  public CreateANewReleaseForAnOrganizationRequest addProjectsItem(String projectsItem) {
    if (this.projects == null) {
      this.projects = new ArrayList<>();
    }
    this.projects.add(projectsItem);
    return this;
  }

   /**
   * A list of project slugs that are involved in this release.
   * @return projects
  **/
  @javax.annotation.Nonnull
  public List<String> getProjects() {
    return projects;
  }


  public void setProjects(List<String> projects) {
    this.projects = projects;
  }


  public CreateANewReleaseForAnOrganizationRequest dateReleased(OffsetDateTime dateReleased) {
    
    this.dateReleased = dateReleased;
    return this;
  }

   /**
   * An optional date that indicates when the release went live. If not provided the current time is assumed.
   * @return dateReleased
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getDateReleased() {
    return dateReleased;
  }


  public void setDateReleased(OffsetDateTime dateReleased) {
    this.dateReleased = dateReleased;
  }


  public CreateANewReleaseForAnOrganizationRequest commits(List<CreateANewReleaseForAnOrganizationRequestCommitsInner> commits) {
    
    this.commits = commits;
    return this;
  }

  public CreateANewReleaseForAnOrganizationRequest addCommitsItem(CreateANewReleaseForAnOrganizationRequestCommitsInner commitsItem) {
    if (this.commits == null) {
      this.commits = new ArrayList<>();
    }
    this.commits.add(commitsItem);
    return this;
  }

   /**
   * An optional list of commit data to be associated with the release. Commits must include parameters &#x60;id&#x60; (the SHA of the commit), and can optionally include &#x60;repository&#x60;, &#x60;message&#x60;, &#x60;patch_set&#x60;, &#x60;author_name&#x60;, &#x60;author_email&#x60;, and &#x60;timestamp&#x60;.
   * @return commits
  **/
  @javax.annotation.Nullable
  public List<CreateANewReleaseForAnOrganizationRequestCommitsInner> getCommits() {
    return commits;
  }


  public void setCommits(List<CreateANewReleaseForAnOrganizationRequestCommitsInner> commits) {
    this.commits = commits;
  }


  public CreateANewReleaseForAnOrganizationRequest refs(List<CreateANewReleaseForAnOrganizationRequestRefsInner> refs) {
    
    this.refs = refs;
    return this;
  }

  public CreateANewReleaseForAnOrganizationRequest addRefsItem(CreateANewReleaseForAnOrganizationRequestRefsInner refsItem) {
    if (this.refs == null) {
      this.refs = new ArrayList<>();
    }
    this.refs.add(refsItem);
    return this;
  }

   /**
   * An optional way to indicate the start and end commits for each repository included in a release. Head commits must include parameters &#x60;repository&#x60; and &#x60;commit&#x60; (the HEAD sha). They can optionally include &#x60;previousCommit&#x60; (the sha of the HEAD of the previous release), which should be specified if this is the first time you&#39;ve sent commit data. &#x60;commit&#x60; may contain a range in the form of &#x60;previousCommit..commit&#x60;.
   * @return refs
  **/
  @javax.annotation.Nullable
  public List<CreateANewReleaseForAnOrganizationRequestRefsInner> getRefs() {
    return refs;
  }


  public void setRefs(List<CreateANewReleaseForAnOrganizationRequestRefsInner> refs) {
    this.refs = refs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateANewReleaseForAnOrganizationRequest createANewReleaseForAnOrganizationRequest = (CreateANewReleaseForAnOrganizationRequest) o;
    return Objects.equals(this.version, createANewReleaseForAnOrganizationRequest.version) &&
        Objects.equals(this.ref, createANewReleaseForAnOrganizationRequest.ref) &&
        Objects.equals(this.url, createANewReleaseForAnOrganizationRequest.url) &&
        Objects.equals(this.projects, createANewReleaseForAnOrganizationRequest.projects) &&
        Objects.equals(this.dateReleased, createANewReleaseForAnOrganizationRequest.dateReleased) &&
        Objects.equals(this.commits, createANewReleaseForAnOrganizationRequest.commits) &&
        Objects.equals(this.refs, createANewReleaseForAnOrganizationRequest.refs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(version, ref, url, projects, dateReleased, commits, refs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateANewReleaseForAnOrganizationRequest {\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    ref: ").append(toIndentedString(ref)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    projects: ").append(toIndentedString(projects)).append("\n");
    sb.append("    dateReleased: ").append(toIndentedString(dateReleased)).append("\n");
    sb.append("    commits: ").append(toIndentedString(commits)).append("\n");
    sb.append("    refs: ").append(toIndentedString(refs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("version");
    openapiFields.add("ref");
    openapiFields.add("url");
    openapiFields.add("projects");
    openapiFields.add("dateReleased");
    openapiFields.add("commits");
    openapiFields.add("refs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("version");
    openapiRequiredFields.add("projects");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CreateANewReleaseForAnOrganizationRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CreateANewReleaseForAnOrganizationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateANewReleaseForAnOrganizationRequest is not found in the empty JSON string", CreateANewReleaseForAnOrganizationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CreateANewReleaseForAnOrganizationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateANewReleaseForAnOrganizationRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateANewReleaseForAnOrganizationRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if ((jsonObj.get("ref") != null && !jsonObj.get("ref").isJsonNull()) && !jsonObj.get("ref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ref").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("projects") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("projects").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `projects` to be an array in the JSON string but got `%s`", jsonObj.get("projects").toString()));
      }
      if (jsonObj.get("commits") != null && !jsonObj.get("commits").isJsonNull()) {
        JsonArray jsonArraycommits = jsonObj.getAsJsonArray("commits");
        if (jsonArraycommits != null) {
          // ensure the json data is an array
          if (!jsonObj.get("commits").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `commits` to be an array in the JSON string but got `%s`", jsonObj.get("commits").toString()));
          }

          // validate the optional field `commits` (array)
          for (int i = 0; i < jsonArraycommits.size(); i++) {
            CreateANewReleaseForAnOrganizationRequestCommitsInner.validateJsonObject(jsonArraycommits.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("refs") != null && !jsonObj.get("refs").isJsonNull()) {
        JsonArray jsonArrayrefs = jsonObj.getAsJsonArray("refs");
        if (jsonArrayrefs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("refs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `refs` to be an array in the JSON string but got `%s`", jsonObj.get("refs").toString()));
          }

          // validate the optional field `refs` (array)
          for (int i = 0; i < jsonArrayrefs.size(); i++) {
            CreateANewReleaseForAnOrganizationRequestRefsInner.validateJsonObject(jsonArrayrefs.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateANewReleaseForAnOrganizationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateANewReleaseForAnOrganizationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateANewReleaseForAnOrganizationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateANewReleaseForAnOrganizationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateANewReleaseForAnOrganizationRequest>() {
           @Override
           public void write(JsonWriter out, CreateANewReleaseForAnOrganizationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateANewReleaseForAnOrganizationRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateANewReleaseForAnOrganizationRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateANewReleaseForAnOrganizationRequest
  * @throws IOException if the JSON string is invalid with respect to CreateANewReleaseForAnOrganizationRequest
  */
  public static CreateANewReleaseForAnOrganizationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateANewReleaseForAnOrganizationRequest.class);
  }

 /**
  * Convert an instance of CreateANewReleaseForAnOrganizationRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

