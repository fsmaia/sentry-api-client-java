/*
 * API Reference
 * Sentry Public API
 *
 * The version of the OpenAPI document: v0
 * Contact: partners@sentry.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sentry.api.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.sentry.api.client.model.BulkMutateAListOfIssuesRequestStatusDetails;
import java.io.IOException;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.sentry.api.client.JSON;

/**
 * BulkMutateAListOfIssuesRequest
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-15T10:13:02.301928Z[Etc/UTC]")
public class BulkMutateAListOfIssuesRequest implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_STATUS_DETAILS = "statusDetails";
  @SerializedName(SERIALIZED_NAME_STATUS_DETAILS)
  private BulkMutateAListOfIssuesRequestStatusDetails statusDetails;

  public static final String SERIALIZED_NAME_IGNORE_DURATION = "ignoreDuration";
  @SerializedName(SERIALIZED_NAME_IGNORE_DURATION)
  private Integer ignoreDuration;

  public static final String SERIALIZED_NAME_IS_PUBLIC = "isPublic";
  @SerializedName(SERIALIZED_NAME_IS_PUBLIC)
  private Boolean isPublic;

  public static final String SERIALIZED_NAME_MERGE = "merge";
  @SerializedName(SERIALIZED_NAME_MERGE)
  private Boolean merge;

  public static final String SERIALIZED_NAME_ASSIGNED_TO = "assignedTo";
  @SerializedName(SERIALIZED_NAME_ASSIGNED_TO)
  private String assignedTo;

  public static final String SERIALIZED_NAME_HAS_SEEN = "hasSeen";
  @SerializedName(SERIALIZED_NAME_HAS_SEEN)
  private Boolean hasSeen;

  public static final String SERIALIZED_NAME_IS_BOOKMARKED = "isBookmarked";
  @SerializedName(SERIALIZED_NAME_IS_BOOKMARKED)
  private Boolean isBookmarked;

  public BulkMutateAListOfIssuesRequest() {
  }

  public BulkMutateAListOfIssuesRequest status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * The new status for the issues. Valid values are &#x60;\&quot;resolved\&quot;&#x60;, &#x60;\&quot;resolvedInNextRelease\&quot;&#x60;, &#x60;\&quot;unresolved\&quot;&#x60;, and &#x60;\&quot;ignored\&quot;&#x60;.
   * @return status
  **/
  @jakarta.annotation.Nullable
  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public BulkMutateAListOfIssuesRequest statusDetails(BulkMutateAListOfIssuesRequestStatusDetails statusDetails) {
    
    this.statusDetails = statusDetails;
    return this;
  }

   /**
   * Get statusDetails
   * @return statusDetails
  **/
  @jakarta.annotation.Nullable
  public BulkMutateAListOfIssuesRequestStatusDetails getStatusDetails() {
    return statusDetails;
  }


  public void setStatusDetails(BulkMutateAListOfIssuesRequestStatusDetails statusDetails) {
    this.statusDetails = statusDetails;
  }


  public BulkMutateAListOfIssuesRequest ignoreDuration(Integer ignoreDuration) {
    
    this.ignoreDuration = ignoreDuration;
    return this;
  }

   /**
   * The number of minutes to ignore this issue.
   * @return ignoreDuration
  **/
  @jakarta.annotation.Nullable
  public Integer getIgnoreDuration() {
    return ignoreDuration;
  }


  public void setIgnoreDuration(Integer ignoreDuration) {
    this.ignoreDuration = ignoreDuration;
  }


  public BulkMutateAListOfIssuesRequest isPublic(Boolean isPublic) {
    
    this.isPublic = isPublic;
    return this;
  }

   /**
   * Sets the issue to public or private.
   * @return isPublic
  **/
  @jakarta.annotation.Nullable
  public Boolean getIsPublic() {
    return isPublic;
  }


  public void setIsPublic(Boolean isPublic) {
    this.isPublic = isPublic;
  }


  public BulkMutateAListOfIssuesRequest merge(Boolean merge) {
    
    this.merge = merge;
    return this;
  }

   /**
   * Allows to merge or unmerge different issues.
   * @return merge
  **/
  @jakarta.annotation.Nullable
  public Boolean getMerge() {
    return merge;
  }


  public void setMerge(Boolean merge) {
    this.merge = merge;
  }


  public BulkMutateAListOfIssuesRequest assignedTo(String assignedTo) {
    
    this.assignedTo = assignedTo;
    return this;
  }

   /**
   * The actor id (or username) of the user or team that should be assigned to this issue.
   * @return assignedTo
  **/
  @jakarta.annotation.Nullable
  public String getAssignedTo() {
    return assignedTo;
  }


  public void setAssignedTo(String assignedTo) {
    this.assignedTo = assignedTo;
  }


  public BulkMutateAListOfIssuesRequest hasSeen(Boolean hasSeen) {
    
    this.hasSeen = hasSeen;
    return this;
  }

   /**
   * In case this API call is invoked with a user context this allows changing of the flag that indicates if the user has seen the event.
   * @return hasSeen
  **/
  @jakarta.annotation.Nullable
  public Boolean getHasSeen() {
    return hasSeen;
  }


  public void setHasSeen(Boolean hasSeen) {
    this.hasSeen = hasSeen;
  }


  public BulkMutateAListOfIssuesRequest isBookmarked(Boolean isBookmarked) {
    
    this.isBookmarked = isBookmarked;
    return this;
  }

   /**
   * In case this API call is invoked with a user context this allows changing of the bookmark flag.
   * @return isBookmarked
  **/
  @jakarta.annotation.Nullable
  public Boolean getIsBookmarked() {
    return isBookmarked;
  }


  public void setIsBookmarked(Boolean isBookmarked) {
    this.isBookmarked = isBookmarked;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BulkMutateAListOfIssuesRequest bulkMutateAListOfIssuesRequest = (BulkMutateAListOfIssuesRequest) o;
    return Objects.equals(this.status, bulkMutateAListOfIssuesRequest.status) &&
        Objects.equals(this.statusDetails, bulkMutateAListOfIssuesRequest.statusDetails) &&
        Objects.equals(this.ignoreDuration, bulkMutateAListOfIssuesRequest.ignoreDuration) &&
        Objects.equals(this.isPublic, bulkMutateAListOfIssuesRequest.isPublic) &&
        Objects.equals(this.merge, bulkMutateAListOfIssuesRequest.merge) &&
        Objects.equals(this.assignedTo, bulkMutateAListOfIssuesRequest.assignedTo) &&
        Objects.equals(this.hasSeen, bulkMutateAListOfIssuesRequest.hasSeen) &&
        Objects.equals(this.isBookmarked, bulkMutateAListOfIssuesRequest.isBookmarked);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, statusDetails, ignoreDuration, isPublic, merge, assignedTo, hasSeen, isBookmarked);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BulkMutateAListOfIssuesRequest {\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusDetails: ").append(toIndentedString(statusDetails)).append("\n");
    sb.append("    ignoreDuration: ").append(toIndentedString(ignoreDuration)).append("\n");
    sb.append("    isPublic: ").append(toIndentedString(isPublic)).append("\n");
    sb.append("    merge: ").append(toIndentedString(merge)).append("\n");
    sb.append("    assignedTo: ").append(toIndentedString(assignedTo)).append("\n");
    sb.append("    hasSeen: ").append(toIndentedString(hasSeen)).append("\n");
    sb.append("    isBookmarked: ").append(toIndentedString(isBookmarked)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("status");
    openapiFields.add("statusDetails");
    openapiFields.add("ignoreDuration");
    openapiFields.add("isPublic");
    openapiFields.add("merge");
    openapiFields.add("assignedTo");
    openapiFields.add("hasSeen");
    openapiFields.add("isBookmarked");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BulkMutateAListOfIssuesRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!BulkMutateAListOfIssuesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BulkMutateAListOfIssuesRequest is not found in the empty JSON string", BulkMutateAListOfIssuesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!BulkMutateAListOfIssuesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BulkMutateAListOfIssuesRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `statusDetails`
      if (jsonObj.get("statusDetails") != null && !jsonObj.get("statusDetails").isJsonNull()) {
        BulkMutateAListOfIssuesRequestStatusDetails.validateJsonObject(jsonObj.getAsJsonObject("statusDetails"));
      }
      if ((jsonObj.get("assignedTo") != null && !jsonObj.get("assignedTo").isJsonNull()) && !jsonObj.get("assignedTo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assignedTo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assignedTo").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BulkMutateAListOfIssuesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BulkMutateAListOfIssuesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BulkMutateAListOfIssuesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BulkMutateAListOfIssuesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<BulkMutateAListOfIssuesRequest>() {
           @Override
           public void write(JsonWriter out, BulkMutateAListOfIssuesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BulkMutateAListOfIssuesRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BulkMutateAListOfIssuesRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BulkMutateAListOfIssuesRequest
  * @throws IOException if the JSON string is invalid with respect to BulkMutateAListOfIssuesRequest
  */
  public static BulkMutateAListOfIssuesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BulkMutateAListOfIssuesRequest.class);
  }

 /**
  * Convert an instance of BulkMutateAListOfIssuesRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

