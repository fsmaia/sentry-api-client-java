/*
 * API Reference
 * Sentry Public API
 *
 * The version of the OpenAPI document: v0
 * Contact: partners@sentry.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sentry.api.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.sentry.api.client.model.ListAProjectSIssues200ResponseInnerMetadata;
import com.sentry.api.client.model.ListAProjectSIssues200ResponseInnerProject;
import com.sentry.api.client.model.ListAProjectSIssues200ResponseInnerStats;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.sentry.api.client.JSON;

/**
 * ListAProjectSIssues200ResponseInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-16T12:28:08.282703Z[Etc/UTC]")
public class ListAProjectSIssues200ResponseInner {
  public static final String SERIALIZED_NAME_ANNOTATIONS = "annotations";
  @SerializedName(SERIALIZED_NAME_ANNOTATIONS)
  private List<String> annotations = new ArrayList<>();

  public static final String SERIALIZED_NAME_ASSIGNED_TO = "assignedTo";
  @SerializedName(SERIALIZED_NAME_ASSIGNED_TO)
  private Object assignedTo;

  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private String count;

  public static final String SERIALIZED_NAME_CULPRIT = "culprit";
  @SerializedName(SERIALIZED_NAME_CULPRIT)
  private String culprit;

  public static final String SERIALIZED_NAME_FIRST_SEEN = "firstSeen";
  @SerializedName(SERIALIZED_NAME_FIRST_SEEN)
  private String firstSeen;

  public static final String SERIALIZED_NAME_HAS_SEEN = "hasSeen";
  @SerializedName(SERIALIZED_NAME_HAS_SEEN)
  private Boolean hasSeen;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_BOOKMARKED = "isBookmarked";
  @SerializedName(SERIALIZED_NAME_IS_BOOKMARKED)
  private Boolean isBookmarked;

  public static final String SERIALIZED_NAME_IS_PUBLIC = "isPublic";
  @SerializedName(SERIALIZED_NAME_IS_PUBLIC)
  private Boolean isPublic;

  public static final String SERIALIZED_NAME_IS_SUBSCRIBED = "isSubscribed";
  @SerializedName(SERIALIZED_NAME_IS_SUBSCRIBED)
  private Boolean isSubscribed;

  public static final String SERIALIZED_NAME_LAST_SEEN = "lastSeen";
  @SerializedName(SERIALIZED_NAME_LAST_SEEN)
  private String lastSeen;

  public static final String SERIALIZED_NAME_LEVEL = "level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  private String level;

  public static final String SERIALIZED_NAME_LOGGER = "logger";
  @SerializedName(SERIALIZED_NAME_LOGGER)
  private String logger;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private ListAProjectSIssues200ResponseInnerMetadata metadata;

  public static final String SERIALIZED_NAME_NUM_COMMENTS = "numComments";
  @SerializedName(SERIALIZED_NAME_NUM_COMMENTS)
  private Integer numComments;

  public static final String SERIALIZED_NAME_PERMALINK = "permalink";
  @SerializedName(SERIALIZED_NAME_PERMALINK)
  private String permalink;

  public static final String SERIALIZED_NAME_PROJECT = "project";
  @SerializedName(SERIALIZED_NAME_PROJECT)
  private ListAProjectSIssues200ResponseInnerProject project;

  public static final String SERIALIZED_NAME_SHARE_ID = "shareId";
  @SerializedName(SERIALIZED_NAME_SHARE_ID)
  private String shareId;

  public static final String SERIALIZED_NAME_SHORT_ID = "shortId";
  @SerializedName(SERIALIZED_NAME_SHORT_ID)
  private String shortId;

  public static final String SERIALIZED_NAME_STATS = "stats";
  @SerializedName(SERIALIZED_NAME_STATS)
  private ListAProjectSIssues200ResponseInnerStats stats;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    RESOLVED("resolved"),
    
    UNRESOLVED("unresolved"),
    
    IGNORED("ignored");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_STATUS_DETAILS = "statusDetails";
  @SerializedName(SERIALIZED_NAME_STATUS_DETAILS)
  private Object statusDetails;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_DETAILS = "subscriptionDetails";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_DETAILS)
  private Object subscriptionDetails;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_USER_COUNT = "userCount";
  @SerializedName(SERIALIZED_NAME_USER_COUNT)
  private Integer userCount;

  public ListAProjectSIssues200ResponseInner() {
  }

  public ListAProjectSIssues200ResponseInner annotations(List<String> annotations) {
    
    this.annotations = annotations;
    return this;
  }

  public ListAProjectSIssues200ResponseInner addAnnotationsItem(String annotationsItem) {
    if (this.annotations == null) {
      this.annotations = new ArrayList<>();
    }
    this.annotations.add(annotationsItem);
    return this;
  }

   /**
   * Get annotations
   * @return annotations
  **/
  @javax.annotation.Nonnull
  public List<String> getAnnotations() {
    return annotations;
  }


  public void setAnnotations(List<String> annotations) {
    this.annotations = annotations;
  }


  public ListAProjectSIssues200ResponseInner assignedTo(Object assignedTo) {
    
    this.assignedTo = assignedTo;
    return this;
  }

   /**
   * Get assignedTo
   * @return assignedTo
  **/
  @javax.annotation.Nullable
  public Object getAssignedTo() {
    return assignedTo;
  }


  public void setAssignedTo(Object assignedTo) {
    this.assignedTo = assignedTo;
  }


  public ListAProjectSIssues200ResponseInner count(String count) {
    
    this.count = count;
    return this;
  }

   /**
   * Get count
   * @return count
  **/
  @javax.annotation.Nonnull
  public String getCount() {
    return count;
  }


  public void setCount(String count) {
    this.count = count;
  }


  public ListAProjectSIssues200ResponseInner culprit(String culprit) {
    
    this.culprit = culprit;
    return this;
  }

   /**
   * Get culprit
   * @return culprit
  **/
  @javax.annotation.Nonnull
  public String getCulprit() {
    return culprit;
  }


  public void setCulprit(String culprit) {
    this.culprit = culprit;
  }


  public ListAProjectSIssues200ResponseInner firstSeen(String firstSeen) {
    
    this.firstSeen = firstSeen;
    return this;
  }

   /**
   * Get firstSeen
   * @return firstSeen
  **/
  @javax.annotation.Nonnull
  public String getFirstSeen() {
    return firstSeen;
  }


  public void setFirstSeen(String firstSeen) {
    this.firstSeen = firstSeen;
  }


  public ListAProjectSIssues200ResponseInner hasSeen(Boolean hasSeen) {
    
    this.hasSeen = hasSeen;
    return this;
  }

   /**
   * Get hasSeen
   * @return hasSeen
  **/
  @javax.annotation.Nonnull
  public Boolean getHasSeen() {
    return hasSeen;
  }


  public void setHasSeen(Boolean hasSeen) {
    this.hasSeen = hasSeen;
  }


  public ListAProjectSIssues200ResponseInner id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public ListAProjectSIssues200ResponseInner isBookmarked(Boolean isBookmarked) {
    
    this.isBookmarked = isBookmarked;
    return this;
  }

   /**
   * Get isBookmarked
   * @return isBookmarked
  **/
  @javax.annotation.Nonnull
  public Boolean getIsBookmarked() {
    return isBookmarked;
  }


  public void setIsBookmarked(Boolean isBookmarked) {
    this.isBookmarked = isBookmarked;
  }


  public ListAProjectSIssues200ResponseInner isPublic(Boolean isPublic) {
    
    this.isPublic = isPublic;
    return this;
  }

   /**
   * Get isPublic
   * @return isPublic
  **/
  @javax.annotation.Nonnull
  public Boolean getIsPublic() {
    return isPublic;
  }


  public void setIsPublic(Boolean isPublic) {
    this.isPublic = isPublic;
  }


  public ListAProjectSIssues200ResponseInner isSubscribed(Boolean isSubscribed) {
    
    this.isSubscribed = isSubscribed;
    return this;
  }

   /**
   * Get isSubscribed
   * @return isSubscribed
  **/
  @javax.annotation.Nonnull
  public Boolean getIsSubscribed() {
    return isSubscribed;
  }


  public void setIsSubscribed(Boolean isSubscribed) {
    this.isSubscribed = isSubscribed;
  }


  public ListAProjectSIssues200ResponseInner lastSeen(String lastSeen) {
    
    this.lastSeen = lastSeen;
    return this;
  }

   /**
   * Get lastSeen
   * @return lastSeen
  **/
  @javax.annotation.Nonnull
  public String getLastSeen() {
    return lastSeen;
  }


  public void setLastSeen(String lastSeen) {
    this.lastSeen = lastSeen;
  }


  public ListAProjectSIssues200ResponseInner level(String level) {
    
    this.level = level;
    return this;
  }

   /**
   * Get level
   * @return level
  **/
  @javax.annotation.Nonnull
  public String getLevel() {
    return level;
  }


  public void setLevel(String level) {
    this.level = level;
  }


  public ListAProjectSIssues200ResponseInner logger(String logger) {
    
    this.logger = logger;
    return this;
  }

   /**
   * Get logger
   * @return logger
  **/
  @javax.annotation.Nullable
  public String getLogger() {
    return logger;
  }


  public void setLogger(String logger) {
    this.logger = logger;
  }


  public ListAProjectSIssues200ResponseInner metadata(ListAProjectSIssues200ResponseInnerMetadata metadata) {
    
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nonnull
  public ListAProjectSIssues200ResponseInnerMetadata getMetadata() {
    return metadata;
  }


  public void setMetadata(ListAProjectSIssues200ResponseInnerMetadata metadata) {
    this.metadata = metadata;
  }


  public ListAProjectSIssues200ResponseInner numComments(Integer numComments) {
    
    this.numComments = numComments;
    return this;
  }

   /**
   * Get numComments
   * @return numComments
  **/
  @javax.annotation.Nonnull
  public Integer getNumComments() {
    return numComments;
  }


  public void setNumComments(Integer numComments) {
    this.numComments = numComments;
  }


  public ListAProjectSIssues200ResponseInner permalink(String permalink) {
    
    this.permalink = permalink;
    return this;
  }

   /**
   * Get permalink
   * @return permalink
  **/
  @javax.annotation.Nonnull
  public String getPermalink() {
    return permalink;
  }


  public void setPermalink(String permalink) {
    this.permalink = permalink;
  }


  public ListAProjectSIssues200ResponseInner project(ListAProjectSIssues200ResponseInnerProject project) {
    
    this.project = project;
    return this;
  }

   /**
   * Get project
   * @return project
  **/
  @javax.annotation.Nonnull
  public ListAProjectSIssues200ResponseInnerProject getProject() {
    return project;
  }


  public void setProject(ListAProjectSIssues200ResponseInnerProject project) {
    this.project = project;
  }


  public ListAProjectSIssues200ResponseInner shareId(String shareId) {
    
    this.shareId = shareId;
    return this;
  }

   /**
   * Get shareId
   * @return shareId
  **/
  @javax.annotation.Nullable
  public String getShareId() {
    return shareId;
  }


  public void setShareId(String shareId) {
    this.shareId = shareId;
  }


  public ListAProjectSIssues200ResponseInner shortId(String shortId) {
    
    this.shortId = shortId;
    return this;
  }

   /**
   * Get shortId
   * @return shortId
  **/
  @javax.annotation.Nonnull
  public String getShortId() {
    return shortId;
  }


  public void setShortId(String shortId) {
    this.shortId = shortId;
  }


  public ListAProjectSIssues200ResponseInner stats(ListAProjectSIssues200ResponseInnerStats stats) {
    
    this.stats = stats;
    return this;
  }

   /**
   * Get stats
   * @return stats
  **/
  @javax.annotation.Nonnull
  public ListAProjectSIssues200ResponseInnerStats getStats() {
    return stats;
  }


  public void setStats(ListAProjectSIssues200ResponseInnerStats stats) {
    this.stats = stats;
  }


  public ListAProjectSIssues200ResponseInner status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public ListAProjectSIssues200ResponseInner statusDetails(Object statusDetails) {
    
    this.statusDetails = statusDetails;
    return this;
  }

   /**
   * Get statusDetails
   * @return statusDetails
  **/
  @javax.annotation.Nonnull
  public Object getStatusDetails() {
    return statusDetails;
  }


  public void setStatusDetails(Object statusDetails) {
    this.statusDetails = statusDetails;
  }


  public ListAProjectSIssues200ResponseInner subscriptionDetails(Object subscriptionDetails) {
    
    this.subscriptionDetails = subscriptionDetails;
    return this;
  }

   /**
   * Get subscriptionDetails
   * @return subscriptionDetails
  **/
  @javax.annotation.Nullable
  public Object getSubscriptionDetails() {
    return subscriptionDetails;
  }


  public void setSubscriptionDetails(Object subscriptionDetails) {
    this.subscriptionDetails = subscriptionDetails;
  }


  public ListAProjectSIssues200ResponseInner title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }


  public ListAProjectSIssues200ResponseInner type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public ListAProjectSIssues200ResponseInner userCount(Integer userCount) {
    
    this.userCount = userCount;
    return this;
  }

   /**
   * Get userCount
   * @return userCount
  **/
  @javax.annotation.Nonnull
  public Integer getUserCount() {
    return userCount;
  }


  public void setUserCount(Integer userCount) {
    this.userCount = userCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListAProjectSIssues200ResponseInner listAProjectSIssues200ResponseInner = (ListAProjectSIssues200ResponseInner) o;
    return Objects.equals(this.annotations, listAProjectSIssues200ResponseInner.annotations) &&
        Objects.equals(this.assignedTo, listAProjectSIssues200ResponseInner.assignedTo) &&
        Objects.equals(this.count, listAProjectSIssues200ResponseInner.count) &&
        Objects.equals(this.culprit, listAProjectSIssues200ResponseInner.culprit) &&
        Objects.equals(this.firstSeen, listAProjectSIssues200ResponseInner.firstSeen) &&
        Objects.equals(this.hasSeen, listAProjectSIssues200ResponseInner.hasSeen) &&
        Objects.equals(this.id, listAProjectSIssues200ResponseInner.id) &&
        Objects.equals(this.isBookmarked, listAProjectSIssues200ResponseInner.isBookmarked) &&
        Objects.equals(this.isPublic, listAProjectSIssues200ResponseInner.isPublic) &&
        Objects.equals(this.isSubscribed, listAProjectSIssues200ResponseInner.isSubscribed) &&
        Objects.equals(this.lastSeen, listAProjectSIssues200ResponseInner.lastSeen) &&
        Objects.equals(this.level, listAProjectSIssues200ResponseInner.level) &&
        Objects.equals(this.logger, listAProjectSIssues200ResponseInner.logger) &&
        Objects.equals(this.metadata, listAProjectSIssues200ResponseInner.metadata) &&
        Objects.equals(this.numComments, listAProjectSIssues200ResponseInner.numComments) &&
        Objects.equals(this.permalink, listAProjectSIssues200ResponseInner.permalink) &&
        Objects.equals(this.project, listAProjectSIssues200ResponseInner.project) &&
        Objects.equals(this.shareId, listAProjectSIssues200ResponseInner.shareId) &&
        Objects.equals(this.shortId, listAProjectSIssues200ResponseInner.shortId) &&
        Objects.equals(this.stats, listAProjectSIssues200ResponseInner.stats) &&
        Objects.equals(this.status, listAProjectSIssues200ResponseInner.status) &&
        Objects.equals(this.statusDetails, listAProjectSIssues200ResponseInner.statusDetails) &&
        Objects.equals(this.subscriptionDetails, listAProjectSIssues200ResponseInner.subscriptionDetails) &&
        Objects.equals(this.title, listAProjectSIssues200ResponseInner.title) &&
        Objects.equals(this.type, listAProjectSIssues200ResponseInner.type) &&
        Objects.equals(this.userCount, listAProjectSIssues200ResponseInner.userCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annotations, assignedTo, count, culprit, firstSeen, hasSeen, id, isBookmarked, isPublic, isSubscribed, lastSeen, level, logger, metadata, numComments, permalink, project, shareId, shortId, stats, status, statusDetails, subscriptionDetails, title, type, userCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListAProjectSIssues200ResponseInner {\n");
    sb.append("    annotations: ").append(toIndentedString(annotations)).append("\n");
    sb.append("    assignedTo: ").append(toIndentedString(assignedTo)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    culprit: ").append(toIndentedString(culprit)).append("\n");
    sb.append("    firstSeen: ").append(toIndentedString(firstSeen)).append("\n");
    sb.append("    hasSeen: ").append(toIndentedString(hasSeen)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isBookmarked: ").append(toIndentedString(isBookmarked)).append("\n");
    sb.append("    isPublic: ").append(toIndentedString(isPublic)).append("\n");
    sb.append("    isSubscribed: ").append(toIndentedString(isSubscribed)).append("\n");
    sb.append("    lastSeen: ").append(toIndentedString(lastSeen)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    logger: ").append(toIndentedString(logger)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    numComments: ").append(toIndentedString(numComments)).append("\n");
    sb.append("    permalink: ").append(toIndentedString(permalink)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    shareId: ").append(toIndentedString(shareId)).append("\n");
    sb.append("    shortId: ").append(toIndentedString(shortId)).append("\n");
    sb.append("    stats: ").append(toIndentedString(stats)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusDetails: ").append(toIndentedString(statusDetails)).append("\n");
    sb.append("    subscriptionDetails: ").append(toIndentedString(subscriptionDetails)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    userCount: ").append(toIndentedString(userCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("annotations");
    openapiFields.add("assignedTo");
    openapiFields.add("count");
    openapiFields.add("culprit");
    openapiFields.add("firstSeen");
    openapiFields.add("hasSeen");
    openapiFields.add("id");
    openapiFields.add("isBookmarked");
    openapiFields.add("isPublic");
    openapiFields.add("isSubscribed");
    openapiFields.add("lastSeen");
    openapiFields.add("level");
    openapiFields.add("logger");
    openapiFields.add("metadata");
    openapiFields.add("numComments");
    openapiFields.add("permalink");
    openapiFields.add("project");
    openapiFields.add("shareId");
    openapiFields.add("shortId");
    openapiFields.add("stats");
    openapiFields.add("status");
    openapiFields.add("statusDetails");
    openapiFields.add("subscriptionDetails");
    openapiFields.add("title");
    openapiFields.add("type");
    openapiFields.add("userCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("annotations");
    openapiRequiredFields.add("assignedTo");
    openapiRequiredFields.add("count");
    openapiRequiredFields.add("culprit");
    openapiRequiredFields.add("firstSeen");
    openapiRequiredFields.add("hasSeen");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("isBookmarked");
    openapiRequiredFields.add("isPublic");
    openapiRequiredFields.add("isSubscribed");
    openapiRequiredFields.add("lastSeen");
    openapiRequiredFields.add("level");
    openapiRequiredFields.add("logger");
    openapiRequiredFields.add("metadata");
    openapiRequiredFields.add("numComments");
    openapiRequiredFields.add("permalink");
    openapiRequiredFields.add("project");
    openapiRequiredFields.add("shareId");
    openapiRequiredFields.add("shortId");
    openapiRequiredFields.add("stats");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("statusDetails");
    openapiRequiredFields.add("subscriptionDetails");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("userCount");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ListAProjectSIssues200ResponseInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ListAProjectSIssues200ResponseInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListAProjectSIssues200ResponseInner is not found in the empty JSON string", ListAProjectSIssues200ResponseInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ListAProjectSIssues200ResponseInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListAProjectSIssues200ResponseInner` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ListAProjectSIssues200ResponseInner.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the required json array is present
      if (jsonObj.get("annotations") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("annotations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `annotations` to be an array in the JSON string but got `%s`", jsonObj.get("annotations").toString()));
      }
      if (!jsonObj.get("count").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `count` to be a primitive type in the JSON string but got `%s`", jsonObj.get("count").toString()));
      }
      if (!jsonObj.get("culprit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `culprit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("culprit").toString()));
      }
      if (!jsonObj.get("firstSeen").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstSeen` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstSeen").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("lastSeen").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastSeen` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastSeen").toString()));
      }
      if (!jsonObj.get("level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("level").toString()));
      }
      if (!jsonObj.get("logger").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logger` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logger").toString()));
      }
      // validate the required field `metadata`
      ListAProjectSIssues200ResponseInnerMetadata.validateJsonObject(jsonObj.getAsJsonObject("metadata"));
      if (!jsonObj.get("permalink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permalink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permalink").toString()));
      }
      // validate the required field `project`
      ListAProjectSIssues200ResponseInnerProject.validateJsonObject(jsonObj.getAsJsonObject("project"));
      if (!jsonObj.get("shareId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shareId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shareId").toString()));
      }
      if (!jsonObj.get("shortId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shortId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shortId").toString()));
      }
      // validate the required field `stats`
      ListAProjectSIssues200ResponseInnerStats.validateJsonObject(jsonObj.getAsJsonObject("stats"));
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListAProjectSIssues200ResponseInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListAProjectSIssues200ResponseInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListAProjectSIssues200ResponseInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListAProjectSIssues200ResponseInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ListAProjectSIssues200ResponseInner>() {
           @Override
           public void write(JsonWriter out, ListAProjectSIssues200ResponseInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListAProjectSIssues200ResponseInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ListAProjectSIssues200ResponseInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ListAProjectSIssues200ResponseInner
  * @throws IOException if the JSON string is invalid with respect to ListAProjectSIssues200ResponseInner
  */
  public static ListAProjectSIssues200ResponseInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListAProjectSIssues200ResponseInner.class);
  }

 /**
  * Convert an instance of ListAProjectSIssues200ResponseInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

