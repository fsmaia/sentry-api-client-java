/*
 * API Reference
 * Sentry Public API
 *
 * The version of the OpenAPI document: v0
 * Contact: partners@sentry.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sentry.api.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.sentry.api.client.model.ListAnOrganizationSUsers200ResponseInnerUserEmailsInner;
import com.sentry.api.client.model.RetrieveATeam200ResponseAvatar;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.sentry.api.client.JSON;

/**
 * ListAnOrganizationSUsers200ResponseInnerUser
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-15T10:01:41.950429Z[Etc/UTC]")
public class ListAnOrganizationSUsers200ResponseInnerUser implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_LAST_LOGIN = "lastLogin";
  @SerializedName(SERIALIZED_NAME_LAST_LOGIN)
  private String lastLogin;

  public static final String SERIALIZED_NAME_IS_SUPERUSER = "isSuperuser";
  @SerializedName(SERIALIZED_NAME_IS_SUPERUSER)
  private Boolean isSuperuser;

  public static final String SERIALIZED_NAME_IS_MANAGED = "isManaged";
  @SerializedName(SERIALIZED_NAME_IS_MANAGED)
  private Boolean isManaged;

  public static final String SERIALIZED_NAME_LAST_ACTIVE = "lastActive";
  @SerializedName(SERIALIZED_NAME_LAST_ACTIVE)
  private String lastActive;

  public static final String SERIALIZED_NAME_IS_STAFF = "isStaff";
  @SerializedName(SERIALIZED_NAME_IS_STAFF)
  private Boolean isStaff;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "isActive";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_HAS2FA = "has2fa";
  @SerializedName(SERIALIZED_NAME_HAS2FA)
  private Boolean has2fa;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_AVATAR_URL = "avatarUrl";
  @SerializedName(SERIALIZED_NAME_AVATAR_URL)
  private String avatarUrl;

  public static final String SERIALIZED_NAME_DATE_JOINED = "dateJoined";
  @SerializedName(SERIALIZED_NAME_DATE_JOINED)
  private String dateJoined;

  public static final String SERIALIZED_NAME_EMAILS = "emails";
  @SerializedName(SERIALIZED_NAME_EMAILS)
  private List<ListAnOrganizationSUsers200ResponseInnerUserEmailsInner> emails = new ArrayList<>();

  public static final String SERIALIZED_NAME_AVATAR = "avatar";
  @SerializedName(SERIALIZED_NAME_AVATAR)
  private RetrieveATeam200ResponseAvatar avatar;

  public static final String SERIALIZED_NAME_HAS_PASSWORD_AUTH = "hasPasswordAuth";
  @SerializedName(SERIALIZED_NAME_HAS_PASSWORD_AUTH)
  private Boolean hasPasswordAuth;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public ListAnOrganizationSUsers200ResponseInnerUser() {
  }

  public ListAnOrganizationSUsers200ResponseInnerUser username(String username) {
    
    this.username = username;
    return this;
  }

   /**
   * Get username
   * @return username
  **/
  @javax.annotation.Nonnull
  public String getUsername() {
    return username;
  }


  public void setUsername(String username) {
    this.username = username;
  }


  public ListAnOrganizationSUsers200ResponseInnerUser lastLogin(String lastLogin) {
    
    this.lastLogin = lastLogin;
    return this;
  }

   /**
   * Get lastLogin
   * @return lastLogin
  **/
  @javax.annotation.Nullable
  public String getLastLogin() {
    return lastLogin;
  }


  public void setLastLogin(String lastLogin) {
    this.lastLogin = lastLogin;
  }


  public ListAnOrganizationSUsers200ResponseInnerUser isSuperuser(Boolean isSuperuser) {
    
    this.isSuperuser = isSuperuser;
    return this;
  }

   /**
   * Get isSuperuser
   * @return isSuperuser
  **/
  @javax.annotation.Nonnull
  public Boolean getIsSuperuser() {
    return isSuperuser;
  }


  public void setIsSuperuser(Boolean isSuperuser) {
    this.isSuperuser = isSuperuser;
  }


  public ListAnOrganizationSUsers200ResponseInnerUser isManaged(Boolean isManaged) {
    
    this.isManaged = isManaged;
    return this;
  }

   /**
   * Get isManaged
   * @return isManaged
  **/
  @javax.annotation.Nonnull
  public Boolean getIsManaged() {
    return isManaged;
  }


  public void setIsManaged(Boolean isManaged) {
    this.isManaged = isManaged;
  }


  public ListAnOrganizationSUsers200ResponseInnerUser lastActive(String lastActive) {
    
    this.lastActive = lastActive;
    return this;
  }

   /**
   * Get lastActive
   * @return lastActive
  **/
  @javax.annotation.Nonnull
  public String getLastActive() {
    return lastActive;
  }


  public void setLastActive(String lastActive) {
    this.lastActive = lastActive;
  }


  public ListAnOrganizationSUsers200ResponseInnerUser isStaff(Boolean isStaff) {
    
    this.isStaff = isStaff;
    return this;
  }

   /**
   * Get isStaff
   * @return isStaff
  **/
  @javax.annotation.Nonnull
  public Boolean getIsStaff() {
    return isStaff;
  }


  public void setIsStaff(Boolean isStaff) {
    this.isStaff = isStaff;
  }


  public ListAnOrganizationSUsers200ResponseInnerUser id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public ListAnOrganizationSUsers200ResponseInnerUser isActive(Boolean isActive) {
    
    this.isActive = isActive;
    return this;
  }

   /**
   * Get isActive
   * @return isActive
  **/
  @javax.annotation.Nonnull
  public Boolean getIsActive() {
    return isActive;
  }


  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public ListAnOrganizationSUsers200ResponseInnerUser has2fa(Boolean has2fa) {
    
    this.has2fa = has2fa;
    return this;
  }

   /**
   * Get has2fa
   * @return has2fa
  **/
  @javax.annotation.Nonnull
  public Boolean getHas2fa() {
    return has2fa;
  }


  public void setHas2fa(Boolean has2fa) {
    this.has2fa = has2fa;
  }


  public ListAnOrganizationSUsers200ResponseInnerUser name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public ListAnOrganizationSUsers200ResponseInnerUser avatarUrl(String avatarUrl) {
    
    this.avatarUrl = avatarUrl;
    return this;
  }

   /**
   * Get avatarUrl
   * @return avatarUrl
  **/
  @javax.annotation.Nonnull
  public String getAvatarUrl() {
    return avatarUrl;
  }


  public void setAvatarUrl(String avatarUrl) {
    this.avatarUrl = avatarUrl;
  }


  public ListAnOrganizationSUsers200ResponseInnerUser dateJoined(String dateJoined) {
    
    this.dateJoined = dateJoined;
    return this;
  }

   /**
   * Get dateJoined
   * @return dateJoined
  **/
  @javax.annotation.Nonnull
  public String getDateJoined() {
    return dateJoined;
  }


  public void setDateJoined(String dateJoined) {
    this.dateJoined = dateJoined;
  }


  public ListAnOrganizationSUsers200ResponseInnerUser emails(List<ListAnOrganizationSUsers200ResponseInnerUserEmailsInner> emails) {
    
    this.emails = emails;
    return this;
  }

  public ListAnOrganizationSUsers200ResponseInnerUser addEmailsItem(ListAnOrganizationSUsers200ResponseInnerUserEmailsInner emailsItem) {
    if (this.emails == null) {
      this.emails = new ArrayList<>();
    }
    this.emails.add(emailsItem);
    return this;
  }

   /**
   * Get emails
   * @return emails
  **/
  @javax.annotation.Nonnull
  public List<ListAnOrganizationSUsers200ResponseInnerUserEmailsInner> getEmails() {
    return emails;
  }


  public void setEmails(List<ListAnOrganizationSUsers200ResponseInnerUserEmailsInner> emails) {
    this.emails = emails;
  }


  public ListAnOrganizationSUsers200ResponseInnerUser avatar(RetrieveATeam200ResponseAvatar avatar) {
    
    this.avatar = avatar;
    return this;
  }

   /**
   * Get avatar
   * @return avatar
  **/
  @javax.annotation.Nonnull
  public RetrieveATeam200ResponseAvatar getAvatar() {
    return avatar;
  }


  public void setAvatar(RetrieveATeam200ResponseAvatar avatar) {
    this.avatar = avatar;
  }


  public ListAnOrganizationSUsers200ResponseInnerUser hasPasswordAuth(Boolean hasPasswordAuth) {
    
    this.hasPasswordAuth = hasPasswordAuth;
    return this;
  }

   /**
   * Get hasPasswordAuth
   * @return hasPasswordAuth
  **/
  @javax.annotation.Nonnull
  public Boolean getHasPasswordAuth() {
    return hasPasswordAuth;
  }


  public void setHasPasswordAuth(Boolean hasPasswordAuth) {
    this.hasPasswordAuth = hasPasswordAuth;
  }


  public ListAnOrganizationSUsers200ResponseInnerUser email(String email) {
    
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @javax.annotation.Nonnull
  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    this.email = email;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListAnOrganizationSUsers200ResponseInnerUser listAnOrganizationSUsers200ResponseInnerUser = (ListAnOrganizationSUsers200ResponseInnerUser) o;
    return Objects.equals(this.username, listAnOrganizationSUsers200ResponseInnerUser.username) &&
        Objects.equals(this.lastLogin, listAnOrganizationSUsers200ResponseInnerUser.lastLogin) &&
        Objects.equals(this.isSuperuser, listAnOrganizationSUsers200ResponseInnerUser.isSuperuser) &&
        Objects.equals(this.isManaged, listAnOrganizationSUsers200ResponseInnerUser.isManaged) &&
        Objects.equals(this.lastActive, listAnOrganizationSUsers200ResponseInnerUser.lastActive) &&
        Objects.equals(this.isStaff, listAnOrganizationSUsers200ResponseInnerUser.isStaff) &&
        Objects.equals(this.id, listAnOrganizationSUsers200ResponseInnerUser.id) &&
        Objects.equals(this.isActive, listAnOrganizationSUsers200ResponseInnerUser.isActive) &&
        Objects.equals(this.has2fa, listAnOrganizationSUsers200ResponseInnerUser.has2fa) &&
        Objects.equals(this.name, listAnOrganizationSUsers200ResponseInnerUser.name) &&
        Objects.equals(this.avatarUrl, listAnOrganizationSUsers200ResponseInnerUser.avatarUrl) &&
        Objects.equals(this.dateJoined, listAnOrganizationSUsers200ResponseInnerUser.dateJoined) &&
        Objects.equals(this.emails, listAnOrganizationSUsers200ResponseInnerUser.emails) &&
        Objects.equals(this.avatar, listAnOrganizationSUsers200ResponseInnerUser.avatar) &&
        Objects.equals(this.hasPasswordAuth, listAnOrganizationSUsers200ResponseInnerUser.hasPasswordAuth) &&
        Objects.equals(this.email, listAnOrganizationSUsers200ResponseInnerUser.email);
  }

  @Override
  public int hashCode() {
    return Objects.hash(username, lastLogin, isSuperuser, isManaged, lastActive, isStaff, id, isActive, has2fa, name, avatarUrl, dateJoined, emails, avatar, hasPasswordAuth, email);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListAnOrganizationSUsers200ResponseInnerUser {\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    lastLogin: ").append(toIndentedString(lastLogin)).append("\n");
    sb.append("    isSuperuser: ").append(toIndentedString(isSuperuser)).append("\n");
    sb.append("    isManaged: ").append(toIndentedString(isManaged)).append("\n");
    sb.append("    lastActive: ").append(toIndentedString(lastActive)).append("\n");
    sb.append("    isStaff: ").append(toIndentedString(isStaff)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    has2fa: ").append(toIndentedString(has2fa)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    avatarUrl: ").append(toIndentedString(avatarUrl)).append("\n");
    sb.append("    dateJoined: ").append(toIndentedString(dateJoined)).append("\n");
    sb.append("    emails: ").append(toIndentedString(emails)).append("\n");
    sb.append("    avatar: ").append(toIndentedString(avatar)).append("\n");
    sb.append("    hasPasswordAuth: ").append(toIndentedString(hasPasswordAuth)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("username");
    openapiFields.add("lastLogin");
    openapiFields.add("isSuperuser");
    openapiFields.add("isManaged");
    openapiFields.add("lastActive");
    openapiFields.add("isStaff");
    openapiFields.add("id");
    openapiFields.add("isActive");
    openapiFields.add("has2fa");
    openapiFields.add("name");
    openapiFields.add("avatarUrl");
    openapiFields.add("dateJoined");
    openapiFields.add("emails");
    openapiFields.add("avatar");
    openapiFields.add("hasPasswordAuth");
    openapiFields.add("email");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("username");
    openapiRequiredFields.add("lastLogin");
    openapiRequiredFields.add("isSuperuser");
    openapiRequiredFields.add("isManaged");
    openapiRequiredFields.add("lastActive");
    openapiRequiredFields.add("isStaff");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("isActive");
    openapiRequiredFields.add("has2fa");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("avatarUrl");
    openapiRequiredFields.add("dateJoined");
    openapiRequiredFields.add("emails");
    openapiRequiredFields.add("avatar");
    openapiRequiredFields.add("hasPasswordAuth");
    openapiRequiredFields.add("email");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ListAnOrganizationSUsers200ResponseInnerUser
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ListAnOrganizationSUsers200ResponseInnerUser.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListAnOrganizationSUsers200ResponseInnerUser is not found in the empty JSON string", ListAnOrganizationSUsers200ResponseInnerUser.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ListAnOrganizationSUsers200ResponseInnerUser.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListAnOrganizationSUsers200ResponseInnerUser` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ListAnOrganizationSUsers200ResponseInnerUser.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if (!jsonObj.get("lastLogin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastLogin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastLogin").toString()));
      }
      if (!jsonObj.get("lastActive").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastActive` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastActive").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("avatarUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avatarUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avatarUrl").toString()));
      }
      if (!jsonObj.get("dateJoined").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateJoined` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateJoined").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("emails").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `emails` to be an array in the JSON string but got `%s`", jsonObj.get("emails").toString()));
      }

      JsonArray jsonArrayemails = jsonObj.getAsJsonArray("emails");
      // validate the required field `emails` (array)
      for (int i = 0; i < jsonArrayemails.size(); i++) {
        ListAnOrganizationSUsers200ResponseInnerUserEmailsInner.validateJsonObject(jsonArrayemails.get(i).getAsJsonObject());
      };
      // validate the required field `avatar`
      RetrieveATeam200ResponseAvatar.validateJsonObject(jsonObj.getAsJsonObject("avatar"));
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListAnOrganizationSUsers200ResponseInnerUser.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListAnOrganizationSUsers200ResponseInnerUser' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListAnOrganizationSUsers200ResponseInnerUser> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListAnOrganizationSUsers200ResponseInnerUser.class));

       return (TypeAdapter<T>) new TypeAdapter<ListAnOrganizationSUsers200ResponseInnerUser>() {
           @Override
           public void write(JsonWriter out, ListAnOrganizationSUsers200ResponseInnerUser value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListAnOrganizationSUsers200ResponseInnerUser read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ListAnOrganizationSUsers200ResponseInnerUser given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ListAnOrganizationSUsers200ResponseInnerUser
  * @throws IOException if the JSON string is invalid with respect to ListAnOrganizationSUsers200ResponseInnerUser
  */
  public static ListAnOrganizationSUsers200ResponseInnerUser fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListAnOrganizationSUsers200ResponseInnerUser.class);
  }

 /**
  * Convert an instance of ListAnOrganizationSUsers200ResponseInnerUser to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

