/*
 * API Reference
 * Sentry Public API
 *
 * The version of the OpenAPI document: v0
 * Contact: partners@sentry.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sentry.api.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.sentry.api.client.model.ResolveAnEventID200ResponseEventContexts;
import com.sentry.api.client.model.ResolveAnEventID200ResponseEventEntriesInner;
import com.sentry.api.client.model.ResolveAnEventID200ResponseEventUser;
import com.sentry.api.client.model.RetrieveAnEventForAProject200ResponseContext;
import com.sentry.api.client.model.RetrieveAnEventForAProject200ResponseErrorsInner;
import com.sentry.api.client.model.RetrieveAnEventForAProject200ResponseMeta;
import com.sentry.api.client.model.RetrieveAnEventForAProject200ResponseMetadata;
import com.sentry.api.client.model.RetrieveAnEventForAProject200ResponseRelease;
import com.sentry.api.client.model.RetrieveAnEventForAProject200ResponseSdk;
import com.sentry.api.client.model.RetrieveAnEventForAProject200ResponseTagsInner;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.sentry.api.client.JSON;

/**
 * RetrieveAnEventForAProject200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-16T12:28:08.282703Z[Etc/UTC]")
public class RetrieveAnEventForAProject200Response {
  public static final String SERIALIZED_NAME_EVENT_I_D = "eventID";
  @SerializedName(SERIALIZED_NAME_EVENT_I_D)
  private String eventID;

  public static final String SERIALIZED_NAME_DIST = "dist";
  @SerializedName(SERIALIZED_NAME_DIST)
  private String dist;

  public static final String SERIALIZED_NAME_USER_REPORT = "userReport";
  @SerializedName(SERIALIZED_NAME_USER_REPORT)
  private Object userReport;

  public static final String SERIALIZED_NAME_PREVIOUS_EVENT_I_D = "previousEventID";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_EVENT_I_D)
  private String previousEventID;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Integer size;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<RetrieveAnEventForAProject200ResponseErrorsInner> errors = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLATFORM = "platform";
  @SerializedName(SERIALIZED_NAME_PLATFORM)
  private String platform;

  public static final String SERIALIZED_NAME_NEXT_EVENT_I_D = "nextEventID";
  @SerializedName(SERIALIZED_NAME_NEXT_EVENT_I_D)
  private String nextEventID;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private RetrieveAnEventForAProject200ResponseMetadata metadata;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<RetrieveAnEventForAProject200ResponseTagsInner> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATE_CREATED = "dateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private String dateCreated;

  public static final String SERIALIZED_NAME_DATE_RECEIVED = "dateReceived";
  @SerializedName(SERIALIZED_NAME_DATE_RECEIVED)
  private String dateReceived;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private ResolveAnEventID200ResponseEventUser user;

  public static final String SERIALIZED_NAME_ENTRIES = "entries";
  @SerializedName(SERIALIZED_NAME_ENTRIES)
  private List<ResolveAnEventID200ResponseEventEntriesInner> entries = new ArrayList<>();

  public static final String SERIALIZED_NAME_PACKAGES = "packages";
  @SerializedName(SERIALIZED_NAME_PACKAGES)
  private Object packages;

  public static final String SERIALIZED_NAME_SDK = "sdk";
  @SerializedName(SERIALIZED_NAME_SDK)
  private RetrieveAnEventForAProject200ResponseSdk sdk;

  public static final String SERIALIZED_NAME_META = "_meta";
  @SerializedName(SERIALIZED_NAME_META)
  private RetrieveAnEventForAProject200ResponseMeta meta;

  public static final String SERIALIZED_NAME_CONTEXTS = "contexts";
  @SerializedName(SERIALIZED_NAME_CONTEXTS)
  private ResolveAnEventID200ResponseEventContexts contexts;

  public static final String SERIALIZED_NAME_FINGERPRINTS = "fingerprints";
  @SerializedName(SERIALIZED_NAME_FINGERPRINTS)
  private List<String> fingerprints = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONTEXT = "context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  private RetrieveAnEventForAProject200ResponseContext context;

  public static final String SERIALIZED_NAME_RELEASE = "release";
  @SerializedName(SERIALIZED_NAME_RELEASE)
  private RetrieveAnEventForAProject200ResponseRelease release;

  public static final String SERIALIZED_NAME_GROUP_I_D = "groupID";
  @SerializedName(SERIALIZED_NAME_GROUP_I_D)
  private String groupID;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public RetrieveAnEventForAProject200Response() {
  }

  public RetrieveAnEventForAProject200Response eventID(String eventID) {
    
    this.eventID = eventID;
    return this;
  }

   /**
   * Get eventID
   * @return eventID
  **/
  @javax.annotation.Nonnull
  public String getEventID() {
    return eventID;
  }


  public void setEventID(String eventID) {
    this.eventID = eventID;
  }


  public RetrieveAnEventForAProject200Response dist(String dist) {
    
    this.dist = dist;
    return this;
  }

   /**
   * Get dist
   * @return dist
  **/
  @javax.annotation.Nullable
  public String getDist() {
    return dist;
  }


  public void setDist(String dist) {
    this.dist = dist;
  }


  public RetrieveAnEventForAProject200Response userReport(Object userReport) {
    
    this.userReport = userReport;
    return this;
  }

   /**
   * Get userReport
   * @return userReport
  **/
  @javax.annotation.Nullable
  public Object getUserReport() {
    return userReport;
  }


  public void setUserReport(Object userReport) {
    this.userReport = userReport;
  }


  public RetrieveAnEventForAProject200Response previousEventID(String previousEventID) {
    
    this.previousEventID = previousEventID;
    return this;
  }

   /**
   * Get previousEventID
   * @return previousEventID
  **/
  @javax.annotation.Nullable
  public String getPreviousEventID() {
    return previousEventID;
  }


  public void setPreviousEventID(String previousEventID) {
    this.previousEventID = previousEventID;
  }


  public RetrieveAnEventForAProject200Response message(String message) {
    
    this.message = message;
    return this;
  }

   /**
   * Get message
   * @return message
  **/
  @javax.annotation.Nonnull
  public String getMessage() {
    return message;
  }


  public void setMessage(String message) {
    this.message = message;
  }


  public RetrieveAnEventForAProject200Response id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public RetrieveAnEventForAProject200Response size(Integer size) {
    
    this.size = size;
    return this;
  }

   /**
   * Get size
   * @return size
  **/
  @javax.annotation.Nonnull
  public Integer getSize() {
    return size;
  }


  public void setSize(Integer size) {
    this.size = size;
  }


  public RetrieveAnEventForAProject200Response errors(List<RetrieveAnEventForAProject200ResponseErrorsInner> errors) {
    
    this.errors = errors;
    return this;
  }

  public RetrieveAnEventForAProject200Response addErrorsItem(RetrieveAnEventForAProject200ResponseErrorsInner errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<>();
    }
    this.errors.add(errorsItem);
    return this;
  }

   /**
   * Get errors
   * @return errors
  **/
  @javax.annotation.Nonnull
  public List<RetrieveAnEventForAProject200ResponseErrorsInner> getErrors() {
    return errors;
  }


  public void setErrors(List<RetrieveAnEventForAProject200ResponseErrorsInner> errors) {
    this.errors = errors;
  }


  public RetrieveAnEventForAProject200Response platform(String platform) {
    
    this.platform = platform;
    return this;
  }

   /**
   * Get platform
   * @return platform
  **/
  @javax.annotation.Nonnull
  public String getPlatform() {
    return platform;
  }


  public void setPlatform(String platform) {
    this.platform = platform;
  }


  public RetrieveAnEventForAProject200Response nextEventID(String nextEventID) {
    
    this.nextEventID = nextEventID;
    return this;
  }

   /**
   * Get nextEventID
   * @return nextEventID
  **/
  @javax.annotation.Nullable
  public String getNextEventID() {
    return nextEventID;
  }


  public void setNextEventID(String nextEventID) {
    this.nextEventID = nextEventID;
  }


  public RetrieveAnEventForAProject200Response type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public RetrieveAnEventForAProject200Response metadata(RetrieveAnEventForAProject200ResponseMetadata metadata) {
    
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nonnull
  public RetrieveAnEventForAProject200ResponseMetadata getMetadata() {
    return metadata;
  }


  public void setMetadata(RetrieveAnEventForAProject200ResponseMetadata metadata) {
    this.metadata = metadata;
  }


  public RetrieveAnEventForAProject200Response tags(List<RetrieveAnEventForAProject200ResponseTagsInner> tags) {
    
    this.tags = tags;
    return this;
  }

  public RetrieveAnEventForAProject200Response addTagsItem(RetrieveAnEventForAProject200ResponseTagsInner tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nonnull
  public List<RetrieveAnEventForAProject200ResponseTagsInner> getTags() {
    return tags;
  }


  public void setTags(List<RetrieveAnEventForAProject200ResponseTagsInner> tags) {
    this.tags = tags;
  }


  public RetrieveAnEventForAProject200Response dateCreated(String dateCreated) {
    
    this.dateCreated = dateCreated;
    return this;
  }

   /**
   * Get dateCreated
   * @return dateCreated
  **/
  @javax.annotation.Nonnull
  public String getDateCreated() {
    return dateCreated;
  }


  public void setDateCreated(String dateCreated) {
    this.dateCreated = dateCreated;
  }


  public RetrieveAnEventForAProject200Response dateReceived(String dateReceived) {
    
    this.dateReceived = dateReceived;
    return this;
  }

   /**
   * Get dateReceived
   * @return dateReceived
  **/
  @javax.annotation.Nonnull
  public String getDateReceived() {
    return dateReceived;
  }


  public void setDateReceived(String dateReceived) {
    this.dateReceived = dateReceived;
  }


  public RetrieveAnEventForAProject200Response user(ResolveAnEventID200ResponseEventUser user) {
    
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @javax.annotation.Nullable
  public ResolveAnEventID200ResponseEventUser getUser() {
    return user;
  }


  public void setUser(ResolveAnEventID200ResponseEventUser user) {
    this.user = user;
  }


  public RetrieveAnEventForAProject200Response entries(List<ResolveAnEventID200ResponseEventEntriesInner> entries) {
    
    this.entries = entries;
    return this;
  }

  public RetrieveAnEventForAProject200Response addEntriesItem(ResolveAnEventID200ResponseEventEntriesInner entriesItem) {
    if (this.entries == null) {
      this.entries = new ArrayList<>();
    }
    this.entries.add(entriesItem);
    return this;
  }

   /**
   * Get entries
   * @return entries
  **/
  @javax.annotation.Nonnull
  public List<ResolveAnEventID200ResponseEventEntriesInner> getEntries() {
    return entries;
  }


  public void setEntries(List<ResolveAnEventID200ResponseEventEntriesInner> entries) {
    this.entries = entries;
  }


  public RetrieveAnEventForAProject200Response packages(Object packages) {
    
    this.packages = packages;
    return this;
  }

   /**
   * Get packages
   * @return packages
  **/
  @javax.annotation.Nonnull
  public Object getPackages() {
    return packages;
  }


  public void setPackages(Object packages) {
    this.packages = packages;
  }


  public RetrieveAnEventForAProject200Response sdk(RetrieveAnEventForAProject200ResponseSdk sdk) {
    
    this.sdk = sdk;
    return this;
  }

   /**
   * Get sdk
   * @return sdk
  **/
  @javax.annotation.Nonnull
  public RetrieveAnEventForAProject200ResponseSdk getSdk() {
    return sdk;
  }


  public void setSdk(RetrieveAnEventForAProject200ResponseSdk sdk) {
    this.sdk = sdk;
  }


  public RetrieveAnEventForAProject200Response meta(RetrieveAnEventForAProject200ResponseMeta meta) {
    
    this.meta = meta;
    return this;
  }

   /**
   * Get meta
   * @return meta
  **/
  @javax.annotation.Nonnull
  public RetrieveAnEventForAProject200ResponseMeta getMeta() {
    return meta;
  }


  public void setMeta(RetrieveAnEventForAProject200ResponseMeta meta) {
    this.meta = meta;
  }


  public RetrieveAnEventForAProject200Response contexts(ResolveAnEventID200ResponseEventContexts contexts) {
    
    this.contexts = contexts;
    return this;
  }

   /**
   * Get contexts
   * @return contexts
  **/
  @javax.annotation.Nonnull
  public ResolveAnEventID200ResponseEventContexts getContexts() {
    return contexts;
  }


  public void setContexts(ResolveAnEventID200ResponseEventContexts contexts) {
    this.contexts = contexts;
  }


  public RetrieveAnEventForAProject200Response fingerprints(List<String> fingerprints) {
    
    this.fingerprints = fingerprints;
    return this;
  }

  public RetrieveAnEventForAProject200Response addFingerprintsItem(String fingerprintsItem) {
    if (this.fingerprints == null) {
      this.fingerprints = new ArrayList<>();
    }
    this.fingerprints.add(fingerprintsItem);
    return this;
  }

   /**
   * Get fingerprints
   * @return fingerprints
  **/
  @javax.annotation.Nonnull
  public List<String> getFingerprints() {
    return fingerprints;
  }


  public void setFingerprints(List<String> fingerprints) {
    this.fingerprints = fingerprints;
  }


  public RetrieveAnEventForAProject200Response context(RetrieveAnEventForAProject200ResponseContext context) {
    
    this.context = context;
    return this;
  }

   /**
   * Get context
   * @return context
  **/
  @javax.annotation.Nonnull
  public RetrieveAnEventForAProject200ResponseContext getContext() {
    return context;
  }


  public void setContext(RetrieveAnEventForAProject200ResponseContext context) {
    this.context = context;
  }


  public RetrieveAnEventForAProject200Response release(RetrieveAnEventForAProject200ResponseRelease release) {
    
    this.release = release;
    return this;
  }

   /**
   * Get release
   * @return release
  **/
  @javax.annotation.Nullable
  public RetrieveAnEventForAProject200ResponseRelease getRelease() {
    return release;
  }


  public void setRelease(RetrieveAnEventForAProject200ResponseRelease release) {
    this.release = release;
  }


  public RetrieveAnEventForAProject200Response groupID(String groupID) {
    
    this.groupID = groupID;
    return this;
  }

   /**
   * Get groupID
   * @return groupID
  **/
  @javax.annotation.Nonnull
  public String getGroupID() {
    return groupID;
  }


  public void setGroupID(String groupID) {
    this.groupID = groupID;
  }


  public RetrieveAnEventForAProject200Response title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RetrieveAnEventForAProject200Response retrieveAnEventForAProject200Response = (RetrieveAnEventForAProject200Response) o;
    return Objects.equals(this.eventID, retrieveAnEventForAProject200Response.eventID) &&
        Objects.equals(this.dist, retrieveAnEventForAProject200Response.dist) &&
        Objects.equals(this.userReport, retrieveAnEventForAProject200Response.userReport) &&
        Objects.equals(this.previousEventID, retrieveAnEventForAProject200Response.previousEventID) &&
        Objects.equals(this.message, retrieveAnEventForAProject200Response.message) &&
        Objects.equals(this.id, retrieveAnEventForAProject200Response.id) &&
        Objects.equals(this.size, retrieveAnEventForAProject200Response.size) &&
        Objects.equals(this.errors, retrieveAnEventForAProject200Response.errors) &&
        Objects.equals(this.platform, retrieveAnEventForAProject200Response.platform) &&
        Objects.equals(this.nextEventID, retrieveAnEventForAProject200Response.nextEventID) &&
        Objects.equals(this.type, retrieveAnEventForAProject200Response.type) &&
        Objects.equals(this.metadata, retrieveAnEventForAProject200Response.metadata) &&
        Objects.equals(this.tags, retrieveAnEventForAProject200Response.tags) &&
        Objects.equals(this.dateCreated, retrieveAnEventForAProject200Response.dateCreated) &&
        Objects.equals(this.dateReceived, retrieveAnEventForAProject200Response.dateReceived) &&
        Objects.equals(this.user, retrieveAnEventForAProject200Response.user) &&
        Objects.equals(this.entries, retrieveAnEventForAProject200Response.entries) &&
        Objects.equals(this.packages, retrieveAnEventForAProject200Response.packages) &&
        Objects.equals(this.sdk, retrieveAnEventForAProject200Response.sdk) &&
        Objects.equals(this.meta, retrieveAnEventForAProject200Response.meta) &&
        Objects.equals(this.contexts, retrieveAnEventForAProject200Response.contexts) &&
        Objects.equals(this.fingerprints, retrieveAnEventForAProject200Response.fingerprints) &&
        Objects.equals(this.context, retrieveAnEventForAProject200Response.context) &&
        Objects.equals(this.release, retrieveAnEventForAProject200Response.release) &&
        Objects.equals(this.groupID, retrieveAnEventForAProject200Response.groupID) &&
        Objects.equals(this.title, retrieveAnEventForAProject200Response.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventID, dist, userReport, previousEventID, message, id, size, errors, platform, nextEventID, type, metadata, tags, dateCreated, dateReceived, user, entries, packages, sdk, meta, contexts, fingerprints, context, release, groupID, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RetrieveAnEventForAProject200Response {\n");
    sb.append("    eventID: ").append(toIndentedString(eventID)).append("\n");
    sb.append("    dist: ").append(toIndentedString(dist)).append("\n");
    sb.append("    userReport: ").append(toIndentedString(userReport)).append("\n");
    sb.append("    previousEventID: ").append(toIndentedString(previousEventID)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    nextEventID: ").append(toIndentedString(nextEventID)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateReceived: ").append(toIndentedString(dateReceived)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    entries: ").append(toIndentedString(entries)).append("\n");
    sb.append("    packages: ").append(toIndentedString(packages)).append("\n");
    sb.append("    sdk: ").append(toIndentedString(sdk)).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    contexts: ").append(toIndentedString(contexts)).append("\n");
    sb.append("    fingerprints: ").append(toIndentedString(fingerprints)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    release: ").append(toIndentedString(release)).append("\n");
    sb.append("    groupID: ").append(toIndentedString(groupID)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eventID");
    openapiFields.add("dist");
    openapiFields.add("userReport");
    openapiFields.add("previousEventID");
    openapiFields.add("message");
    openapiFields.add("id");
    openapiFields.add("size");
    openapiFields.add("errors");
    openapiFields.add("platform");
    openapiFields.add("nextEventID");
    openapiFields.add("type");
    openapiFields.add("metadata");
    openapiFields.add("tags");
    openapiFields.add("dateCreated");
    openapiFields.add("dateReceived");
    openapiFields.add("user");
    openapiFields.add("entries");
    openapiFields.add("packages");
    openapiFields.add("sdk");
    openapiFields.add("_meta");
    openapiFields.add("contexts");
    openapiFields.add("fingerprints");
    openapiFields.add("context");
    openapiFields.add("release");
    openapiFields.add("groupID");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("eventID");
    openapiRequiredFields.add("dist");
    openapiRequiredFields.add("userReport");
    openapiRequiredFields.add("previousEventID");
    openapiRequiredFields.add("message");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("size");
    openapiRequiredFields.add("errors");
    openapiRequiredFields.add("platform");
    openapiRequiredFields.add("nextEventID");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("metadata");
    openapiRequiredFields.add("tags");
    openapiRequiredFields.add("dateCreated");
    openapiRequiredFields.add("dateReceived");
    openapiRequiredFields.add("user");
    openapiRequiredFields.add("entries");
    openapiRequiredFields.add("packages");
    openapiRequiredFields.add("sdk");
    openapiRequiredFields.add("_meta");
    openapiRequiredFields.add("contexts");
    openapiRequiredFields.add("fingerprints");
    openapiRequiredFields.add("context");
    openapiRequiredFields.add("release");
    openapiRequiredFields.add("groupID");
    openapiRequiredFields.add("title");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RetrieveAnEventForAProject200Response
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!RetrieveAnEventForAProject200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RetrieveAnEventForAProject200Response is not found in the empty JSON string", RetrieveAnEventForAProject200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!RetrieveAnEventForAProject200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RetrieveAnEventForAProject200Response` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RetrieveAnEventForAProject200Response.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("eventID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventID").toString()));
      }
      if (!jsonObj.get("dist").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dist` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dist").toString()));
      }
      if (!jsonObj.get("previousEventID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `previousEventID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("previousEventID").toString()));
      }
      if (!jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("errors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `errors` to be an array in the JSON string but got `%s`", jsonObj.get("errors").toString()));
      }

      JsonArray jsonArrayerrors = jsonObj.getAsJsonArray("errors");
      // validate the required field `errors` (array)
      for (int i = 0; i < jsonArrayerrors.size(); i++) {
        RetrieveAnEventForAProject200ResponseErrorsInner.validateJsonObject(jsonArrayerrors.get(i).getAsJsonObject());
      };
      if (!jsonObj.get("platform").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platform` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platform").toString()));
      }
      if (!jsonObj.get("nextEventID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextEventID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextEventID").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `metadata`
      RetrieveAnEventForAProject200ResponseMetadata.validateJsonObject(jsonObj.getAsJsonObject("metadata"));
      // ensure the json data is an array
      if (!jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }

      JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
      // validate the required field `tags` (array)
      for (int i = 0; i < jsonArraytags.size(); i++) {
        RetrieveAnEventForAProject200ResponseTagsInner.validateJsonObject(jsonArraytags.get(i).getAsJsonObject());
      };
      if (!jsonObj.get("dateCreated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateCreated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateCreated").toString()));
      }
      if (!jsonObj.get("dateReceived").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateReceived` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateReceived").toString()));
      }
      // validate the required field `user`
      ResolveAnEventID200ResponseEventUser.validateJsonObject(jsonObj.getAsJsonObject("user"));
      // ensure the json data is an array
      if (!jsonObj.get("entries").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `entries` to be an array in the JSON string but got `%s`", jsonObj.get("entries").toString()));
      }

      JsonArray jsonArrayentries = jsonObj.getAsJsonArray("entries");
      // validate the required field `entries` (array)
      for (int i = 0; i < jsonArrayentries.size(); i++) {
        ResolveAnEventID200ResponseEventEntriesInner.validateJsonObject(jsonArrayentries.get(i).getAsJsonObject());
      };
      // validate the required field `sdk`
      RetrieveAnEventForAProject200ResponseSdk.validateJsonObject(jsonObj.getAsJsonObject("sdk"));
      // validate the required field `_meta`
      RetrieveAnEventForAProject200ResponseMeta.validateJsonObject(jsonObj.getAsJsonObject("_meta"));
      // validate the required field `contexts`
      ResolveAnEventID200ResponseEventContexts.validateJsonObject(jsonObj.getAsJsonObject("contexts"));
      // ensure the required json array is present
      if (jsonObj.get("fingerprints") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("fingerprints").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fingerprints` to be an array in the JSON string but got `%s`", jsonObj.get("fingerprints").toString()));
      }
      // validate the required field `context`
      RetrieveAnEventForAProject200ResponseContext.validateJsonObject(jsonObj.getAsJsonObject("context"));
      // validate the required field `release`
      RetrieveAnEventForAProject200ResponseRelease.validateJsonObject(jsonObj.getAsJsonObject("release"));
      if (!jsonObj.get("groupID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupID").toString()));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RetrieveAnEventForAProject200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RetrieveAnEventForAProject200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RetrieveAnEventForAProject200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RetrieveAnEventForAProject200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<RetrieveAnEventForAProject200Response>() {
           @Override
           public void write(JsonWriter out, RetrieveAnEventForAProject200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RetrieveAnEventForAProject200Response read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RetrieveAnEventForAProject200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RetrieveAnEventForAProject200Response
  * @throws IOException if the JSON string is invalid with respect to RetrieveAnEventForAProject200Response
  */
  public static RetrieveAnEventForAProject200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RetrieveAnEventForAProject200Response.class);
  }

 /**
  * Convert an instance of RetrieveAnEventForAProject200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

