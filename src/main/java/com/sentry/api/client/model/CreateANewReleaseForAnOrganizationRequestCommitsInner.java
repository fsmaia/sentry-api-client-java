/*
 * API Reference
 * Sentry Public API
 *
 * The version of the OpenAPI document: v0
 * Contact: partners@sentry.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sentry.api.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.sentry.api.client.model.CreateANewReleaseForAnOrganizationRequestCommitsInnerPatchSetInner;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.sentry.api.client.JSON;

/**
 * CreateANewReleaseForAnOrganizationRequestCommitsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-16T12:28:08.282703Z[Etc/UTC]")
public class CreateANewReleaseForAnOrganizationRequestCommitsInner {
  public static final String SERIALIZED_NAME_PATCH_SET = "patch_set";
  @SerializedName(SERIALIZED_NAME_PATCH_SET)
  private List<CreateANewReleaseForAnOrganizationRequestCommitsInnerPatchSetInner> patchSet;

  public static final String SERIALIZED_NAME_REPOSITORY = "repository";
  @SerializedName(SERIALIZED_NAME_REPOSITORY)
  private String repository;

  public static final String SERIALIZED_NAME_AUTHOR_NAME = "author_name";
  @SerializedName(SERIALIZED_NAME_AUTHOR_NAME)
  private String authorName;

  public static final String SERIALIZED_NAME_AUTHOR_EMAIL = "author_email";
  @SerializedName(SERIALIZED_NAME_AUTHOR_EMAIL)
  private String authorEmail;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public CreateANewReleaseForAnOrganizationRequestCommitsInner() {
  }

  public CreateANewReleaseForAnOrganizationRequestCommitsInner patchSet(List<CreateANewReleaseForAnOrganizationRequestCommitsInnerPatchSetInner> patchSet) {
    
    this.patchSet = patchSet;
    return this;
  }

  public CreateANewReleaseForAnOrganizationRequestCommitsInner addPatchSetItem(CreateANewReleaseForAnOrganizationRequestCommitsInnerPatchSetInner patchSetItem) {
    if (this.patchSet == null) {
      this.patchSet = new ArrayList<>();
    }
    this.patchSet.add(patchSetItem);
    return this;
  }

   /**
   * A list of the files that have been changed in the commit. Specifying the patch_set is necessary to power suspect commits and suggested assignees.
   * @return patchSet
  **/
  @javax.annotation.Nullable
  public List<CreateANewReleaseForAnOrganizationRequestCommitsInnerPatchSetInner> getPatchSet() {
    return patchSet;
  }


  public void setPatchSet(List<CreateANewReleaseForAnOrganizationRequestCommitsInnerPatchSetInner> patchSet) {
    this.patchSet = patchSet;
  }


  public CreateANewReleaseForAnOrganizationRequestCommitsInner repository(String repository) {
    
    this.repository = repository;
    return this;
  }

   /**
   * The full name of the repository the commit belongs to. If this field is not given Sentry will generate a name in the form: u&#39;organization-&lt;organization_id&gt;&#39; (i.e. if the organization id is 123, then the generated repository name will be u&#39;organization-123).
   * @return repository
  **/
  @javax.annotation.Nullable
  public String getRepository() {
    return repository;
  }


  public void setRepository(String repository) {
    this.repository = repository;
  }


  public CreateANewReleaseForAnOrganizationRequestCommitsInner authorName(String authorName) {
    
    this.authorName = authorName;
    return this;
  }

   /**
   * The name of the commit author.
   * @return authorName
  **/
  @javax.annotation.Nullable
  public String getAuthorName() {
    return authorName;
  }


  public void setAuthorName(String authorName) {
    this.authorName = authorName;
  }


  public CreateANewReleaseForAnOrganizationRequestCommitsInner authorEmail(String authorEmail) {
    
    this.authorEmail = authorEmail;
    return this;
  }

   /**
   * The email of the commit author. The commit author&#39;s email is required to enable the suggested assignee feature.
   * @return authorEmail
  **/
  @javax.annotation.Nullable
  public String getAuthorEmail() {
    return authorEmail;
  }


  public void setAuthorEmail(String authorEmail) {
    this.authorEmail = authorEmail;
  }


  public CreateANewReleaseForAnOrganizationRequestCommitsInner timestamp(OffsetDateTime timestamp) {
    
    this.timestamp = timestamp;
    return this;
  }

   /**
   * The commit timestamp is used to sort the commits given. If a timestamp is not included, the commits will remain sorted in the order given.
   * @return timestamp
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }


  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public CreateANewReleaseForAnOrganizationRequestCommitsInner message(String message) {
    
    this.message = message;
    return this;
  }

   /**
   * The commit message.
   * @return message
  **/
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }


  public void setMessage(String message) {
    this.message = message;
  }


  public CreateANewReleaseForAnOrganizationRequestCommitsInner id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * The commit ID (the commit SHA).
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateANewReleaseForAnOrganizationRequestCommitsInner createANewReleaseForAnOrganizationRequestCommitsInner = (CreateANewReleaseForAnOrganizationRequestCommitsInner) o;
    return Objects.equals(this.patchSet, createANewReleaseForAnOrganizationRequestCommitsInner.patchSet) &&
        Objects.equals(this.repository, createANewReleaseForAnOrganizationRequestCommitsInner.repository) &&
        Objects.equals(this.authorName, createANewReleaseForAnOrganizationRequestCommitsInner.authorName) &&
        Objects.equals(this.authorEmail, createANewReleaseForAnOrganizationRequestCommitsInner.authorEmail) &&
        Objects.equals(this.timestamp, createANewReleaseForAnOrganizationRequestCommitsInner.timestamp) &&
        Objects.equals(this.message, createANewReleaseForAnOrganizationRequestCommitsInner.message) &&
        Objects.equals(this.id, createANewReleaseForAnOrganizationRequestCommitsInner.id);
  }

  @Override
  public int hashCode() {
    return Objects.hash(patchSet, repository, authorName, authorEmail, timestamp, message, id);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateANewReleaseForAnOrganizationRequestCommitsInner {\n");
    sb.append("    patchSet: ").append(toIndentedString(patchSet)).append("\n");
    sb.append("    repository: ").append(toIndentedString(repository)).append("\n");
    sb.append("    authorName: ").append(toIndentedString(authorName)).append("\n");
    sb.append("    authorEmail: ").append(toIndentedString(authorEmail)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("patch_set");
    openapiFields.add("repository");
    openapiFields.add("author_name");
    openapiFields.add("author_email");
    openapiFields.add("timestamp");
    openapiFields.add("message");
    openapiFields.add("id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CreateANewReleaseForAnOrganizationRequestCommitsInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CreateANewReleaseForAnOrganizationRequestCommitsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateANewReleaseForAnOrganizationRequestCommitsInner is not found in the empty JSON string", CreateANewReleaseForAnOrganizationRequestCommitsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CreateANewReleaseForAnOrganizationRequestCommitsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateANewReleaseForAnOrganizationRequestCommitsInner` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("patch_set") != null && !jsonObj.get("patch_set").isJsonNull()) {
        JsonArray jsonArraypatchSet = jsonObj.getAsJsonArray("patch_set");
        if (jsonArraypatchSet != null) {
          // ensure the json data is an array
          if (!jsonObj.get("patch_set").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `patch_set` to be an array in the JSON string but got `%s`", jsonObj.get("patch_set").toString()));
          }

          // validate the optional field `patch_set` (array)
          for (int i = 0; i < jsonArraypatchSet.size(); i++) {
            CreateANewReleaseForAnOrganizationRequestCommitsInnerPatchSetInner.validateJsonObject(jsonArraypatchSet.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("repository") != null && !jsonObj.get("repository").isJsonNull()) && !jsonObj.get("repository").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repository` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repository").toString()));
      }
      if ((jsonObj.get("author_name") != null && !jsonObj.get("author_name").isJsonNull()) && !jsonObj.get("author_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `author_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("author_name").toString()));
      }
      if ((jsonObj.get("author_email") != null && !jsonObj.get("author_email").isJsonNull()) && !jsonObj.get("author_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `author_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("author_email").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateANewReleaseForAnOrganizationRequestCommitsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateANewReleaseForAnOrganizationRequestCommitsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateANewReleaseForAnOrganizationRequestCommitsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateANewReleaseForAnOrganizationRequestCommitsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateANewReleaseForAnOrganizationRequestCommitsInner>() {
           @Override
           public void write(JsonWriter out, CreateANewReleaseForAnOrganizationRequestCommitsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateANewReleaseForAnOrganizationRequestCommitsInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateANewReleaseForAnOrganizationRequestCommitsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateANewReleaseForAnOrganizationRequestCommitsInner
  * @throws IOException if the JSON string is invalid with respect to CreateANewReleaseForAnOrganizationRequestCommitsInner
  */
  public static CreateANewReleaseForAnOrganizationRequestCommitsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateANewReleaseForAnOrganizationRequestCommitsInner.class);
  }

 /**
  * Convert an instance of CreateANewReleaseForAnOrganizationRequestCommitsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

