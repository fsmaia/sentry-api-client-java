/*
 * API Reference
 * Sentry Public API
 *
 * The version of the OpenAPI document: v0
 * Contact: partners@sentry.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sentry.api.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.sentry.api.client.JSON;

/**
 * RetrieveAProject200ResponseOptions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-16T12:40:29.777755Z[Etc/UTC]")
public class RetrieveAProject200ResponseOptions {
  public static final String SERIALIZED_NAME_FEEDBACK_COLON_BRANDING = "feedback:branding";
  @SerializedName(SERIALIZED_NAME_FEEDBACK_COLON_BRANDING)
  private Boolean feedbackColonBranding;

  public static final String SERIALIZED_NAME_FILTERS_COLON_BLACKLISTED_IPS = "filters:blacklisted_ips";
  @SerializedName(SERIALIZED_NAME_FILTERS_COLON_BLACKLISTED_IPS)
  private String filtersColonBlacklistedIps;

  public static final String SERIALIZED_NAME_FILTERS_COLON_ERROR_MESSAGES = "filters:error_messages";
  @SerializedName(SERIALIZED_NAME_FILTERS_COLON_ERROR_MESSAGES)
  private String filtersColonErrorMessages;

  public static final String SERIALIZED_NAME_FILTERS_COLON_RELEASES = "filters:releases";
  @SerializedName(SERIALIZED_NAME_FILTERS_COLON_RELEASES)
  private String filtersColonReleases;

  public static final String SERIALIZED_NAME_SENTRY_COLON_CSP_IGNORED_SOURCES = "sentry:csp_ignored_sources";
  @SerializedName(SERIALIZED_NAME_SENTRY_COLON_CSP_IGNORED_SOURCES)
  private String sentryColonCspIgnoredSources;

  public static final String SERIALIZED_NAME_SENTRY_COLON_CSP_IGNORED_SOURCES_DEFAULTS = "sentry:csp_ignored_sources_defaults";
  @SerializedName(SERIALIZED_NAME_SENTRY_COLON_CSP_IGNORED_SOURCES_DEFAULTS)
  private Boolean sentryColonCspIgnoredSourcesDefaults;

  public static final String SERIALIZED_NAME_SENTRY_COLON_REPROCESSING_ACTIVE = "sentry:reprocessing_active";
  @SerializedName(SERIALIZED_NAME_SENTRY_COLON_REPROCESSING_ACTIVE)
  private Boolean sentryColonReprocessingActive;

  public RetrieveAProject200ResponseOptions() {
  }

  public RetrieveAProject200ResponseOptions feedbackColonBranding(Boolean feedbackColonBranding) {
    
    this.feedbackColonBranding = feedbackColonBranding;
    return this;
  }

   /**
   * Get feedbackColonBranding
   * @return feedbackColonBranding
  **/
  @javax.annotation.Nullable
  public Boolean getFeedbackColonBranding() {
    return feedbackColonBranding;
  }


  public void setFeedbackColonBranding(Boolean feedbackColonBranding) {
    this.feedbackColonBranding = feedbackColonBranding;
  }


  public RetrieveAProject200ResponseOptions filtersColonBlacklistedIps(String filtersColonBlacklistedIps) {
    
    this.filtersColonBlacklistedIps = filtersColonBlacklistedIps;
    return this;
  }

   /**
   * Get filtersColonBlacklistedIps
   * @return filtersColonBlacklistedIps
  **/
  @javax.annotation.Nullable
  public String getFiltersColonBlacklistedIps() {
    return filtersColonBlacklistedIps;
  }


  public void setFiltersColonBlacklistedIps(String filtersColonBlacklistedIps) {
    this.filtersColonBlacklistedIps = filtersColonBlacklistedIps;
  }


  public RetrieveAProject200ResponseOptions filtersColonErrorMessages(String filtersColonErrorMessages) {
    
    this.filtersColonErrorMessages = filtersColonErrorMessages;
    return this;
  }

   /**
   * Get filtersColonErrorMessages
   * @return filtersColonErrorMessages
  **/
  @javax.annotation.Nullable
  public String getFiltersColonErrorMessages() {
    return filtersColonErrorMessages;
  }


  public void setFiltersColonErrorMessages(String filtersColonErrorMessages) {
    this.filtersColonErrorMessages = filtersColonErrorMessages;
  }


  public RetrieveAProject200ResponseOptions filtersColonReleases(String filtersColonReleases) {
    
    this.filtersColonReleases = filtersColonReleases;
    return this;
  }

   /**
   * Get filtersColonReleases
   * @return filtersColonReleases
  **/
  @javax.annotation.Nullable
  public String getFiltersColonReleases() {
    return filtersColonReleases;
  }


  public void setFiltersColonReleases(String filtersColonReleases) {
    this.filtersColonReleases = filtersColonReleases;
  }


  public RetrieveAProject200ResponseOptions sentryColonCspIgnoredSources(String sentryColonCspIgnoredSources) {
    
    this.sentryColonCspIgnoredSources = sentryColonCspIgnoredSources;
    return this;
  }

   /**
   * Get sentryColonCspIgnoredSources
   * @return sentryColonCspIgnoredSources
  **/
  @javax.annotation.Nullable
  public String getSentryColonCspIgnoredSources() {
    return sentryColonCspIgnoredSources;
  }


  public void setSentryColonCspIgnoredSources(String sentryColonCspIgnoredSources) {
    this.sentryColonCspIgnoredSources = sentryColonCspIgnoredSources;
  }


  public RetrieveAProject200ResponseOptions sentryColonCspIgnoredSourcesDefaults(Boolean sentryColonCspIgnoredSourcesDefaults) {
    
    this.sentryColonCspIgnoredSourcesDefaults = sentryColonCspIgnoredSourcesDefaults;
    return this;
  }

   /**
   * Get sentryColonCspIgnoredSourcesDefaults
   * @return sentryColonCspIgnoredSourcesDefaults
  **/
  @javax.annotation.Nullable
  public Boolean getSentryColonCspIgnoredSourcesDefaults() {
    return sentryColonCspIgnoredSourcesDefaults;
  }


  public void setSentryColonCspIgnoredSourcesDefaults(Boolean sentryColonCspIgnoredSourcesDefaults) {
    this.sentryColonCspIgnoredSourcesDefaults = sentryColonCspIgnoredSourcesDefaults;
  }


  public RetrieveAProject200ResponseOptions sentryColonReprocessingActive(Boolean sentryColonReprocessingActive) {
    
    this.sentryColonReprocessingActive = sentryColonReprocessingActive;
    return this;
  }

   /**
   * Get sentryColonReprocessingActive
   * @return sentryColonReprocessingActive
  **/
  @javax.annotation.Nullable
  public Boolean getSentryColonReprocessingActive() {
    return sentryColonReprocessingActive;
  }


  public void setSentryColonReprocessingActive(Boolean sentryColonReprocessingActive) {
    this.sentryColonReprocessingActive = sentryColonReprocessingActive;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RetrieveAProject200ResponseOptions retrieveAProject200ResponseOptions = (RetrieveAProject200ResponseOptions) o;
    return Objects.equals(this.feedbackColonBranding, retrieveAProject200ResponseOptions.feedbackColonBranding) &&
        Objects.equals(this.filtersColonBlacklistedIps, retrieveAProject200ResponseOptions.filtersColonBlacklistedIps) &&
        Objects.equals(this.filtersColonErrorMessages, retrieveAProject200ResponseOptions.filtersColonErrorMessages) &&
        Objects.equals(this.filtersColonReleases, retrieveAProject200ResponseOptions.filtersColonReleases) &&
        Objects.equals(this.sentryColonCspIgnoredSources, retrieveAProject200ResponseOptions.sentryColonCspIgnoredSources) &&
        Objects.equals(this.sentryColonCspIgnoredSourcesDefaults, retrieveAProject200ResponseOptions.sentryColonCspIgnoredSourcesDefaults) &&
        Objects.equals(this.sentryColonReprocessingActive, retrieveAProject200ResponseOptions.sentryColonReprocessingActive);
  }

  @Override
  public int hashCode() {
    return Objects.hash(feedbackColonBranding, filtersColonBlacklistedIps, filtersColonErrorMessages, filtersColonReleases, sentryColonCspIgnoredSources, sentryColonCspIgnoredSourcesDefaults, sentryColonReprocessingActive);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RetrieveAProject200ResponseOptions {\n");
    sb.append("    feedbackColonBranding: ").append(toIndentedString(feedbackColonBranding)).append("\n");
    sb.append("    filtersColonBlacklistedIps: ").append(toIndentedString(filtersColonBlacklistedIps)).append("\n");
    sb.append("    filtersColonErrorMessages: ").append(toIndentedString(filtersColonErrorMessages)).append("\n");
    sb.append("    filtersColonReleases: ").append(toIndentedString(filtersColonReleases)).append("\n");
    sb.append("    sentryColonCspIgnoredSources: ").append(toIndentedString(sentryColonCspIgnoredSources)).append("\n");
    sb.append("    sentryColonCspIgnoredSourcesDefaults: ").append(toIndentedString(sentryColonCspIgnoredSourcesDefaults)).append("\n");
    sb.append("    sentryColonReprocessingActive: ").append(toIndentedString(sentryColonReprocessingActive)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("feedback:branding");
    openapiFields.add("filters:blacklisted_ips");
    openapiFields.add("filters:error_messages");
    openapiFields.add("filters:releases");
    openapiFields.add("sentry:csp_ignored_sources");
    openapiFields.add("sentry:csp_ignored_sources_defaults");
    openapiFields.add("sentry:reprocessing_active");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RetrieveAProject200ResponseOptions
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!RetrieveAProject200ResponseOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RetrieveAProject200ResponseOptions is not found in the empty JSON string", RetrieveAProject200ResponseOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!RetrieveAProject200ResponseOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RetrieveAProject200ResponseOptions` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("filters:blacklisted_ips") != null && !jsonObj.get("filters:blacklisted_ips").isJsonNull()) && !jsonObj.get("filters:blacklisted_ips").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filters:blacklisted_ips` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filters:blacklisted_ips").toString()));
      }
      if ((jsonObj.get("filters:error_messages") != null && !jsonObj.get("filters:error_messages").isJsonNull()) && !jsonObj.get("filters:error_messages").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filters:error_messages` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filters:error_messages").toString()));
      }
      if ((jsonObj.get("filters:releases") != null && !jsonObj.get("filters:releases").isJsonNull()) && !jsonObj.get("filters:releases").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filters:releases` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filters:releases").toString()));
      }
      if ((jsonObj.get("sentry:csp_ignored_sources") != null && !jsonObj.get("sentry:csp_ignored_sources").isJsonNull()) && !jsonObj.get("sentry:csp_ignored_sources").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sentry:csp_ignored_sources` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sentry:csp_ignored_sources").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RetrieveAProject200ResponseOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RetrieveAProject200ResponseOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RetrieveAProject200ResponseOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RetrieveAProject200ResponseOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<RetrieveAProject200ResponseOptions>() {
           @Override
           public void write(JsonWriter out, RetrieveAProject200ResponseOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RetrieveAProject200ResponseOptions read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RetrieveAProject200ResponseOptions given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RetrieveAProject200ResponseOptions
  * @throws IOException if the JSON string is invalid with respect to RetrieveAProject200ResponseOptions
  */
  public static RetrieveAProject200ResponseOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RetrieveAProject200ResponseOptions.class);
  }

 /**
  * Convert an instance of RetrieveAProject200ResponseOptions to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

