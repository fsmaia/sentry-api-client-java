/*
 * API Reference
 * Sentry Public API
 *
 * The version of the OpenAPI document: v0
 * Contact: partners@sentry.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sentry.api.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.sentry.api.client.model.ListAProjectSIssues200ResponseInnerMetadata;
import com.sentry.api.client.model.ListAProjectSIssues200ResponseInnerProject;
import com.sentry.api.client.model.RetrieveAnIssue200ResponseActivityInner;
import com.sentry.api.client.model.RetrieveAnIssue200ResponseFirstRelease;
import com.sentry.api.client.model.RetrieveAnIssue200ResponseStats;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.sentry.api.client.JSON;

/**
 * RetrieveAnIssue200Response
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-15T10:13:02.301928Z[Etc/UTC]")
public class RetrieveAnIssue200Response implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ACTIVITY = "activity";
  @SerializedName(SERIALIZED_NAME_ACTIVITY)
  private List<RetrieveAnIssue200ResponseActivityInner> activity = new ArrayList<>();

  public static final String SERIALIZED_NAME_ANNOTATIONS = "annotations";
  @SerializedName(SERIALIZED_NAME_ANNOTATIONS)
  private List<String> annotations = new ArrayList<>();

  public static final String SERIALIZED_NAME_ASSIGNED_TO = "assignedTo";
  @SerializedName(SERIALIZED_NAME_ASSIGNED_TO)
  private Object assignedTo;

  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private String count;

  public static final String SERIALIZED_NAME_CULPRIT = "culprit";
  @SerializedName(SERIALIZED_NAME_CULPRIT)
  private String culprit;

  public static final String SERIALIZED_NAME_FIRST_RELEASE = "firstRelease";
  @SerializedName(SERIALIZED_NAME_FIRST_RELEASE)
  private RetrieveAnIssue200ResponseFirstRelease firstRelease;

  public static final String SERIALIZED_NAME_FIRST_SEEN = "firstSeen";
  @SerializedName(SERIALIZED_NAME_FIRST_SEEN)
  private String firstSeen;

  public static final String SERIALIZED_NAME_HAS_SEEN = "hasSeen";
  @SerializedName(SERIALIZED_NAME_HAS_SEEN)
  private Boolean hasSeen;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_BOOKMARKED = "isBookmarked";
  @SerializedName(SERIALIZED_NAME_IS_BOOKMARKED)
  private Boolean isBookmarked;

  public static final String SERIALIZED_NAME_IS_PUBLIC = "isPublic";
  @SerializedName(SERIALIZED_NAME_IS_PUBLIC)
  private Boolean isPublic;

  public static final String SERIALIZED_NAME_IS_SUBSCRIBED = "isSubscribed";
  @SerializedName(SERIALIZED_NAME_IS_SUBSCRIBED)
  private Boolean isSubscribed;

  public static final String SERIALIZED_NAME_LAST_RELEASE = "lastRelease";
  @SerializedName(SERIALIZED_NAME_LAST_RELEASE)
  private Object lastRelease;

  public static final String SERIALIZED_NAME_LAST_SEEN = "lastSeen";
  @SerializedName(SERIALIZED_NAME_LAST_SEEN)
  private String lastSeen;

  public static final String SERIALIZED_NAME_LEVEL = "level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  private String level;

  public static final String SERIALIZED_NAME_LOGGER = "logger";
  @SerializedName(SERIALIZED_NAME_LOGGER)
  private String logger;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private ListAProjectSIssues200ResponseInnerMetadata metadata;

  public static final String SERIALIZED_NAME_NUM_COMMENTS = "numComments";
  @SerializedName(SERIALIZED_NAME_NUM_COMMENTS)
  private Integer numComments;

  public static final String SERIALIZED_NAME_PARTICIPANTS = "participants";
  @SerializedName(SERIALIZED_NAME_PARTICIPANTS)
  private List<Object> participants = new ArrayList<>();

  public static final String SERIALIZED_NAME_PERMALINK = "permalink";
  @SerializedName(SERIALIZED_NAME_PERMALINK)
  private String permalink;

  public static final String SERIALIZED_NAME_PLUGIN_ACTIONS = "pluginActions";
  @SerializedName(SERIALIZED_NAME_PLUGIN_ACTIONS)
  private List<List<String>> pluginActions = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLUGIN_CONTEXTS = "pluginContexts";
  @SerializedName(SERIALIZED_NAME_PLUGIN_CONTEXTS)
  private List<String> pluginContexts = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLUGIN_ISSUES = "pluginIssues";
  @SerializedName(SERIALIZED_NAME_PLUGIN_ISSUES)
  private List<Object> pluginIssues = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROJECT = "project";
  @SerializedName(SERIALIZED_NAME_PROJECT)
  private ListAProjectSIssues200ResponseInnerProject project;

  public static final String SERIALIZED_NAME_SEEN_BY = "seenBy";
  @SerializedName(SERIALIZED_NAME_SEEN_BY)
  private List<Object> seenBy = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHARE_ID = "shareId";
  @SerializedName(SERIALIZED_NAME_SHARE_ID)
  private String shareId;

  public static final String SERIALIZED_NAME_SHORT_ID = "shortId";
  @SerializedName(SERIALIZED_NAME_SHORT_ID)
  private String shortId;

  public static final String SERIALIZED_NAME_STATS = "stats";
  @SerializedName(SERIALIZED_NAME_STATS)
  private RetrieveAnIssue200ResponseStats stats;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    RESOLVED("resolved"),
    
    UNRESOLVED("unresolved"),
    
    IGNORED("ignored");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_STATUS_DETAILS = "statusDetails";
  @SerializedName(SERIALIZED_NAME_STATUS_DETAILS)
  private Object statusDetails;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_DETAILS = "subscriptionDetails";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_DETAILS)
  private Object subscriptionDetails;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Object> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_USER_COUNT = "userCount";
  @SerializedName(SERIALIZED_NAME_USER_COUNT)
  private Integer userCount;

  public static final String SERIALIZED_NAME_USER_REPORT_COUNT = "userReportCount";
  @SerializedName(SERIALIZED_NAME_USER_REPORT_COUNT)
  private Integer userReportCount;

  public RetrieveAnIssue200Response() {
  }

  public RetrieveAnIssue200Response activity(List<RetrieveAnIssue200ResponseActivityInner> activity) {
    
    this.activity = activity;
    return this;
  }

  public RetrieveAnIssue200Response addActivityItem(RetrieveAnIssue200ResponseActivityInner activityItem) {
    if (this.activity == null) {
      this.activity = new ArrayList<>();
    }
    this.activity.add(activityItem);
    return this;
  }

   /**
   * Get activity
   * @return activity
  **/
  @jakarta.annotation.Nonnull
  public List<RetrieveAnIssue200ResponseActivityInner> getActivity() {
    return activity;
  }


  public void setActivity(List<RetrieveAnIssue200ResponseActivityInner> activity) {
    this.activity = activity;
  }


  public RetrieveAnIssue200Response annotations(List<String> annotations) {
    
    this.annotations = annotations;
    return this;
  }

  public RetrieveAnIssue200Response addAnnotationsItem(String annotationsItem) {
    if (this.annotations == null) {
      this.annotations = new ArrayList<>();
    }
    this.annotations.add(annotationsItem);
    return this;
  }

   /**
   * Get annotations
   * @return annotations
  **/
  @jakarta.annotation.Nonnull
  public List<String> getAnnotations() {
    return annotations;
  }


  public void setAnnotations(List<String> annotations) {
    this.annotations = annotations;
  }


  public RetrieveAnIssue200Response assignedTo(Object assignedTo) {
    
    this.assignedTo = assignedTo;
    return this;
  }

   /**
   * Get assignedTo
   * @return assignedTo
  **/
  @jakarta.annotation.Nullable
  public Object getAssignedTo() {
    return assignedTo;
  }


  public void setAssignedTo(Object assignedTo) {
    this.assignedTo = assignedTo;
  }


  public RetrieveAnIssue200Response count(String count) {
    
    this.count = count;
    return this;
  }

   /**
   * Get count
   * @return count
  **/
  @jakarta.annotation.Nonnull
  public String getCount() {
    return count;
  }


  public void setCount(String count) {
    this.count = count;
  }


  public RetrieveAnIssue200Response culprit(String culprit) {
    
    this.culprit = culprit;
    return this;
  }

   /**
   * Get culprit
   * @return culprit
  **/
  @jakarta.annotation.Nonnull
  public String getCulprit() {
    return culprit;
  }


  public void setCulprit(String culprit) {
    this.culprit = culprit;
  }


  public RetrieveAnIssue200Response firstRelease(RetrieveAnIssue200ResponseFirstRelease firstRelease) {
    
    this.firstRelease = firstRelease;
    return this;
  }

   /**
   * Get firstRelease
   * @return firstRelease
  **/
  @jakarta.annotation.Nullable
  public RetrieveAnIssue200ResponseFirstRelease getFirstRelease() {
    return firstRelease;
  }


  public void setFirstRelease(RetrieveAnIssue200ResponseFirstRelease firstRelease) {
    this.firstRelease = firstRelease;
  }


  public RetrieveAnIssue200Response firstSeen(String firstSeen) {
    
    this.firstSeen = firstSeen;
    return this;
  }

   /**
   * Get firstSeen
   * @return firstSeen
  **/
  @jakarta.annotation.Nonnull
  public String getFirstSeen() {
    return firstSeen;
  }


  public void setFirstSeen(String firstSeen) {
    this.firstSeen = firstSeen;
  }


  public RetrieveAnIssue200Response hasSeen(Boolean hasSeen) {
    
    this.hasSeen = hasSeen;
    return this;
  }

   /**
   * Get hasSeen
   * @return hasSeen
  **/
  @jakarta.annotation.Nonnull
  public Boolean getHasSeen() {
    return hasSeen;
  }


  public void setHasSeen(Boolean hasSeen) {
    this.hasSeen = hasSeen;
  }


  public RetrieveAnIssue200Response id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nonnull
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public RetrieveAnIssue200Response isBookmarked(Boolean isBookmarked) {
    
    this.isBookmarked = isBookmarked;
    return this;
  }

   /**
   * Get isBookmarked
   * @return isBookmarked
  **/
  @jakarta.annotation.Nonnull
  public Boolean getIsBookmarked() {
    return isBookmarked;
  }


  public void setIsBookmarked(Boolean isBookmarked) {
    this.isBookmarked = isBookmarked;
  }


  public RetrieveAnIssue200Response isPublic(Boolean isPublic) {
    
    this.isPublic = isPublic;
    return this;
  }

   /**
   * Get isPublic
   * @return isPublic
  **/
  @jakarta.annotation.Nonnull
  public Boolean getIsPublic() {
    return isPublic;
  }


  public void setIsPublic(Boolean isPublic) {
    this.isPublic = isPublic;
  }


  public RetrieveAnIssue200Response isSubscribed(Boolean isSubscribed) {
    
    this.isSubscribed = isSubscribed;
    return this;
  }

   /**
   * Get isSubscribed
   * @return isSubscribed
  **/
  @jakarta.annotation.Nonnull
  public Boolean getIsSubscribed() {
    return isSubscribed;
  }


  public void setIsSubscribed(Boolean isSubscribed) {
    this.isSubscribed = isSubscribed;
  }


  public RetrieveAnIssue200Response lastRelease(Object lastRelease) {
    
    this.lastRelease = lastRelease;
    return this;
  }

   /**
   * Get lastRelease
   * @return lastRelease
  **/
  @jakarta.annotation.Nullable
  public Object getLastRelease() {
    return lastRelease;
  }


  public void setLastRelease(Object lastRelease) {
    this.lastRelease = lastRelease;
  }


  public RetrieveAnIssue200Response lastSeen(String lastSeen) {
    
    this.lastSeen = lastSeen;
    return this;
  }

   /**
   * Get lastSeen
   * @return lastSeen
  **/
  @jakarta.annotation.Nonnull
  public String getLastSeen() {
    return lastSeen;
  }


  public void setLastSeen(String lastSeen) {
    this.lastSeen = lastSeen;
  }


  public RetrieveAnIssue200Response level(String level) {
    
    this.level = level;
    return this;
  }

   /**
   * Get level
   * @return level
  **/
  @jakarta.annotation.Nonnull
  public String getLevel() {
    return level;
  }


  public void setLevel(String level) {
    this.level = level;
  }


  public RetrieveAnIssue200Response logger(String logger) {
    
    this.logger = logger;
    return this;
  }

   /**
   * Get logger
   * @return logger
  **/
  @jakarta.annotation.Nullable
  public String getLogger() {
    return logger;
  }


  public void setLogger(String logger) {
    this.logger = logger;
  }


  public RetrieveAnIssue200Response metadata(ListAProjectSIssues200ResponseInnerMetadata metadata) {
    
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @jakarta.annotation.Nonnull
  public ListAProjectSIssues200ResponseInnerMetadata getMetadata() {
    return metadata;
  }


  public void setMetadata(ListAProjectSIssues200ResponseInnerMetadata metadata) {
    this.metadata = metadata;
  }


  public RetrieveAnIssue200Response numComments(Integer numComments) {
    
    this.numComments = numComments;
    return this;
  }

   /**
   * Get numComments
   * @return numComments
  **/
  @jakarta.annotation.Nonnull
  public Integer getNumComments() {
    return numComments;
  }


  public void setNumComments(Integer numComments) {
    this.numComments = numComments;
  }


  public RetrieveAnIssue200Response participants(List<Object> participants) {
    
    this.participants = participants;
    return this;
  }

  public RetrieveAnIssue200Response addParticipantsItem(Object participantsItem) {
    if (this.participants == null) {
      this.participants = new ArrayList<>();
    }
    this.participants.add(participantsItem);
    return this;
  }

   /**
   * Get participants
   * @return participants
  **/
  @jakarta.annotation.Nonnull
  public List<Object> getParticipants() {
    return participants;
  }


  public void setParticipants(List<Object> participants) {
    this.participants = participants;
  }


  public RetrieveAnIssue200Response permalink(String permalink) {
    
    this.permalink = permalink;
    return this;
  }

   /**
   * Get permalink
   * @return permalink
  **/
  @jakarta.annotation.Nonnull
  public String getPermalink() {
    return permalink;
  }


  public void setPermalink(String permalink) {
    this.permalink = permalink;
  }


  public RetrieveAnIssue200Response pluginActions(List<List<String>> pluginActions) {
    
    this.pluginActions = pluginActions;
    return this;
  }

  public RetrieveAnIssue200Response addPluginActionsItem(List<String> pluginActionsItem) {
    if (this.pluginActions == null) {
      this.pluginActions = new ArrayList<>();
    }
    this.pluginActions.add(pluginActionsItem);
    return this;
  }

   /**
   * Get pluginActions
   * @return pluginActions
  **/
  @jakarta.annotation.Nonnull
  public List<List<String>> getPluginActions() {
    return pluginActions;
  }


  public void setPluginActions(List<List<String>> pluginActions) {
    this.pluginActions = pluginActions;
  }


  public RetrieveAnIssue200Response pluginContexts(List<String> pluginContexts) {
    
    this.pluginContexts = pluginContexts;
    return this;
  }

  public RetrieveAnIssue200Response addPluginContextsItem(String pluginContextsItem) {
    if (this.pluginContexts == null) {
      this.pluginContexts = new ArrayList<>();
    }
    this.pluginContexts.add(pluginContextsItem);
    return this;
  }

   /**
   * Get pluginContexts
   * @return pluginContexts
  **/
  @jakarta.annotation.Nonnull
  public List<String> getPluginContexts() {
    return pluginContexts;
  }


  public void setPluginContexts(List<String> pluginContexts) {
    this.pluginContexts = pluginContexts;
  }


  public RetrieveAnIssue200Response pluginIssues(List<Object> pluginIssues) {
    
    this.pluginIssues = pluginIssues;
    return this;
  }

  public RetrieveAnIssue200Response addPluginIssuesItem(Object pluginIssuesItem) {
    if (this.pluginIssues == null) {
      this.pluginIssues = new ArrayList<>();
    }
    this.pluginIssues.add(pluginIssuesItem);
    return this;
  }

   /**
   * Get pluginIssues
   * @return pluginIssues
  **/
  @jakarta.annotation.Nonnull
  public List<Object> getPluginIssues() {
    return pluginIssues;
  }


  public void setPluginIssues(List<Object> pluginIssues) {
    this.pluginIssues = pluginIssues;
  }


  public RetrieveAnIssue200Response project(ListAProjectSIssues200ResponseInnerProject project) {
    
    this.project = project;
    return this;
  }

   /**
   * Get project
   * @return project
  **/
  @jakarta.annotation.Nonnull
  public ListAProjectSIssues200ResponseInnerProject getProject() {
    return project;
  }


  public void setProject(ListAProjectSIssues200ResponseInnerProject project) {
    this.project = project;
  }


  public RetrieveAnIssue200Response seenBy(List<Object> seenBy) {
    
    this.seenBy = seenBy;
    return this;
  }

  public RetrieveAnIssue200Response addSeenByItem(Object seenByItem) {
    if (this.seenBy == null) {
      this.seenBy = new ArrayList<>();
    }
    this.seenBy.add(seenByItem);
    return this;
  }

   /**
   * Get seenBy
   * @return seenBy
  **/
  @jakarta.annotation.Nonnull
  public List<Object> getSeenBy() {
    return seenBy;
  }


  public void setSeenBy(List<Object> seenBy) {
    this.seenBy = seenBy;
  }


  public RetrieveAnIssue200Response shareId(String shareId) {
    
    this.shareId = shareId;
    return this;
  }

   /**
   * Get shareId
   * @return shareId
  **/
  @jakarta.annotation.Nullable
  public String getShareId() {
    return shareId;
  }


  public void setShareId(String shareId) {
    this.shareId = shareId;
  }


  public RetrieveAnIssue200Response shortId(String shortId) {
    
    this.shortId = shortId;
    return this;
  }

   /**
   * Get shortId
   * @return shortId
  **/
  @jakarta.annotation.Nonnull
  public String getShortId() {
    return shortId;
  }


  public void setShortId(String shortId) {
    this.shortId = shortId;
  }


  public RetrieveAnIssue200Response stats(RetrieveAnIssue200ResponseStats stats) {
    
    this.stats = stats;
    return this;
  }

   /**
   * Get stats
   * @return stats
  **/
  @jakarta.annotation.Nonnull
  public RetrieveAnIssue200ResponseStats getStats() {
    return stats;
  }


  public void setStats(RetrieveAnIssue200ResponseStats stats) {
    this.stats = stats;
  }


  public RetrieveAnIssue200Response status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @jakarta.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public RetrieveAnIssue200Response statusDetails(Object statusDetails) {
    
    this.statusDetails = statusDetails;
    return this;
  }

   /**
   * Get statusDetails
   * @return statusDetails
  **/
  @jakarta.annotation.Nonnull
  public Object getStatusDetails() {
    return statusDetails;
  }


  public void setStatusDetails(Object statusDetails) {
    this.statusDetails = statusDetails;
  }


  public RetrieveAnIssue200Response subscriptionDetails(Object subscriptionDetails) {
    
    this.subscriptionDetails = subscriptionDetails;
    return this;
  }

   /**
   * Get subscriptionDetails
   * @return subscriptionDetails
  **/
  @jakarta.annotation.Nullable
  public Object getSubscriptionDetails() {
    return subscriptionDetails;
  }


  public void setSubscriptionDetails(Object subscriptionDetails) {
    this.subscriptionDetails = subscriptionDetails;
  }


  public RetrieveAnIssue200Response tags(List<Object> tags) {
    
    this.tags = tags;
    return this;
  }

  public RetrieveAnIssue200Response addTagsItem(Object tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @jakarta.annotation.Nonnull
  public List<Object> getTags() {
    return tags;
  }


  public void setTags(List<Object> tags) {
    this.tags = tags;
  }


  public RetrieveAnIssue200Response title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @jakarta.annotation.Nonnull
  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }


  public RetrieveAnIssue200Response type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @jakarta.annotation.Nonnull
  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public RetrieveAnIssue200Response userCount(Integer userCount) {
    
    this.userCount = userCount;
    return this;
  }

   /**
   * Get userCount
   * @return userCount
  **/
  @jakarta.annotation.Nonnull
  public Integer getUserCount() {
    return userCount;
  }


  public void setUserCount(Integer userCount) {
    this.userCount = userCount;
  }


  public RetrieveAnIssue200Response userReportCount(Integer userReportCount) {
    
    this.userReportCount = userReportCount;
    return this;
  }

   /**
   * Get userReportCount
   * @return userReportCount
  **/
  @jakarta.annotation.Nonnull
  public Integer getUserReportCount() {
    return userReportCount;
  }


  public void setUserReportCount(Integer userReportCount) {
    this.userReportCount = userReportCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RetrieveAnIssue200Response retrieveAnIssue200Response = (RetrieveAnIssue200Response) o;
    return Objects.equals(this.activity, retrieveAnIssue200Response.activity) &&
        Objects.equals(this.annotations, retrieveAnIssue200Response.annotations) &&
        Objects.equals(this.assignedTo, retrieveAnIssue200Response.assignedTo) &&
        Objects.equals(this.count, retrieveAnIssue200Response.count) &&
        Objects.equals(this.culprit, retrieveAnIssue200Response.culprit) &&
        Objects.equals(this.firstRelease, retrieveAnIssue200Response.firstRelease) &&
        Objects.equals(this.firstSeen, retrieveAnIssue200Response.firstSeen) &&
        Objects.equals(this.hasSeen, retrieveAnIssue200Response.hasSeen) &&
        Objects.equals(this.id, retrieveAnIssue200Response.id) &&
        Objects.equals(this.isBookmarked, retrieveAnIssue200Response.isBookmarked) &&
        Objects.equals(this.isPublic, retrieveAnIssue200Response.isPublic) &&
        Objects.equals(this.isSubscribed, retrieveAnIssue200Response.isSubscribed) &&
        Objects.equals(this.lastRelease, retrieveAnIssue200Response.lastRelease) &&
        Objects.equals(this.lastSeen, retrieveAnIssue200Response.lastSeen) &&
        Objects.equals(this.level, retrieveAnIssue200Response.level) &&
        Objects.equals(this.logger, retrieveAnIssue200Response.logger) &&
        Objects.equals(this.metadata, retrieveAnIssue200Response.metadata) &&
        Objects.equals(this.numComments, retrieveAnIssue200Response.numComments) &&
        Objects.equals(this.participants, retrieveAnIssue200Response.participants) &&
        Objects.equals(this.permalink, retrieveAnIssue200Response.permalink) &&
        Objects.equals(this.pluginActions, retrieveAnIssue200Response.pluginActions) &&
        Objects.equals(this.pluginContexts, retrieveAnIssue200Response.pluginContexts) &&
        Objects.equals(this.pluginIssues, retrieveAnIssue200Response.pluginIssues) &&
        Objects.equals(this.project, retrieveAnIssue200Response.project) &&
        Objects.equals(this.seenBy, retrieveAnIssue200Response.seenBy) &&
        Objects.equals(this.shareId, retrieveAnIssue200Response.shareId) &&
        Objects.equals(this.shortId, retrieveAnIssue200Response.shortId) &&
        Objects.equals(this.stats, retrieveAnIssue200Response.stats) &&
        Objects.equals(this.status, retrieveAnIssue200Response.status) &&
        Objects.equals(this.statusDetails, retrieveAnIssue200Response.statusDetails) &&
        Objects.equals(this.subscriptionDetails, retrieveAnIssue200Response.subscriptionDetails) &&
        Objects.equals(this.tags, retrieveAnIssue200Response.tags) &&
        Objects.equals(this.title, retrieveAnIssue200Response.title) &&
        Objects.equals(this.type, retrieveAnIssue200Response.type) &&
        Objects.equals(this.userCount, retrieveAnIssue200Response.userCount) &&
        Objects.equals(this.userReportCount, retrieveAnIssue200Response.userReportCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activity, annotations, assignedTo, count, culprit, firstRelease, firstSeen, hasSeen, id, isBookmarked, isPublic, isSubscribed, lastRelease, lastSeen, level, logger, metadata, numComments, participants, permalink, pluginActions, pluginContexts, pluginIssues, project, seenBy, shareId, shortId, stats, status, statusDetails, subscriptionDetails, tags, title, type, userCount, userReportCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RetrieveAnIssue200Response {\n");
    sb.append("    activity: ").append(toIndentedString(activity)).append("\n");
    sb.append("    annotations: ").append(toIndentedString(annotations)).append("\n");
    sb.append("    assignedTo: ").append(toIndentedString(assignedTo)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    culprit: ").append(toIndentedString(culprit)).append("\n");
    sb.append("    firstRelease: ").append(toIndentedString(firstRelease)).append("\n");
    sb.append("    firstSeen: ").append(toIndentedString(firstSeen)).append("\n");
    sb.append("    hasSeen: ").append(toIndentedString(hasSeen)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isBookmarked: ").append(toIndentedString(isBookmarked)).append("\n");
    sb.append("    isPublic: ").append(toIndentedString(isPublic)).append("\n");
    sb.append("    isSubscribed: ").append(toIndentedString(isSubscribed)).append("\n");
    sb.append("    lastRelease: ").append(toIndentedString(lastRelease)).append("\n");
    sb.append("    lastSeen: ").append(toIndentedString(lastSeen)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    logger: ").append(toIndentedString(logger)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    numComments: ").append(toIndentedString(numComments)).append("\n");
    sb.append("    participants: ").append(toIndentedString(participants)).append("\n");
    sb.append("    permalink: ").append(toIndentedString(permalink)).append("\n");
    sb.append("    pluginActions: ").append(toIndentedString(pluginActions)).append("\n");
    sb.append("    pluginContexts: ").append(toIndentedString(pluginContexts)).append("\n");
    sb.append("    pluginIssues: ").append(toIndentedString(pluginIssues)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    seenBy: ").append(toIndentedString(seenBy)).append("\n");
    sb.append("    shareId: ").append(toIndentedString(shareId)).append("\n");
    sb.append("    shortId: ").append(toIndentedString(shortId)).append("\n");
    sb.append("    stats: ").append(toIndentedString(stats)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusDetails: ").append(toIndentedString(statusDetails)).append("\n");
    sb.append("    subscriptionDetails: ").append(toIndentedString(subscriptionDetails)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    userCount: ").append(toIndentedString(userCount)).append("\n");
    sb.append("    userReportCount: ").append(toIndentedString(userReportCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activity");
    openapiFields.add("annotations");
    openapiFields.add("assignedTo");
    openapiFields.add("count");
    openapiFields.add("culprit");
    openapiFields.add("firstRelease");
    openapiFields.add("firstSeen");
    openapiFields.add("hasSeen");
    openapiFields.add("id");
    openapiFields.add("isBookmarked");
    openapiFields.add("isPublic");
    openapiFields.add("isSubscribed");
    openapiFields.add("lastRelease");
    openapiFields.add("lastSeen");
    openapiFields.add("level");
    openapiFields.add("logger");
    openapiFields.add("metadata");
    openapiFields.add("numComments");
    openapiFields.add("participants");
    openapiFields.add("permalink");
    openapiFields.add("pluginActions");
    openapiFields.add("pluginContexts");
    openapiFields.add("pluginIssues");
    openapiFields.add("project");
    openapiFields.add("seenBy");
    openapiFields.add("shareId");
    openapiFields.add("shortId");
    openapiFields.add("stats");
    openapiFields.add("status");
    openapiFields.add("statusDetails");
    openapiFields.add("subscriptionDetails");
    openapiFields.add("tags");
    openapiFields.add("title");
    openapiFields.add("type");
    openapiFields.add("userCount");
    openapiFields.add("userReportCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("activity");
    openapiRequiredFields.add("annotations");
    openapiRequiredFields.add("assignedTo");
    openapiRequiredFields.add("count");
    openapiRequiredFields.add("culprit");
    openapiRequiredFields.add("firstRelease");
    openapiRequiredFields.add("firstSeen");
    openapiRequiredFields.add("hasSeen");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("isBookmarked");
    openapiRequiredFields.add("isPublic");
    openapiRequiredFields.add("isSubscribed");
    openapiRequiredFields.add("lastRelease");
    openapiRequiredFields.add("lastSeen");
    openapiRequiredFields.add("level");
    openapiRequiredFields.add("logger");
    openapiRequiredFields.add("metadata");
    openapiRequiredFields.add("numComments");
    openapiRequiredFields.add("participants");
    openapiRequiredFields.add("permalink");
    openapiRequiredFields.add("pluginActions");
    openapiRequiredFields.add("pluginContexts");
    openapiRequiredFields.add("pluginIssues");
    openapiRequiredFields.add("project");
    openapiRequiredFields.add("seenBy");
    openapiRequiredFields.add("shareId");
    openapiRequiredFields.add("shortId");
    openapiRequiredFields.add("stats");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("statusDetails");
    openapiRequiredFields.add("subscriptionDetails");
    openapiRequiredFields.add("tags");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("userCount");
    openapiRequiredFields.add("userReportCount");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RetrieveAnIssue200Response
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!RetrieveAnIssue200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RetrieveAnIssue200Response is not found in the empty JSON string", RetrieveAnIssue200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!RetrieveAnIssue200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RetrieveAnIssue200Response` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RetrieveAnIssue200Response.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("activity").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `activity` to be an array in the JSON string but got `%s`", jsonObj.get("activity").toString()));
      }

      JsonArray jsonArrayactivity = jsonObj.getAsJsonArray("activity");
      // validate the required field `activity` (array)
      for (int i = 0; i < jsonArrayactivity.size(); i++) {
        RetrieveAnIssue200ResponseActivityInner.validateJsonObject(jsonArrayactivity.get(i).getAsJsonObject());
      };
      // ensure the required json array is present
      if (jsonObj.get("annotations") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("annotations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `annotations` to be an array in the JSON string but got `%s`", jsonObj.get("annotations").toString()));
      }
      if (!jsonObj.get("count").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `count` to be a primitive type in the JSON string but got `%s`", jsonObj.get("count").toString()));
      }
      if (!jsonObj.get("culprit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `culprit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("culprit").toString()));
      }
      // validate the required field `firstRelease`
      RetrieveAnIssue200ResponseFirstRelease.validateJsonObject(jsonObj.getAsJsonObject("firstRelease"));
      if (!jsonObj.get("firstSeen").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstSeen` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstSeen").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("lastSeen").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastSeen` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastSeen").toString()));
      }
      if (!jsonObj.get("level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("level").toString()));
      }
      if (!jsonObj.get("logger").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logger` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logger").toString()));
      }
      // validate the required field `metadata`
      ListAProjectSIssues200ResponseInnerMetadata.validateJsonObject(jsonObj.getAsJsonObject("metadata"));
      // ensure the required json array is present
      if (jsonObj.get("participants") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("participants").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `participants` to be an array in the JSON string but got `%s`", jsonObj.get("participants").toString()));
      }
      if (!jsonObj.get("permalink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permalink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permalink").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("pluginActions") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("pluginActions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pluginActions` to be an array in the JSON string but got `%s`", jsonObj.get("pluginActions").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("pluginContexts") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("pluginContexts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pluginContexts` to be an array in the JSON string but got `%s`", jsonObj.get("pluginContexts").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("pluginIssues") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("pluginIssues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pluginIssues` to be an array in the JSON string but got `%s`", jsonObj.get("pluginIssues").toString()));
      }
      // validate the required field `project`
      ListAProjectSIssues200ResponseInnerProject.validateJsonObject(jsonObj.getAsJsonObject("project"));
      // ensure the required json array is present
      if (jsonObj.get("seenBy") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("seenBy").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `seenBy` to be an array in the JSON string but got `%s`", jsonObj.get("seenBy").toString()));
      }
      if (!jsonObj.get("shareId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shareId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shareId").toString()));
      }
      if (!jsonObj.get("shortId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shortId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shortId").toString()));
      }
      // validate the required field `stats`
      RetrieveAnIssue200ResponseStats.validateJsonObject(jsonObj.getAsJsonObject("stats"));
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("tags") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RetrieveAnIssue200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RetrieveAnIssue200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RetrieveAnIssue200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RetrieveAnIssue200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<RetrieveAnIssue200Response>() {
           @Override
           public void write(JsonWriter out, RetrieveAnIssue200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RetrieveAnIssue200Response read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RetrieveAnIssue200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RetrieveAnIssue200Response
  * @throws IOException if the JSON string is invalid with respect to RetrieveAnIssue200Response
  */
  public static RetrieveAnIssue200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RetrieveAnIssue200Response.class);
  }

 /**
  * Convert an instance of RetrieveAnIssue200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

