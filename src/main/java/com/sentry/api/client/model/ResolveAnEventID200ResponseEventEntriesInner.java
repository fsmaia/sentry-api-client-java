/*
 * API Reference
 * Sentry Public API
 *
 * The version of the OpenAPI document: v0
 * Contact: partners@sentry.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sentry.api.client.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.sentry.api.client.model.ResolveAnEventID200ResponseEventEntriesInnerAnyOf;
import com.sentry.api.client.model.ResolveAnEventID200ResponseEventEntriesInnerAnyOf1;
import com.sentry.api.client.model.ResolveAnEventID200ResponseEventEntriesInnerAnyOf2;
import com.sentry.api.client.model.ResolveAnEventID200ResponseEventEntriesInnerAnyOf3;
import com.sentry.api.client.model.ResolveAnEventID200ResponseEventEntriesInnerAnyOf3Data;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.sentry.api.client.JSON;


import jakarta.ws.rs.core.GenericType;
import jakarta.ws.rs.core.Response;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import com.sentry.api.client.JSON;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-16T15:22:58.941842Z[Etc/UTC]")
@JsonDeserialize(using=ResolveAnEventID200ResponseEventEntriesInner.ResolveAnEventID200ResponseEventEntriesInnerDeserializer.class)
@JsonSerialize(using = ResolveAnEventID200ResponseEventEntriesInner.ResolveAnEventID200ResponseEventEntriesInnerSerializer.class)
public class ResolveAnEventID200ResponseEventEntriesInner extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(ResolveAnEventID200ResponseEventEntriesInner.class.getName());

    public static class ResolveAnEventID200ResponseEventEntriesInnerSerializer extends StdSerializer<ResolveAnEventID200ResponseEventEntriesInner> {
        public ResolveAnEventID200ResponseEventEntriesInnerSerializer(Class<ResolveAnEventID200ResponseEventEntriesInner> t) {
            super(t);
        }

        public ResolveAnEventID200ResponseEventEntriesInnerSerializer() {
            this(null);
        }

        @Override
        public void serialize(ResolveAnEventID200ResponseEventEntriesInner value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
            jgen.writeObject(value.getActualInstance());
        }
    }

    public static class ResolveAnEventID200ResponseEventEntriesInnerDeserializer extends StdDeserializer<ResolveAnEventID200ResponseEventEntriesInner> {
        public ResolveAnEventID200ResponseEventEntriesInnerDeserializer() {
            this(ResolveAnEventID200ResponseEventEntriesInner.class);
        }

        public ResolveAnEventID200ResponseEventEntriesInnerDeserializer(Class<?> vc) {
            super(vc);
        }

        @Override
        public ResolveAnEventID200ResponseEventEntriesInner deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {
            JsonNode tree = jp.readValueAsTree();

            Object deserialized = null;
            // deserialize ResolveAnEventID200ResponseEventEntriesInnerAnyOf
            try {
                deserialized = tree.traverse(jp.getCodec()).readValueAs(ResolveAnEventID200ResponseEventEntriesInnerAnyOf.class);
                ResolveAnEventID200ResponseEventEntriesInner ret = new ResolveAnEventID200ResponseEventEntriesInner();
                ret.setActualInstance(deserialized);
                return ret;
            } catch (Exception e) {
                // deserialization failed, continue, log to help debugging
                log.log(Level.FINER, "Input data does not match 'ResolveAnEventID200ResponseEventEntriesInner'", e);
            }

            // deserialize ResolveAnEventID200ResponseEventEntriesInnerAnyOf1
            try {
                deserialized = tree.traverse(jp.getCodec()).readValueAs(ResolveAnEventID200ResponseEventEntriesInnerAnyOf1.class);
                ResolveAnEventID200ResponseEventEntriesInner ret = new ResolveAnEventID200ResponseEventEntriesInner();
                ret.setActualInstance(deserialized);
                return ret;
            } catch (Exception e) {
                // deserialization failed, continue, log to help debugging
                log.log(Level.FINER, "Input data does not match 'ResolveAnEventID200ResponseEventEntriesInner'", e);
            }

            // deserialize ResolveAnEventID200ResponseEventEntriesInnerAnyOf2
            try {
                deserialized = tree.traverse(jp.getCodec()).readValueAs(ResolveAnEventID200ResponseEventEntriesInnerAnyOf2.class);
                ResolveAnEventID200ResponseEventEntriesInner ret = new ResolveAnEventID200ResponseEventEntriesInner();
                ret.setActualInstance(deserialized);
                return ret;
            } catch (Exception e) {
                // deserialization failed, continue, log to help debugging
                log.log(Level.FINER, "Input data does not match 'ResolveAnEventID200ResponseEventEntriesInner'", e);
            }

            // deserialize ResolveAnEventID200ResponseEventEntriesInnerAnyOf3
            try {
                deserialized = tree.traverse(jp.getCodec()).readValueAs(ResolveAnEventID200ResponseEventEntriesInnerAnyOf3.class);
                ResolveAnEventID200ResponseEventEntriesInner ret = new ResolveAnEventID200ResponseEventEntriesInner();
                ret.setActualInstance(deserialized);
                return ret;
            } catch (Exception e) {
                // deserialization failed, continue, log to help debugging
                log.log(Level.FINER, "Input data does not match 'ResolveAnEventID200ResponseEventEntriesInner'", e);
            }

            throw new IOException(String.format("Failed deserialization for ResolveAnEventID200ResponseEventEntriesInner: no match found"));
        }

        /**
         * Handle deserialization of the 'null' value.
         */
        @Override
        public ResolveAnEventID200ResponseEventEntriesInner getNullValue(DeserializationContext ctxt) throws JsonMappingException {
            throw new JsonMappingException(ctxt.getParser(), "ResolveAnEventID200ResponseEventEntriesInner cannot be null");
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, GenericType> schemas = new HashMap<>();

    public ResolveAnEventID200ResponseEventEntriesInner() {
        super("anyOf", Boolean.FALSE);
    }

    public ResolveAnEventID200ResponseEventEntriesInner(ResolveAnEventID200ResponseEventEntriesInnerAnyOf o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ResolveAnEventID200ResponseEventEntriesInner(ResolveAnEventID200ResponseEventEntriesInnerAnyOf1 o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ResolveAnEventID200ResponseEventEntriesInner(ResolveAnEventID200ResponseEventEntriesInnerAnyOf2 o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ResolveAnEventID200ResponseEventEntriesInner(ResolveAnEventID200ResponseEventEntriesInnerAnyOf3 o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("ResolveAnEventID200ResponseEventEntriesInnerAnyOf", new GenericType<ResolveAnEventID200ResponseEventEntriesInnerAnyOf>() {
        });
        schemas.put("ResolveAnEventID200ResponseEventEntriesInnerAnyOf1", new GenericType<ResolveAnEventID200ResponseEventEntriesInnerAnyOf1>() {
        });
        schemas.put("ResolveAnEventID200ResponseEventEntriesInnerAnyOf2", new GenericType<ResolveAnEventID200ResponseEventEntriesInnerAnyOf2>() {
        });
        schemas.put("ResolveAnEventID200ResponseEventEntriesInnerAnyOf3", new GenericType<ResolveAnEventID200ResponseEventEntriesInnerAnyOf3>() {
        });
        JSON.registerDescendants(ResolveAnEventID200ResponseEventEntriesInner.class, Collections.unmodifiableMap(schemas));
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return ResolveAnEventID200ResponseEventEntriesInner.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * ResolveAnEventID200ResponseEventEntriesInnerAnyOf, ResolveAnEventID200ResponseEventEntriesInnerAnyOf1, ResolveAnEventID200ResponseEventEntriesInnerAnyOf2, ResolveAnEventID200ResponseEventEntriesInnerAnyOf3
     *
     * It could be an instance of the 'anyOf' schemas.
     * The anyOf child schemas may themselves be a composed schema (allOf, anyOf, anyOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (JSON.isInstanceOf(ResolveAnEventID200ResponseEventEntriesInnerAnyOf.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(ResolveAnEventID200ResponseEventEntriesInnerAnyOf1.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(ResolveAnEventID200ResponseEventEntriesInnerAnyOf2.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(ResolveAnEventID200ResponseEventEntriesInnerAnyOf3.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be ResolveAnEventID200ResponseEventEntriesInnerAnyOf, ResolveAnEventID200ResponseEventEntriesInnerAnyOf1, ResolveAnEventID200ResponseEventEntriesInnerAnyOf2, ResolveAnEventID200ResponseEventEntriesInnerAnyOf3");
    }

    /**
     * Get the actual instance, which can be the following:
     * ResolveAnEventID200ResponseEventEntriesInnerAnyOf, ResolveAnEventID200ResponseEventEntriesInnerAnyOf1, ResolveAnEventID200ResponseEventEntriesInnerAnyOf2, ResolveAnEventID200ResponseEventEntriesInnerAnyOf3
     *
     * @return The actual instance (ResolveAnEventID200ResponseEventEntriesInnerAnyOf, ResolveAnEventID200ResponseEventEntriesInnerAnyOf1, ResolveAnEventID200ResponseEventEntriesInnerAnyOf2, ResolveAnEventID200ResponseEventEntriesInnerAnyOf3)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `ResolveAnEventID200ResponseEventEntriesInnerAnyOf`. If the actual instance is not `ResolveAnEventID200ResponseEventEntriesInnerAnyOf`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ResolveAnEventID200ResponseEventEntriesInnerAnyOf`
     * @throws ClassCastException if the instance is not `ResolveAnEventID200ResponseEventEntriesInnerAnyOf`
     */
    public ResolveAnEventID200ResponseEventEntriesInnerAnyOf getResolveAnEventID200ResponseEventEntriesInnerAnyOf() throws ClassCastException {
        return (ResolveAnEventID200ResponseEventEntriesInnerAnyOf)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ResolveAnEventID200ResponseEventEntriesInnerAnyOf1`. If the actual instance is not `ResolveAnEventID200ResponseEventEntriesInnerAnyOf1`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ResolveAnEventID200ResponseEventEntriesInnerAnyOf1`
     * @throws ClassCastException if the instance is not `ResolveAnEventID200ResponseEventEntriesInnerAnyOf1`
     */
    public ResolveAnEventID200ResponseEventEntriesInnerAnyOf1 getResolveAnEventID200ResponseEventEntriesInnerAnyOf1() throws ClassCastException {
        return (ResolveAnEventID200ResponseEventEntriesInnerAnyOf1)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ResolveAnEventID200ResponseEventEntriesInnerAnyOf2`. If the actual instance is not `ResolveAnEventID200ResponseEventEntriesInnerAnyOf2`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ResolveAnEventID200ResponseEventEntriesInnerAnyOf2`
     * @throws ClassCastException if the instance is not `ResolveAnEventID200ResponseEventEntriesInnerAnyOf2`
     */
    public ResolveAnEventID200ResponseEventEntriesInnerAnyOf2 getResolveAnEventID200ResponseEventEntriesInnerAnyOf2() throws ClassCastException {
        return (ResolveAnEventID200ResponseEventEntriesInnerAnyOf2)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ResolveAnEventID200ResponseEventEntriesInnerAnyOf3`. If the actual instance is not `ResolveAnEventID200ResponseEventEntriesInnerAnyOf3`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ResolveAnEventID200ResponseEventEntriesInnerAnyOf3`
     * @throws ClassCastException if the instance is not `ResolveAnEventID200ResponseEventEntriesInnerAnyOf3`
     */
    public ResolveAnEventID200ResponseEventEntriesInnerAnyOf3 getResolveAnEventID200ResponseEventEntriesInnerAnyOf3() throws ClassCastException {
        return (ResolveAnEventID200ResponseEventEntriesInnerAnyOf3)super.getActualInstance();
    }

}

