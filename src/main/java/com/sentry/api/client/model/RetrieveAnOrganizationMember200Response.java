/*
 * API Reference
 * Sentry Public API
 *
 * The version of the OpenAPI document: v0
 * Contact: partners@sentry.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sentry.api.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.sentry.api.client.model.RetrieveAnOrganizationMember200ResponseExternalUsersInner;
import com.sentry.api.client.model.RetrieveAnOrganizationMember200ResponseFlags;
import com.sentry.api.client.model.RetrieveAnOrganizationMember200ResponseGroupOrgRolesInner;
import com.sentry.api.client.model.RetrieveAnOrganizationMember200ResponseTeamRolesInner;
import com.sentry.api.client.model.RetrieveAnOrganizationMember200ResponseUser;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.sentry.api.client.JSON;

/**
 * RetrieveAnOrganizationMember200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-16T12:40:29.777755Z[Etc/UTC]")
public class RetrieveAnOrganizationMember200Response {
  public static final String SERIALIZED_NAME_EXTERNAL_USERS = "externalUsers";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_USERS)
  private List<RetrieveAnOrganizationMember200ResponseExternalUsersInner> externalUsers;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private RetrieveAnOrganizationMember200ResponseUser user;

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private String role;

  public static final String SERIALIZED_NAME_ROLE_NAME = "roleName";
  @SerializedName(SERIALIZED_NAME_ROLE_NAME)
  private String roleName;

  public static final String SERIALIZED_NAME_ORG_ROLE = "orgRole";
  @SerializedName(SERIALIZED_NAME_ORG_ROLE)
  private String orgRole;

  public static final String SERIALIZED_NAME_GROUP_ORG_ROLES = "groupOrgRoles";
  @SerializedName(SERIALIZED_NAME_GROUP_ORG_ROLES)
  private List<RetrieveAnOrganizationMember200ResponseGroupOrgRolesInner> groupOrgRoles = new ArrayList<>();

  public static final String SERIALIZED_NAME_PENDING = "pending";
  @SerializedName(SERIALIZED_NAME_PENDING)
  private Boolean pending;

  public static final String SERIALIZED_NAME_EXPIRED = "expired";
  @SerializedName(SERIALIZED_NAME_EXPIRED)
  private String expired;

  public static final String SERIALIZED_NAME_FLAGS = "flags";
  @SerializedName(SERIALIZED_NAME_FLAGS)
  private RetrieveAnOrganizationMember200ResponseFlags flags;

  public static final String SERIALIZED_NAME_DATE_CREATED = "dateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_INVITE_STATUS = "inviteStatus";
  @SerializedName(SERIALIZED_NAME_INVITE_STATUS)
  private String inviteStatus;

  public static final String SERIALIZED_NAME_INVITER_NAME = "inviterName";
  @SerializedName(SERIALIZED_NAME_INVITER_NAME)
  private String inviterName;

  public static final String SERIALIZED_NAME_TEAMS = "teams";
  @SerializedName(SERIALIZED_NAME_TEAMS)
  private List<String> teams = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEAM_ROLES = "teamRoles";
  @SerializedName(SERIALIZED_NAME_TEAM_ROLES)
  private List<RetrieveAnOrganizationMember200ResponseTeamRolesInner> teamRoles = new ArrayList<>();

  public static final String SERIALIZED_NAME_INVITE_LINK = "invite_link";
  @SerializedName(SERIALIZED_NAME_INVITE_LINK)
  private String inviteLink;

  public static final String SERIALIZED_NAME_IS_ONLY_OWNER = "isOnlyOwner";
  @SerializedName(SERIALIZED_NAME_IS_ONLY_OWNER)
  private Boolean isOnlyOwner;

  public static final String SERIALIZED_NAME_ROLES = "roles";
  @SerializedName(SERIALIZED_NAME_ROLES)
  private List<RetrieveAnOrganizationMember200ResponseGroupOrgRolesInner> roles = new ArrayList<>();

  public static final String SERIALIZED_NAME_ORG_ROLE_LIST = "orgRoleList";
  @SerializedName(SERIALIZED_NAME_ORG_ROLE_LIST)
  private List<RetrieveAnOrganizationMember200ResponseGroupOrgRolesInner> orgRoleList = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEAM_ROLE_LIST = "teamRoleList";
  @SerializedName(SERIALIZED_NAME_TEAM_ROLE_LIST)
  private List<RetrieveAnOrganizationMember200ResponseGroupOrgRolesInner> teamRoleList = new ArrayList<>();

  public RetrieveAnOrganizationMember200Response() {
  }

  public RetrieveAnOrganizationMember200Response externalUsers(List<RetrieveAnOrganizationMember200ResponseExternalUsersInner> externalUsers) {
    
    this.externalUsers = externalUsers;
    return this;
  }

  public RetrieveAnOrganizationMember200Response addExternalUsersItem(RetrieveAnOrganizationMember200ResponseExternalUsersInner externalUsersItem) {
    if (this.externalUsers == null) {
      this.externalUsers = new ArrayList<>();
    }
    this.externalUsers.add(externalUsersItem);
    return this;
  }

   /**
   * Get externalUsers
   * @return externalUsers
  **/
  @javax.annotation.Nullable
  public List<RetrieveAnOrganizationMember200ResponseExternalUsersInner> getExternalUsers() {
    return externalUsers;
  }


  public void setExternalUsers(List<RetrieveAnOrganizationMember200ResponseExternalUsersInner> externalUsers) {
    this.externalUsers = externalUsers;
  }


  public RetrieveAnOrganizationMember200Response id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public RetrieveAnOrganizationMember200Response email(String email) {
    
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @javax.annotation.Nonnull
  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    this.email = email;
  }


  public RetrieveAnOrganizationMember200Response name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public RetrieveAnOrganizationMember200Response user(RetrieveAnOrganizationMember200ResponseUser user) {
    
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @javax.annotation.Nonnull
  public RetrieveAnOrganizationMember200ResponseUser getUser() {
    return user;
  }


  public void setUser(RetrieveAnOrganizationMember200ResponseUser user) {
    this.user = user;
  }


  public RetrieveAnOrganizationMember200Response role(String role) {
    
    this.role = role;
    return this;
  }

   /**
   * Get role
   * @return role
  **/
  @javax.annotation.Nonnull
  public String getRole() {
    return role;
  }


  public void setRole(String role) {
    this.role = role;
  }


  public RetrieveAnOrganizationMember200Response roleName(String roleName) {
    
    this.roleName = roleName;
    return this;
  }

   /**
   * Get roleName
   * @return roleName
  **/
  @javax.annotation.Nonnull
  public String getRoleName() {
    return roleName;
  }


  public void setRoleName(String roleName) {
    this.roleName = roleName;
  }


  public RetrieveAnOrganizationMember200Response orgRole(String orgRole) {
    
    this.orgRole = orgRole;
    return this;
  }

   /**
   * Get orgRole
   * @return orgRole
  **/
  @javax.annotation.Nonnull
  public String getOrgRole() {
    return orgRole;
  }


  public void setOrgRole(String orgRole) {
    this.orgRole = orgRole;
  }


  public RetrieveAnOrganizationMember200Response groupOrgRoles(List<RetrieveAnOrganizationMember200ResponseGroupOrgRolesInner> groupOrgRoles) {
    
    this.groupOrgRoles = groupOrgRoles;
    return this;
  }

  public RetrieveAnOrganizationMember200Response addGroupOrgRolesItem(RetrieveAnOrganizationMember200ResponseGroupOrgRolesInner groupOrgRolesItem) {
    if (this.groupOrgRoles == null) {
      this.groupOrgRoles = new ArrayList<>();
    }
    this.groupOrgRoles.add(groupOrgRolesItem);
    return this;
  }

   /**
   * Get groupOrgRoles
   * @return groupOrgRoles
  **/
  @javax.annotation.Nonnull
  public List<RetrieveAnOrganizationMember200ResponseGroupOrgRolesInner> getGroupOrgRoles() {
    return groupOrgRoles;
  }


  public void setGroupOrgRoles(List<RetrieveAnOrganizationMember200ResponseGroupOrgRolesInner> groupOrgRoles) {
    this.groupOrgRoles = groupOrgRoles;
  }


  public RetrieveAnOrganizationMember200Response pending(Boolean pending) {
    
    this.pending = pending;
    return this;
  }

   /**
   * Get pending
   * @return pending
  **/
  @javax.annotation.Nonnull
  public Boolean getPending() {
    return pending;
  }


  public void setPending(Boolean pending) {
    this.pending = pending;
  }


  public RetrieveAnOrganizationMember200Response expired(String expired) {
    
    this.expired = expired;
    return this;
  }

   /**
   * Get expired
   * @return expired
  **/
  @javax.annotation.Nonnull
  public String getExpired() {
    return expired;
  }


  public void setExpired(String expired) {
    this.expired = expired;
  }


  public RetrieveAnOrganizationMember200Response flags(RetrieveAnOrganizationMember200ResponseFlags flags) {
    
    this.flags = flags;
    return this;
  }

   /**
   * Get flags
   * @return flags
  **/
  @javax.annotation.Nonnull
  public RetrieveAnOrganizationMember200ResponseFlags getFlags() {
    return flags;
  }


  public void setFlags(RetrieveAnOrganizationMember200ResponseFlags flags) {
    this.flags = flags;
  }


  public RetrieveAnOrganizationMember200Response dateCreated(OffsetDateTime dateCreated) {
    
    this.dateCreated = dateCreated;
    return this;
  }

   /**
   * Get dateCreated
   * @return dateCreated
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }


  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public RetrieveAnOrganizationMember200Response inviteStatus(String inviteStatus) {
    
    this.inviteStatus = inviteStatus;
    return this;
  }

   /**
   * Get inviteStatus
   * @return inviteStatus
  **/
  @javax.annotation.Nonnull
  public String getInviteStatus() {
    return inviteStatus;
  }


  public void setInviteStatus(String inviteStatus) {
    this.inviteStatus = inviteStatus;
  }


  public RetrieveAnOrganizationMember200Response inviterName(String inviterName) {
    
    this.inviterName = inviterName;
    return this;
  }

   /**
   * Get inviterName
   * @return inviterName
  **/
  @javax.annotation.Nullable
  public String getInviterName() {
    return inviterName;
  }


  public void setInviterName(String inviterName) {
    this.inviterName = inviterName;
  }


  public RetrieveAnOrganizationMember200Response teams(List<String> teams) {
    
    this.teams = teams;
    return this;
  }

  public RetrieveAnOrganizationMember200Response addTeamsItem(String teamsItem) {
    if (this.teams == null) {
      this.teams = new ArrayList<>();
    }
    this.teams.add(teamsItem);
    return this;
  }

   /**
   * Get teams
   * @return teams
  **/
  @javax.annotation.Nonnull
  public List<String> getTeams() {
    return teams;
  }


  public void setTeams(List<String> teams) {
    this.teams = teams;
  }


  public RetrieveAnOrganizationMember200Response teamRoles(List<RetrieveAnOrganizationMember200ResponseTeamRolesInner> teamRoles) {
    
    this.teamRoles = teamRoles;
    return this;
  }

  public RetrieveAnOrganizationMember200Response addTeamRolesItem(RetrieveAnOrganizationMember200ResponseTeamRolesInner teamRolesItem) {
    if (this.teamRoles == null) {
      this.teamRoles = new ArrayList<>();
    }
    this.teamRoles.add(teamRolesItem);
    return this;
  }

   /**
   * Get teamRoles
   * @return teamRoles
  **/
  @javax.annotation.Nonnull
  public List<RetrieveAnOrganizationMember200ResponseTeamRolesInner> getTeamRoles() {
    return teamRoles;
  }


  public void setTeamRoles(List<RetrieveAnOrganizationMember200ResponseTeamRolesInner> teamRoles) {
    this.teamRoles = teamRoles;
  }


  public RetrieveAnOrganizationMember200Response inviteLink(String inviteLink) {
    
    this.inviteLink = inviteLink;
    return this;
  }

   /**
   * Get inviteLink
   * @return inviteLink
  **/
  @javax.annotation.Nullable
  public String getInviteLink() {
    return inviteLink;
  }


  public void setInviteLink(String inviteLink) {
    this.inviteLink = inviteLink;
  }


  public RetrieveAnOrganizationMember200Response isOnlyOwner(Boolean isOnlyOwner) {
    
    this.isOnlyOwner = isOnlyOwner;
    return this;
  }

   /**
   * Get isOnlyOwner
   * @return isOnlyOwner
  **/
  @javax.annotation.Nonnull
  public Boolean getIsOnlyOwner() {
    return isOnlyOwner;
  }


  public void setIsOnlyOwner(Boolean isOnlyOwner) {
    this.isOnlyOwner = isOnlyOwner;
  }


  public RetrieveAnOrganizationMember200Response roles(List<RetrieveAnOrganizationMember200ResponseGroupOrgRolesInner> roles) {
    
    this.roles = roles;
    return this;
  }

  public RetrieveAnOrganizationMember200Response addRolesItem(RetrieveAnOrganizationMember200ResponseGroupOrgRolesInner rolesItem) {
    if (this.roles == null) {
      this.roles = new ArrayList<>();
    }
    this.roles.add(rolesItem);
    return this;
  }

   /**
   * Get roles
   * @return roles
  **/
  @javax.annotation.Nonnull
  public List<RetrieveAnOrganizationMember200ResponseGroupOrgRolesInner> getRoles() {
    return roles;
  }


  public void setRoles(List<RetrieveAnOrganizationMember200ResponseGroupOrgRolesInner> roles) {
    this.roles = roles;
  }


  public RetrieveAnOrganizationMember200Response orgRoleList(List<RetrieveAnOrganizationMember200ResponseGroupOrgRolesInner> orgRoleList) {
    
    this.orgRoleList = orgRoleList;
    return this;
  }

  public RetrieveAnOrganizationMember200Response addOrgRoleListItem(RetrieveAnOrganizationMember200ResponseGroupOrgRolesInner orgRoleListItem) {
    if (this.orgRoleList == null) {
      this.orgRoleList = new ArrayList<>();
    }
    this.orgRoleList.add(orgRoleListItem);
    return this;
  }

   /**
   * Get orgRoleList
   * @return orgRoleList
  **/
  @javax.annotation.Nonnull
  public List<RetrieveAnOrganizationMember200ResponseGroupOrgRolesInner> getOrgRoleList() {
    return orgRoleList;
  }


  public void setOrgRoleList(List<RetrieveAnOrganizationMember200ResponseGroupOrgRolesInner> orgRoleList) {
    this.orgRoleList = orgRoleList;
  }


  public RetrieveAnOrganizationMember200Response teamRoleList(List<RetrieveAnOrganizationMember200ResponseGroupOrgRolesInner> teamRoleList) {
    
    this.teamRoleList = teamRoleList;
    return this;
  }

  public RetrieveAnOrganizationMember200Response addTeamRoleListItem(RetrieveAnOrganizationMember200ResponseGroupOrgRolesInner teamRoleListItem) {
    if (this.teamRoleList == null) {
      this.teamRoleList = new ArrayList<>();
    }
    this.teamRoleList.add(teamRoleListItem);
    return this;
  }

   /**
   * Get teamRoleList
   * @return teamRoleList
  **/
  @javax.annotation.Nonnull
  public List<RetrieveAnOrganizationMember200ResponseGroupOrgRolesInner> getTeamRoleList() {
    return teamRoleList;
  }


  public void setTeamRoleList(List<RetrieveAnOrganizationMember200ResponseGroupOrgRolesInner> teamRoleList) {
    this.teamRoleList = teamRoleList;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RetrieveAnOrganizationMember200Response retrieveAnOrganizationMember200Response = (RetrieveAnOrganizationMember200Response) o;
    return Objects.equals(this.externalUsers, retrieveAnOrganizationMember200Response.externalUsers) &&
        Objects.equals(this.id, retrieveAnOrganizationMember200Response.id) &&
        Objects.equals(this.email, retrieveAnOrganizationMember200Response.email) &&
        Objects.equals(this.name, retrieveAnOrganizationMember200Response.name) &&
        Objects.equals(this.user, retrieveAnOrganizationMember200Response.user) &&
        Objects.equals(this.role, retrieveAnOrganizationMember200Response.role) &&
        Objects.equals(this.roleName, retrieveAnOrganizationMember200Response.roleName) &&
        Objects.equals(this.orgRole, retrieveAnOrganizationMember200Response.orgRole) &&
        Objects.equals(this.groupOrgRoles, retrieveAnOrganizationMember200Response.groupOrgRoles) &&
        Objects.equals(this.pending, retrieveAnOrganizationMember200Response.pending) &&
        Objects.equals(this.expired, retrieveAnOrganizationMember200Response.expired) &&
        Objects.equals(this.flags, retrieveAnOrganizationMember200Response.flags) &&
        Objects.equals(this.dateCreated, retrieveAnOrganizationMember200Response.dateCreated) &&
        Objects.equals(this.inviteStatus, retrieveAnOrganizationMember200Response.inviteStatus) &&
        Objects.equals(this.inviterName, retrieveAnOrganizationMember200Response.inviterName) &&
        Objects.equals(this.teams, retrieveAnOrganizationMember200Response.teams) &&
        Objects.equals(this.teamRoles, retrieveAnOrganizationMember200Response.teamRoles) &&
        Objects.equals(this.inviteLink, retrieveAnOrganizationMember200Response.inviteLink) &&
        Objects.equals(this.isOnlyOwner, retrieveAnOrganizationMember200Response.isOnlyOwner) &&
        Objects.equals(this.roles, retrieveAnOrganizationMember200Response.roles) &&
        Objects.equals(this.orgRoleList, retrieveAnOrganizationMember200Response.orgRoleList) &&
        Objects.equals(this.teamRoleList, retrieveAnOrganizationMember200Response.teamRoleList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(externalUsers, id, email, name, user, role, roleName, orgRole, groupOrgRoles, pending, expired, flags, dateCreated, inviteStatus, inviterName, teams, teamRoles, inviteLink, isOnlyOwner, roles, orgRoleList, teamRoleList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RetrieveAnOrganizationMember200Response {\n");
    sb.append("    externalUsers: ").append(toIndentedString(externalUsers)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    roleName: ").append(toIndentedString(roleName)).append("\n");
    sb.append("    orgRole: ").append(toIndentedString(orgRole)).append("\n");
    sb.append("    groupOrgRoles: ").append(toIndentedString(groupOrgRoles)).append("\n");
    sb.append("    pending: ").append(toIndentedString(pending)).append("\n");
    sb.append("    expired: ").append(toIndentedString(expired)).append("\n");
    sb.append("    flags: ").append(toIndentedString(flags)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    inviteStatus: ").append(toIndentedString(inviteStatus)).append("\n");
    sb.append("    inviterName: ").append(toIndentedString(inviterName)).append("\n");
    sb.append("    teams: ").append(toIndentedString(teams)).append("\n");
    sb.append("    teamRoles: ").append(toIndentedString(teamRoles)).append("\n");
    sb.append("    inviteLink: ").append(toIndentedString(inviteLink)).append("\n");
    sb.append("    isOnlyOwner: ").append(toIndentedString(isOnlyOwner)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("    orgRoleList: ").append(toIndentedString(orgRoleList)).append("\n");
    sb.append("    teamRoleList: ").append(toIndentedString(teamRoleList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("externalUsers");
    openapiFields.add("id");
    openapiFields.add("email");
    openapiFields.add("name");
    openapiFields.add("user");
    openapiFields.add("role");
    openapiFields.add("roleName");
    openapiFields.add("orgRole");
    openapiFields.add("groupOrgRoles");
    openapiFields.add("pending");
    openapiFields.add("expired");
    openapiFields.add("flags");
    openapiFields.add("dateCreated");
    openapiFields.add("inviteStatus");
    openapiFields.add("inviterName");
    openapiFields.add("teams");
    openapiFields.add("teamRoles");
    openapiFields.add("invite_link");
    openapiFields.add("isOnlyOwner");
    openapiFields.add("roles");
    openapiFields.add("orgRoleList");
    openapiFields.add("teamRoleList");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("user");
    openapiRequiredFields.add("role");
    openapiRequiredFields.add("roleName");
    openapiRequiredFields.add("orgRole");
    openapiRequiredFields.add("groupOrgRoles");
    openapiRequiredFields.add("pending");
    openapiRequiredFields.add("expired");
    openapiRequiredFields.add("flags");
    openapiRequiredFields.add("dateCreated");
    openapiRequiredFields.add("inviteStatus");
    openapiRequiredFields.add("inviterName");
    openapiRequiredFields.add("teams");
    openapiRequiredFields.add("teamRoles");
    openapiRequiredFields.add("invite_link");
    openapiRequiredFields.add("isOnlyOwner");
    openapiRequiredFields.add("roles");
    openapiRequiredFields.add("orgRoleList");
    openapiRequiredFields.add("teamRoleList");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RetrieveAnOrganizationMember200Response
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!RetrieveAnOrganizationMember200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RetrieveAnOrganizationMember200Response is not found in the empty JSON string", RetrieveAnOrganizationMember200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!RetrieveAnOrganizationMember200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RetrieveAnOrganizationMember200Response` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RetrieveAnOrganizationMember200Response.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("externalUsers") != null && !jsonObj.get("externalUsers").isJsonNull()) {
        JsonArray jsonArrayexternalUsers = jsonObj.getAsJsonArray("externalUsers");
        if (jsonArrayexternalUsers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("externalUsers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `externalUsers` to be an array in the JSON string but got `%s`", jsonObj.get("externalUsers").toString()));
          }

          // validate the optional field `externalUsers` (array)
          for (int i = 0; i < jsonArrayexternalUsers.size(); i++) {
            RetrieveAnOrganizationMember200ResponseExternalUsersInner.validateJsonObject(jsonArrayexternalUsers.get(i).getAsJsonObject());
          };
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `user`
      RetrieveAnOrganizationMember200ResponseUser.validateJsonObject(jsonObj.getAsJsonObject("user"));
      if (!jsonObj.get("role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role").toString()));
      }
      if (!jsonObj.get("roleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `roleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("roleName").toString()));
      }
      if (!jsonObj.get("orgRole").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orgRole` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orgRole").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("groupOrgRoles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupOrgRoles` to be an array in the JSON string but got `%s`", jsonObj.get("groupOrgRoles").toString()));
      }

      JsonArray jsonArraygroupOrgRoles = jsonObj.getAsJsonArray("groupOrgRoles");
      // validate the required field `groupOrgRoles` (array)
      for (int i = 0; i < jsonArraygroupOrgRoles.size(); i++) {
        RetrieveAnOrganizationMember200ResponseGroupOrgRolesInner.validateJsonObject(jsonArraygroupOrgRoles.get(i).getAsJsonObject());
      };
      if (!jsonObj.get("expired").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expired` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expired").toString()));
      }
      // validate the required field `flags`
      RetrieveAnOrganizationMember200ResponseFlags.validateJsonObject(jsonObj.getAsJsonObject("flags"));
      if (!jsonObj.get("inviteStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inviteStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inviteStatus").toString()));
      }
      if (!jsonObj.get("inviterName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inviterName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inviterName").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("teams") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("teams").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `teams` to be an array in the JSON string but got `%s`", jsonObj.get("teams").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("teamRoles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `teamRoles` to be an array in the JSON string but got `%s`", jsonObj.get("teamRoles").toString()));
      }

      JsonArray jsonArrayteamRoles = jsonObj.getAsJsonArray("teamRoles");
      // validate the required field `teamRoles` (array)
      for (int i = 0; i < jsonArrayteamRoles.size(); i++) {
        RetrieveAnOrganizationMember200ResponseTeamRolesInner.validateJsonObject(jsonArrayteamRoles.get(i).getAsJsonObject());
      };
      if (!jsonObj.get("invite_link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invite_link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invite_link").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("roles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `roles` to be an array in the JSON string but got `%s`", jsonObj.get("roles").toString()));
      }

      JsonArray jsonArrayroles = jsonObj.getAsJsonArray("roles");
      // validate the required field `roles` (array)
      for (int i = 0; i < jsonArrayroles.size(); i++) {
        RetrieveAnOrganizationMember200ResponseGroupOrgRolesInner.validateJsonObject(jsonArrayroles.get(i).getAsJsonObject());
      };
      // ensure the json data is an array
      if (!jsonObj.get("orgRoleList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `orgRoleList` to be an array in the JSON string but got `%s`", jsonObj.get("orgRoleList").toString()));
      }

      JsonArray jsonArrayorgRoleList = jsonObj.getAsJsonArray("orgRoleList");
      // validate the required field `orgRoleList` (array)
      for (int i = 0; i < jsonArrayorgRoleList.size(); i++) {
        RetrieveAnOrganizationMember200ResponseGroupOrgRolesInner.validateJsonObject(jsonArrayorgRoleList.get(i).getAsJsonObject());
      };
      // ensure the json data is an array
      if (!jsonObj.get("teamRoleList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `teamRoleList` to be an array in the JSON string but got `%s`", jsonObj.get("teamRoleList").toString()));
      }

      JsonArray jsonArrayteamRoleList = jsonObj.getAsJsonArray("teamRoleList");
      // validate the required field `teamRoleList` (array)
      for (int i = 0; i < jsonArrayteamRoleList.size(); i++) {
        RetrieveAnOrganizationMember200ResponseGroupOrgRolesInner.validateJsonObject(jsonArrayteamRoleList.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RetrieveAnOrganizationMember200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RetrieveAnOrganizationMember200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RetrieveAnOrganizationMember200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RetrieveAnOrganizationMember200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<RetrieveAnOrganizationMember200Response>() {
           @Override
           public void write(JsonWriter out, RetrieveAnOrganizationMember200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RetrieveAnOrganizationMember200Response read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RetrieveAnOrganizationMember200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RetrieveAnOrganizationMember200Response
  * @throws IOException if the JSON string is invalid with respect to RetrieveAnOrganizationMember200Response
  */
  public static RetrieveAnOrganizationMember200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RetrieveAnOrganizationMember200Response.class);
  }

 /**
  * Convert an instance of RetrieveAnOrganizationMember200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

