/*
 * API Reference
 * Sentry Public API
 *
 * The version of the OpenAPI document: v0
 * Contact: partners@sentry.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.RetrieveAProject200ResponseLatestReleaseProjectsInner;
import org.openapitools.client.model.RetrieveAnEventForAProject200ResponseReleaseOneOfLastDeploy;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.sentry.api.client.JSON;

/**
 * RetrieveAnEventForAProject200ResponseReleaseOneOf
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-15T09:39:48.475487Z[Etc/UTC]")
public class RetrieveAnEventForAProject200ResponseReleaseOneOf implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_AUTHORS = "authors";
  @SerializedName(SERIALIZED_NAME_AUTHORS)
  private List<Object> authors = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMMIT_COUNT = "commitCount";
  @SerializedName(SERIALIZED_NAME_COMMIT_COUNT)
  private Long commitCount;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private Object data;

  public static final String SERIALIZED_NAME_DATE_CREATED = "dateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_RELEASED = "dateReleased";
  @SerializedName(SERIALIZED_NAME_DATE_RELEASED)
  private OffsetDateTime dateReleased;

  public static final String SERIALIZED_NAME_DEPLOY_COUNT = "deployCount";
  @SerializedName(SERIALIZED_NAME_DEPLOY_COUNT)
  private Long deployCount;

  public static final String SERIALIZED_NAME_FIRST_EVENT = "firstEvent";
  @SerializedName(SERIALIZED_NAME_FIRST_EVENT)
  private OffsetDateTime firstEvent;

  public static final String SERIALIZED_NAME_LAST_COMMIT = "lastCommit";
  @SerializedName(SERIALIZED_NAME_LAST_COMMIT)
  private Object lastCommit;

  public static final String SERIALIZED_NAME_LAST_DEPLOY = "lastDeploy";
  @SerializedName(SERIALIZED_NAME_LAST_DEPLOY)
  private RetrieveAnEventForAProject200ResponseReleaseOneOfLastDeploy lastDeploy;

  public static final String SERIALIZED_NAME_LAST_EVENT = "lastEvent";
  @SerializedName(SERIALIZED_NAME_LAST_EVENT)
  private OffsetDateTime lastEvent;

  public static final String SERIALIZED_NAME_NEW_GROUPS = "newGroups";
  @SerializedName(SERIALIZED_NAME_NEW_GROUPS)
  private Long newGroups;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private Object owner;

  public static final String SERIALIZED_NAME_PROJECTS = "projects";
  @SerializedName(SERIALIZED_NAME_PROJECTS)
  private List<RetrieveAProject200ResponseLatestReleaseProjectsInner> projects = new ArrayList<>();

  public static final String SERIALIZED_NAME_REF = "ref";
  @SerializedName(SERIALIZED_NAME_REF)
  private String ref;

  public static final String SERIALIZED_NAME_SHORT_VERSION = "shortVersion";
  @SerializedName(SERIALIZED_NAME_SHORT_VERSION)
  private String shortVersion;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public RetrieveAnEventForAProject200ResponseReleaseOneOf() {
  }

  public RetrieveAnEventForAProject200ResponseReleaseOneOf authors(List<Object> authors) {
    
    this.authors = authors;
    return this;
  }

  public RetrieveAnEventForAProject200ResponseReleaseOneOf addAuthorsItem(Object authorsItem) {
    if (this.authors == null) {
      this.authors = new ArrayList<>();
    }
    this.authors.add(authorsItem);
    return this;
  }

   /**
   * Get authors
   * @return authors
  **/
  @javax.annotation.Nonnull
  public List<Object> getAuthors() {
    return authors;
  }


  public void setAuthors(List<Object> authors) {
    this.authors = authors;
  }


  public RetrieveAnEventForAProject200ResponseReleaseOneOf commitCount(Long commitCount) {
    
    this.commitCount = commitCount;
    return this;
  }

   /**
   * Get commitCount
   * @return commitCount
  **/
  @javax.annotation.Nonnull
  public Long getCommitCount() {
    return commitCount;
  }


  public void setCommitCount(Long commitCount) {
    this.commitCount = commitCount;
  }


  public RetrieveAnEventForAProject200ResponseReleaseOneOf data(Object data) {
    
    this.data = data;
    return this;
  }

   /**
   * Get data
   * @return data
  **/
  @javax.annotation.Nonnull
  public Object getData() {
    return data;
  }


  public void setData(Object data) {
    this.data = data;
  }


  public RetrieveAnEventForAProject200ResponseReleaseOneOf dateCreated(OffsetDateTime dateCreated) {
    
    this.dateCreated = dateCreated;
    return this;
  }

   /**
   * Get dateCreated
   * @return dateCreated
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }


  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public RetrieveAnEventForAProject200ResponseReleaseOneOf dateReleased(OffsetDateTime dateReleased) {
    
    this.dateReleased = dateReleased;
    return this;
  }

   /**
   * Get dateReleased
   * @return dateReleased
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getDateReleased() {
    return dateReleased;
  }


  public void setDateReleased(OffsetDateTime dateReleased) {
    this.dateReleased = dateReleased;
  }


  public RetrieveAnEventForAProject200ResponseReleaseOneOf deployCount(Long deployCount) {
    
    this.deployCount = deployCount;
    return this;
  }

   /**
   * Get deployCount
   * @return deployCount
  **/
  @javax.annotation.Nonnull
  public Long getDeployCount() {
    return deployCount;
  }


  public void setDeployCount(Long deployCount) {
    this.deployCount = deployCount;
  }


  public RetrieveAnEventForAProject200ResponseReleaseOneOf firstEvent(OffsetDateTime firstEvent) {
    
    this.firstEvent = firstEvent;
    return this;
  }

   /**
   * Get firstEvent
   * @return firstEvent
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getFirstEvent() {
    return firstEvent;
  }


  public void setFirstEvent(OffsetDateTime firstEvent) {
    this.firstEvent = firstEvent;
  }


  public RetrieveAnEventForAProject200ResponseReleaseOneOf lastCommit(Object lastCommit) {
    
    this.lastCommit = lastCommit;
    return this;
  }

   /**
   * Get lastCommit
   * @return lastCommit
  **/
  @javax.annotation.Nullable
  public Object getLastCommit() {
    return lastCommit;
  }


  public void setLastCommit(Object lastCommit) {
    this.lastCommit = lastCommit;
  }


  public RetrieveAnEventForAProject200ResponseReleaseOneOf lastDeploy(RetrieveAnEventForAProject200ResponseReleaseOneOfLastDeploy lastDeploy) {
    
    this.lastDeploy = lastDeploy;
    return this;
  }

   /**
   * Get lastDeploy
   * @return lastDeploy
  **/
  @javax.annotation.Nullable
  public RetrieveAnEventForAProject200ResponseReleaseOneOfLastDeploy getLastDeploy() {
    return lastDeploy;
  }


  public void setLastDeploy(RetrieveAnEventForAProject200ResponseReleaseOneOfLastDeploy lastDeploy) {
    this.lastDeploy = lastDeploy;
  }


  public RetrieveAnEventForAProject200ResponseReleaseOneOf lastEvent(OffsetDateTime lastEvent) {
    
    this.lastEvent = lastEvent;
    return this;
  }

   /**
   * Get lastEvent
   * @return lastEvent
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getLastEvent() {
    return lastEvent;
  }


  public void setLastEvent(OffsetDateTime lastEvent) {
    this.lastEvent = lastEvent;
  }


  public RetrieveAnEventForAProject200ResponseReleaseOneOf newGroups(Long newGroups) {
    
    this.newGroups = newGroups;
    return this;
  }

   /**
   * Get newGroups
   * @return newGroups
  **/
  @javax.annotation.Nonnull
  public Long getNewGroups() {
    return newGroups;
  }


  public void setNewGroups(Long newGroups) {
    this.newGroups = newGroups;
  }


  public RetrieveAnEventForAProject200ResponseReleaseOneOf owner(Object owner) {
    
    this.owner = owner;
    return this;
  }

   /**
   * Get owner
   * @return owner
  **/
  @javax.annotation.Nullable
  public Object getOwner() {
    return owner;
  }


  public void setOwner(Object owner) {
    this.owner = owner;
  }


  public RetrieveAnEventForAProject200ResponseReleaseOneOf projects(List<RetrieveAProject200ResponseLatestReleaseProjectsInner> projects) {
    
    this.projects = projects;
    return this;
  }

  public RetrieveAnEventForAProject200ResponseReleaseOneOf addProjectsItem(RetrieveAProject200ResponseLatestReleaseProjectsInner projectsItem) {
    if (this.projects == null) {
      this.projects = new ArrayList<>();
    }
    this.projects.add(projectsItem);
    return this;
  }

   /**
   * Get projects
   * @return projects
  **/
  @javax.annotation.Nonnull
  public List<RetrieveAProject200ResponseLatestReleaseProjectsInner> getProjects() {
    return projects;
  }


  public void setProjects(List<RetrieveAProject200ResponseLatestReleaseProjectsInner> projects) {
    this.projects = projects;
  }


  public RetrieveAnEventForAProject200ResponseReleaseOneOf ref(String ref) {
    
    this.ref = ref;
    return this;
  }

   /**
   * Get ref
   * @return ref
  **/
  @javax.annotation.Nullable
  public String getRef() {
    return ref;
  }


  public void setRef(String ref) {
    this.ref = ref;
  }


  public RetrieveAnEventForAProject200ResponseReleaseOneOf shortVersion(String shortVersion) {
    
    this.shortVersion = shortVersion;
    return this;
  }

   /**
   * Get shortVersion
   * @return shortVersion
  **/
  @javax.annotation.Nonnull
  public String getShortVersion() {
    return shortVersion;
  }


  public void setShortVersion(String shortVersion) {
    this.shortVersion = shortVersion;
  }


  public RetrieveAnEventForAProject200ResponseReleaseOneOf version(String version) {
    
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @javax.annotation.Nonnull
  public String getVersion() {
    return version;
  }


  public void setVersion(String version) {
    this.version = version;
  }


  public RetrieveAnEventForAProject200ResponseReleaseOneOf url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RetrieveAnEventForAProject200ResponseReleaseOneOf retrieveAnEventForAProject200ResponseReleaseOneOf = (RetrieveAnEventForAProject200ResponseReleaseOneOf) o;
    return Objects.equals(this.authors, retrieveAnEventForAProject200ResponseReleaseOneOf.authors) &&
        Objects.equals(this.commitCount, retrieveAnEventForAProject200ResponseReleaseOneOf.commitCount) &&
        Objects.equals(this.data, retrieveAnEventForAProject200ResponseReleaseOneOf.data) &&
        Objects.equals(this.dateCreated, retrieveAnEventForAProject200ResponseReleaseOneOf.dateCreated) &&
        Objects.equals(this.dateReleased, retrieveAnEventForAProject200ResponseReleaseOneOf.dateReleased) &&
        Objects.equals(this.deployCount, retrieveAnEventForAProject200ResponseReleaseOneOf.deployCount) &&
        Objects.equals(this.firstEvent, retrieveAnEventForAProject200ResponseReleaseOneOf.firstEvent) &&
        Objects.equals(this.lastCommit, retrieveAnEventForAProject200ResponseReleaseOneOf.lastCommit) &&
        Objects.equals(this.lastDeploy, retrieveAnEventForAProject200ResponseReleaseOneOf.lastDeploy) &&
        Objects.equals(this.lastEvent, retrieveAnEventForAProject200ResponseReleaseOneOf.lastEvent) &&
        Objects.equals(this.newGroups, retrieveAnEventForAProject200ResponseReleaseOneOf.newGroups) &&
        Objects.equals(this.owner, retrieveAnEventForAProject200ResponseReleaseOneOf.owner) &&
        Objects.equals(this.projects, retrieveAnEventForAProject200ResponseReleaseOneOf.projects) &&
        Objects.equals(this.ref, retrieveAnEventForAProject200ResponseReleaseOneOf.ref) &&
        Objects.equals(this.shortVersion, retrieveAnEventForAProject200ResponseReleaseOneOf.shortVersion) &&
        Objects.equals(this.version, retrieveAnEventForAProject200ResponseReleaseOneOf.version) &&
        Objects.equals(this.url, retrieveAnEventForAProject200ResponseReleaseOneOf.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authors, commitCount, data, dateCreated, dateReleased, deployCount, firstEvent, lastCommit, lastDeploy, lastEvent, newGroups, owner, projects, ref, shortVersion, version, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RetrieveAnEventForAProject200ResponseReleaseOneOf {\n");
    sb.append("    authors: ").append(toIndentedString(authors)).append("\n");
    sb.append("    commitCount: ").append(toIndentedString(commitCount)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateReleased: ").append(toIndentedString(dateReleased)).append("\n");
    sb.append("    deployCount: ").append(toIndentedString(deployCount)).append("\n");
    sb.append("    firstEvent: ").append(toIndentedString(firstEvent)).append("\n");
    sb.append("    lastCommit: ").append(toIndentedString(lastCommit)).append("\n");
    sb.append("    lastDeploy: ").append(toIndentedString(lastDeploy)).append("\n");
    sb.append("    lastEvent: ").append(toIndentedString(lastEvent)).append("\n");
    sb.append("    newGroups: ").append(toIndentedString(newGroups)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    projects: ").append(toIndentedString(projects)).append("\n");
    sb.append("    ref: ").append(toIndentedString(ref)).append("\n");
    sb.append("    shortVersion: ").append(toIndentedString(shortVersion)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authors");
    openapiFields.add("commitCount");
    openapiFields.add("data");
    openapiFields.add("dateCreated");
    openapiFields.add("dateReleased");
    openapiFields.add("deployCount");
    openapiFields.add("firstEvent");
    openapiFields.add("lastCommit");
    openapiFields.add("lastDeploy");
    openapiFields.add("lastEvent");
    openapiFields.add("newGroups");
    openapiFields.add("owner");
    openapiFields.add("projects");
    openapiFields.add("ref");
    openapiFields.add("shortVersion");
    openapiFields.add("version");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("authors");
    openapiRequiredFields.add("commitCount");
    openapiRequiredFields.add("data");
    openapiRequiredFields.add("dateCreated");
    openapiRequiredFields.add("dateReleased");
    openapiRequiredFields.add("deployCount");
    openapiRequiredFields.add("firstEvent");
    openapiRequiredFields.add("lastCommit");
    openapiRequiredFields.add("lastDeploy");
    openapiRequiredFields.add("lastEvent");
    openapiRequiredFields.add("newGroups");
    openapiRequiredFields.add("owner");
    openapiRequiredFields.add("projects");
    openapiRequiredFields.add("ref");
    openapiRequiredFields.add("shortVersion");
    openapiRequiredFields.add("version");
    openapiRequiredFields.add("url");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RetrieveAnEventForAProject200ResponseReleaseOneOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!RetrieveAnEventForAProject200ResponseReleaseOneOf.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RetrieveAnEventForAProject200ResponseReleaseOneOf is not found in the empty JSON string", RetrieveAnEventForAProject200ResponseReleaseOneOf.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!RetrieveAnEventForAProject200ResponseReleaseOneOf.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RetrieveAnEventForAProject200ResponseReleaseOneOf` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RetrieveAnEventForAProject200ResponseReleaseOneOf.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the required json array is present
      if (jsonObj.get("authors") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("authors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `authors` to be an array in the JSON string but got `%s`", jsonObj.get("authors").toString()));
      }
      // validate the required field `lastDeploy`
      RetrieveAnEventForAProject200ResponseReleaseOneOfLastDeploy.validateJsonObject(jsonObj.getAsJsonObject("lastDeploy"));
      // ensure the json data is an array
      if (!jsonObj.get("projects").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `projects` to be an array in the JSON string but got `%s`", jsonObj.get("projects").toString()));
      }

      JsonArray jsonArrayprojects = jsonObj.getAsJsonArray("projects");
      // validate the required field `projects` (array)
      for (int i = 0; i < jsonArrayprojects.size(); i++) {
        RetrieveAProject200ResponseLatestReleaseProjectsInner.validateJsonObject(jsonArrayprojects.get(i).getAsJsonObject());
      };
      if (!jsonObj.get("ref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ref").toString()));
      }
      if (!jsonObj.get("shortVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shortVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shortVersion").toString()));
      }
      if (!jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RetrieveAnEventForAProject200ResponseReleaseOneOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RetrieveAnEventForAProject200ResponseReleaseOneOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RetrieveAnEventForAProject200ResponseReleaseOneOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RetrieveAnEventForAProject200ResponseReleaseOneOf.class));

       return (TypeAdapter<T>) new TypeAdapter<RetrieveAnEventForAProject200ResponseReleaseOneOf>() {
           @Override
           public void write(JsonWriter out, RetrieveAnEventForAProject200ResponseReleaseOneOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RetrieveAnEventForAProject200ResponseReleaseOneOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RetrieveAnEventForAProject200ResponseReleaseOneOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RetrieveAnEventForAProject200ResponseReleaseOneOf
  * @throws IOException if the JSON string is invalid with respect to RetrieveAnEventForAProject200ResponseReleaseOneOf
  */
  public static RetrieveAnEventForAProject200ResponseReleaseOneOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RetrieveAnEventForAProject200ResponseReleaseOneOf.class);
  }

 /**
  * Convert an instance of RetrieveAnEventForAProject200ResponseReleaseOneOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

