/*
 * API Reference
 * Sentry Public API
 *
 * The version of the OpenAPI document: v0
 * Contact: partners@sentry.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sentry.api.client.java;

import com.sentry.api.client.ApiException;
import org.openapitools.client.model.BulkMutateAListOfIssues200Response;
import org.openapitools.client.model.BulkMutateAListOfIssuesRequest;
import org.openapitools.client.model.DebugIssuesRelatedToSourceMapsForAGivenEvent200Response;
import org.openapitools.client.model.ListAProjectSEvents200ResponseInner;
import org.openapitools.client.model.ListAProjectSIssues200ResponseInner;
import org.openapitools.client.model.ListATagSValuesRelatedToAnIssue200ResponseInner;
import org.openapitools.client.model.ListAnIssueSHashes200ResponseInner;
import org.openapitools.client.model.RetrieveAnEventForAProject200Response;
import org.openapitools.client.model.RetrieveAnIssue200Response;
import org.openapitools.client.model.RetrieveTagDetails200Response;
import java.util.UUID;
import org.openapitools.client.model.UpdateAnIssue200Response;
import org.openapitools.client.model.UpdateAnIssueRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EventsApi
 */
@Disabled
public class EventsApiTest {

    private final EventsApi api = new EventsApi();

    /**
     * Bulk mutate various attributes on issues.  The list of issues to modify is given through the &#x60;id&#x60; query parameter.  It is repeated for each issue that should be modified.  - For non-status updates, the &#x60;id&#x60; query parameter is required. - For status updates, the &#x60;id&#x60; query parameter may be omitted for a batch \&quot;update all\&quot; query. - An optional &#x60;status&#x60; query parameter may be used to restrict mutations to only events with the given status.  The following attributes can be modified and are supplied as JSON object in the body:  If any ids are out of scope this operation will succeed without any data mutation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bulkMutateAListOfIssuesTest() throws ApiException {
        String organizationSlug = null;
        String projectSlug = null;
        BulkMutateAListOfIssuesRequest bulkMutateAListOfIssuesRequest = null;
        Integer id = null;
        String status = null;
        BulkMutateAListOfIssues200Response response = api.bulkMutateAListOfIssues(organizationSlug, projectSlug, bulkMutateAListOfIssuesRequest, id, status);
        // TODO: test validations
    }

    /**
     * Permanently remove the given issues. The list of issues to modify is given through the &#x60;id&#x60; query parameter.  It is repeated for each issue that should be removed.  Only queries by &#39;id&#39; are accepted.  If any ids are out of scope this operation will succeed without any data mutation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bulkRemoveAListOfIssuesTest() throws ApiException {
        String organizationSlug = null;
        String projectSlug = null;
        Integer id = null;
        api.bulkRemoveAListOfIssues(organizationSlug, projectSlug, id);
        // TODO: test validations
    }

    /**
     * Retrieve information about source maps for a given event. &#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60;&#x60; Return a list of source map errors for a given event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void debugIssuesRelatedToSourceMapsForAGivenEventTest() throws ApiException {
        String organizationSlug = null;
        String projectSlug = null;
        UUID eventId = null;
        Integer frameIdx = null;
        Integer exceptionIdx = null;
        DebugIssuesRelatedToSourceMapsForAGivenEvent200Response response = api.debugIssuesRelatedToSourceMapsForAGivenEvent(organizationSlug, projectSlug, eventId, frameIdx, exceptionIdx);
        // TODO: test validations
    }

    /**
     * Return a list of events bound to a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAProjectsEventsTest() throws ApiException {
        String organizationSlug = null;
        String projectSlug = null;
        Boolean full = null;
        String cursor = null;
        List<ListAProjectSEvents200ResponseInner> response = api.listAProjectsEvents(organizationSlug, projectSlug, full, cursor);
        // TODO: test validations
    }

    /**
     * Return a list of issues (groups) bound to a project.  All parameters are supplied as query string parameters.    A default query of &#x60;&#x60;is:unresolved&#x60;&#x60; is applied. To return results with other statuses send an new query value (i.e. &#x60;&#x60;?query&#x3D;&#x60;&#x60; for all results).  The &#x60;&#x60;statsPeriod&#x60;&#x60; parameter can be used to select the timeline stats which should be present. Possible values are: &#x60;&#x60;\&quot;\&quot;&#x60;&#x60; (disable),&#x60;&#x60;\&quot;24h\&quot;&#x60;&#x60;, &#x60;&#x60;\&quot;14d\&quot;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAProjectsIssuesTest() throws ApiException {
        String organizationSlug = null;
        String projectSlug = null;
        String statsPeriod = null;
        Boolean shortIdLookup = null;
        String query = null;
        String cursor = null;
        List<ListAProjectSIssues200ResponseInner> response = api.listAProjectsIssues(organizationSlug, projectSlug, statsPeriod, shortIdLookup, query, cursor);
        // TODO: test validations
    }

    /**
     * Returns details for given tag key related to an issue.   When [paginated](/api/pagination) can return at most 1000 values.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listATagsValuesRelatedToAnIssueTest() throws ApiException {
        String issueId = null;
        String key = null;
        List<ListATagSValuesRelatedToAnIssue200ResponseInner> response = api.listATagsValuesRelatedToAnIssue(issueId, key);
        // TODO: test validations
    }

    /**
     * This endpoint lists an issue&#39;s events.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAnIssuesEventsTest() throws ApiException {
        String issueId = null;
        Boolean full = null;
        List<ListAProjectSEvents200ResponseInner> response = api.listAnIssuesEvents(issueId, full);
        // TODO: test validations
    }

    /**
     * This endpoint lists an issue&#39;s hashes, which are the generated checksums used to aggregate individual events.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAnIssuesHashesTest() throws ApiException {
        String issueId = null;
        String cursor = null;
        List<ListAnIssueSHashes200ResponseInner> response = api.listAnIssuesHashes(issueId, cursor);
        // TODO: test validations
    }

    /**
     * Removes an individual issue.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeAnIssueTest() throws ApiException {
        String issueId = null;
        api.removeAnIssue(issueId);
        // TODO: test validations
    }

    /**
     * Return details on an individual event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveAnEventForAProjectTest() throws ApiException {
        String organizationSlug = null;
        String projectSlug = null;
        String eventId = null;
        RetrieveAnEventForAProject200Response response = api.retrieveAnEventForAProject(organizationSlug, projectSlug, eventId);
        // TODO: test validations
    }

    /**
     * Return details on an individual issue. This returns the basic stats for the issue (title, last seen, first seen), some overall numbers (number of comments, user reports) as well as the summarized event data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveAnIssueTest() throws ApiException {
        String issueId = null;
        RetrieveAnIssue200Response response = api.retrieveAnIssue(issueId);
        // TODO: test validations
    }

    /**
     * Returns details for given tag key related to an issue.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveTagDetailsTest() throws ApiException {
        String issueId = null;
        String key = null;
        RetrieveTagDetails200Response response = api.retrieveTagDetails(issueId, key);
        // TODO: test validations
    }

    /**
     * Retrieves the details of the latest event for an issue.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveTheLatestEventForAnIssueTest() throws ApiException {
        String issueId = null;
        RetrieveAnEventForAProject200Response response = api.retrieveTheLatestEventForAnIssue(issueId);
        // TODO: test validations
    }

    /**
     * Retrieves the details of the oldest event for an issue.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveTheOldestEventForAnIssueTest() throws ApiException {
        String issueId = null;
        RetrieveAnEventForAProject200Response response = api.retrieveTheOldestEventForAnIssue(issueId);
        // TODO: test validations
    }

    /**
     * Updates an individual issue&#39;s attributes.  Only the attributes submitted are modified.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAnIssueTest() throws ApiException {
        String issueId = null;
        UpdateAnIssueRequest updateAnIssueRequest = null;
        UpdateAnIssue200Response response = api.updateAnIssue(issueId, updateAnIssueRequest);
        // TODO: test validations
    }

}
