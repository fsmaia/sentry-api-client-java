/*
 * API Reference
 * Sentry Public API
 *
 * The version of the OpenAPI document: v0
 * Contact: partners@sentry.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sentry.api.client.java;

import com.sentry.api.client.ApiException;
import org.openapitools.client.model.CreateANewTeamRequest;
import org.openapitools.client.model.ListAnOrganizationSProjects200ResponseInner;
import org.openapitools.client.model.ListAnOrganizationSTeams200ResponseInner;
import java.time.OffsetDateTime;
import org.openapitools.client.model.RetrieveATeam200Response;
import org.openapitools.client.model.UpdateATeam200Response;
import org.openapitools.client.model.UpdateATeamRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TeamsApi
 */
@Disabled
public class TeamsApiTest {

    private final TeamsApi api = new TeamsApi();

    /**
     * Create a new team bound to an organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createANewTeamTest() throws ApiException {
        String organizationSlug = null;
        String name = null;
        String slug = null;
        CreateANewTeamRequest createANewTeamRequest = null;
        ListAnOrganizationSTeams200ResponseInner response = api.createANewTeam(organizationSlug, name, slug, createANewTeamRequest);
        // TODO: test validations
    }

    /**
     * Schedules a team for deletion.  Note: Deletion happens asynchronously and therefore is not immediate. However once deletion has begun the state of a project changes and will be hidden from most public views.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteATeamTest() throws ApiException {
        String organizationSlug = null;
        String teamSlug = null;
        api.deleteATeam(organizationSlug, teamSlug);
        // TODO: test validations
    }

    /**
     * Return a list of projects bound to a team.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listATeamsProjectsTest() throws ApiException {
        String organizationSlug = null;
        String teamSlug = null;
        String cursor = null;
        List<ListAnOrganizationSProjects200ResponseInner> response = api.listATeamsProjects(organizationSlug, teamSlug, cursor);
        // TODO: test validations
    }

    /**
     * Returns a list of teams bound to a organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAnOrganizationsTeamsTest() throws ApiException {
        String organizationSlug = null;
        String detailed = null;
        String cursor = null;
        List<ListAnOrganizationSTeams200ResponseInner> response = api.listAnOrganizationsTeams(organizationSlug, detailed, cursor);
        // TODO: test validations
    }

    /**
     * Return details on an individual team.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveATeamTest() throws ApiException {
        String organizationSlug = null;
        String teamSlug = null;
        RetrieveATeam200Response response = api.retrieveATeam(organizationSlug, teamSlug);
        // TODO: test validations
    }

    /**
     * Caution: this endpoint may change in the future without notice.
     *
     * Return a set of points representing a normalized timestamp and the number of events seen in the period.  Query ranges are limited to Sentryâ€™s configured time-series resolutions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveEventCountsForATeamTest() throws ApiException {
        String organizationSlug = null;
        String teamSlug = null;
        String stat = null;
        OffsetDateTime since = null;
        OffsetDateTime until = null;
        String resolution = null;
        List<List<Integer>> response = api.retrieveEventCountsForATeam(organizationSlug, teamSlug, stat, since, until, resolution);
        // TODO: test validations
    }

    /**
     * Update various attributes and configurable settings for the given team.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateATeamTest() throws ApiException {
        String organizationSlug = null;
        String teamSlug = null;
        UpdateATeamRequest updateATeamRequest = null;
        UpdateATeam200Response response = api.updateATeam(organizationSlug, teamSlug, updateATeamRequest);
        // TODO: test validations
    }

}
