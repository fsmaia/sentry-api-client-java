/*
 * API Reference
 * Sentry Public API
 *
 * The version of the OpenAPI document: v0
 * Contact: partners@sentry.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sentry.api.client.api;

import com.sentry.api.client.ApiException;
import com.sentry.api.client.model.CreateANewClientKeyRequest;
import com.sentry.api.client.model.CreateANewProjectRequest;
import java.io.File;
import com.sentry.api.client.model.ListAProjectSClientKeys200ResponseInner;
import com.sentry.api.client.model.ListAProjectSServiceHooks200ResponseInner;
import com.sentry.api.client.model.ListAProjectSUserFeedback200ResponseInner;
import com.sentry.api.client.model.ListAProjectSUsers200ResponseInner;
import com.sentry.api.client.model.ListATagSValues200ResponseInner;
import com.sentry.api.client.model.ListYourProjects200ResponseInner;
import java.time.OffsetDateTime;
import com.sentry.api.client.model.RegisterANewServiceHookRequest;
import com.sentry.api.client.model.RetrieveAProject200Response;
import com.sentry.api.client.model.RetrieveMonitorsForAnOrganization200ResponseInnerProject;
import com.sentry.api.client.model.SubmitUserFeedbackRequest;
import com.sentry.api.client.model.UpdateAClientKeyRequest;
import com.sentry.api.client.model.UpdateAProjectRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Create a new client key bound to a project.  The key&#39;s secret and public key are generated by the server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createANewClientKeyTest() throws ApiException {
        String organizationSlug = null;
        String projectSlug = null;
        CreateANewClientKeyRequest createANewClientKeyRequest = null;
        ListAProjectSClientKeys200ResponseInner response = api.createANewClientKey(organizationSlug, projectSlug, createANewClientKeyRequest);
        // TODO: test validations
    }

    /**
     * Create a new project bound to a team.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createANewProjectTest() throws ApiException {
        String organizationSlug = null;
        String teamSlug = null;
        String name = null;
        CreateANewProjectRequest createANewProjectRequest = null;
        String slug = null;
        String platform = null;
        Boolean defaultRules = null;
        RetrieveMonitorsForAnOrganization200ResponseInnerProject response = api.createANewProject(organizationSlug, teamSlug, name, createANewProjectRequest, slug, platform, defaultRules);
        // TODO: test validations
    }

    /**
     * Delete a client key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAClientKeyTest() throws ApiException {
        String organizationSlug = null;
        String projectSlug = null;
        String keyId = null;
        api.deleteAClientKey(organizationSlug, projectSlug, keyId);
        // TODO: test validations
    }

    /**
     * Schedules a project for deletion.  Deletion happens asynchronously and therefore is not immediate. However once deletion has begun the state of a project changes and will be hidden from most public views.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAProjectTest() throws ApiException {
        String organizationSlug = null;
        String projectSlug = null;
        api.deleteAProject(organizationSlug, projectSlug);
        // TODO: test validations
    }

    /**
     * Delete a debug information file for a given project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteASpecificProjectsDebugInformationFileTest() throws ApiException {
        String organizationSlug = null;
        String projectSlug = null;
        String id = null;
        api.deleteASpecificProjectsDebugInformationFile(organizationSlug, projectSlug, id);
        // TODO: test validations
    }

    /**
     * Return a list of client keys bound to a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAProjectsClientKeysTest() throws ApiException {
        String organizationSlug = null;
        String projectSlug = null;
        String cursor = null;
        List<ListAProjectSClientKeys200ResponseInner> response = api.listAProjectsClientKeys(organizationSlug, projectSlug, cursor);
        // TODO: test validations
    }

    /**
     * Retrieve a list of debug information files for a given project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAProjectsDebugInformationFilesTest() throws ApiException {
        String organizationSlug = null;
        String projectSlug = null;
        api.listAProjectsDebugInformationFiles(organizationSlug, projectSlug);
        // TODO: test validations
    }

    /**
     * Return a list of service hooks bound to a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAProjectsServiceHooksTest() throws ApiException {
        String organizationSlug = null;
        String projectSlug = null;
        String cursor = null;
        List<ListAProjectSServiceHooks200ResponseInner> response = api.listAProjectsServiceHooks(organizationSlug, projectSlug, cursor);
        // TODO: test validations
    }

    /**
     * Return a list of user feedback items within this project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAProjectsUserFeedbackTest() throws ApiException {
        String organizationSlug = null;
        String projectSlug = null;
        List<ListAProjectSUserFeedback200ResponseInner> response = api.listAProjectsUserFeedback(organizationSlug, projectSlug);
        // TODO: test validations
    }

    /**
     * Return a list of users seen within this project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAProjectsUsersTest() throws ApiException {
        String organizationSlug = null;
        String projectSlug = null;
        String query = null;
        List<ListAProjectSUsers200ResponseInner> response = api.listAProjectsUsers(organizationSlug, projectSlug, query);
        // TODO: test validations
    }

    /**
     * Return a list of values associated with this key.  The &#x60;query&#x60; parameter can be used to to perform a \&quot;contains\&quot; match on values.   When [paginated](/api/pagination) can return at most 1000 values.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listATagsValuesTest() throws ApiException {
        String organizationSlug = null;
        String projectSlug = null;
        String key = null;
        List<ListATagSValues200ResponseInner> response = api.listATagsValues(organizationSlug, projectSlug, key);
        // TODO: test validations
    }

    /**
     * Return a list of projects available to the authenticated session.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listYourProjectsTest() throws ApiException {
        String cursor = null;
        List<ListYourProjects200ResponseInner> response = api.listYourProjects(cursor);
        // TODO: test validations
    }

    /**
     * Register a new service hook on a project.  Events include:  - event.alert: An alert is generated for an event (via rules). - event.created: A new event has been processed.  This endpoint requires the &#39;servicehooks&#39; feature to be enabled for your project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registerANewServiceHookTest() throws ApiException {
        String organizationSlug = null;
        String projectSlug = null;
        RegisterANewServiceHookRequest registerANewServiceHookRequest = null;
        ListAProjectSServiceHooks200ResponseInner response = api.registerANewServiceHook(organizationSlug, projectSlug, registerANewServiceHookRequest);
        // TODO: test validations
    }

    /**
     * Remove a service hook.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeAServiceHookTest() throws ApiException {
        String organizationSlug = null;
        String projectSlug = null;
        String hookId = null;
        api.removeAServiceHook(organizationSlug, projectSlug, hookId);
        // TODO: test validations
    }

    /**
     * Return details on an individual project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveAProjectTest() throws ApiException {
        String organizationSlug = null;
        String projectSlug = null;
        RetrieveAProject200Response response = api.retrieveAProject(organizationSlug, projectSlug);
        // TODO: test validations
    }

    /**
     * Return a service hook bound to a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveAServiceHookTest() throws ApiException {
        String organizationSlug = null;
        String projectSlug = null;
        String hookId = null;
        ListAProjectSServiceHooks200ResponseInner response = api.retrieveAServiceHook(organizationSlug, projectSlug, hookId);
        // TODO: test validations
    }

    /**
     * Caution This endpoint may change in the future without  notice.
     *
     * Return a set of points representing a normalized timestamp and the number of events seen in the period.  Query ranges are limited to Sentry&#39;s configured time-series resolutions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveEventCountsForAProjectTest() throws ApiException {
        String organizationSlug = null;
        String projectSlug = null;
        String stat = null;
        OffsetDateTime since = null;
        OffsetDateTime until = null;
        String resolution = null;
        List<List<Integer>> response = api.retrieveEventCountsForAProject(organizationSlug, projectSlug, stat, since, until, resolution);
        // TODO: test validations
    }

    /**
     * Submit and associate user feedback with an issue.  Feedback must be received by the server no more than 30 minutes after the event was saved.  Additionally, within 5 minutes of submitting feedback it may also be overwritten. This is useful in situations where you may need to retry sending a request due to network failures.  If feedback is rejected due to a mutability threshold, a 409 status code will be returned.  Note: Feedback may be submitted with DSN authentication (see auth documentation).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void submitUserFeedbackTest() throws ApiException {
        String organizationSlug = null;
        String projectSlug = null;
        SubmitUserFeedbackRequest submitUserFeedbackRequest = null;
        ListAProjectSUserFeedback200ResponseInner response = api.submitUserFeedback(organizationSlug, projectSlug, submitUserFeedbackRequest);
        // TODO: test validations
    }

    /**
     * Update a client key.  This can be used to rename a key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAClientKeyTest() throws ApiException {
        String organizationSlug = null;
        String projectSlug = null;
        String keyId = null;
        UpdateAClientKeyRequest updateAClientKeyRequest = null;
        ListAProjectSClientKeys200ResponseInner response = api.updateAClientKey(organizationSlug, projectSlug, keyId, updateAClientKeyRequest);
        // TODO: test validations
    }

    /**
     * Update various attributes and configurable settings for the given project.  Only supplied values are updated.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAProjectTest() throws ApiException {
        String organizationSlug = null;
        String projectSlug = null;
        UpdateAProjectRequest updateAProjectRequest = null;
        RetrieveAProject200Response response = api.updateAProject(organizationSlug, projectSlug, updateAProjectRequest);
        // TODO: test validations
    }

    /**
     * Update a service hook.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAServiceHookTest() throws ApiException {
        String organizationSlug = null;
        String projectSlug = null;
        String hookId = null;
        RegisterANewServiceHookRequest registerANewServiceHookRequest = null;
        ListAProjectSServiceHooks200ResponseInner response = api.updateAServiceHook(organizationSlug, projectSlug, hookId, registerANewServiceHookRequest);
        // TODO: test validations
    }

    /**
     * Upload a new debug information file for the given release.  Unlike other API requests, files must be uploaded using the traditional multipart/form-data content-type.  The file uploaded is a zip archive of an Apple .dSYM folder which contains the individual debug images.  Uploading through this endpoint will create different files for the contained images.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadANewFileTest() throws ApiException {
        String organizationSlug = null;
        String projectSlug = null;
        File _file = null;
        api.uploadANewFile(organizationSlug, projectSlug, _file);
        // TODO: test validations
    }

}
