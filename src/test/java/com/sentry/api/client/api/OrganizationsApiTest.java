/*
 * API Reference
 * Sentry Public API
 *
 * The version of the OpenAPI document: v0
 * Contact: partners@sentry.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sentry.api.client.api;

import com.sentry.api.client.*;
import com.sentry.api.client.auth.*;
import com.sentry.api.client.model.ListARepositorySCommits200ResponseInner;
import com.sentry.api.client.model.ListAnOrganizationSProjects200ResponseInner;
import com.sentry.api.client.model.ListAnOrganizationSRepositories200ResponseInner;
import com.sentry.api.client.model.ListAnOrganizationSUsers200ResponseInner;
import java.time.OffsetDateTime;
import com.sentry.api.client.model.ResolveAShortID200Response;
import com.sentry.api.client.model.ResolveAnEventID200Response;
import com.sentry.api.client.model.RetrieveATeam200ResponseOrganization;
import com.sentry.api.client.model.RetrieveAnOrganization200Response;
import com.sentry.api.client.model.RetrieveAnOrganizationMember200Response;
import com.sentry.api.client.model.RetrieveEventCountsForAnOrganizationV2200Response;
import com.sentry.api.client.model.UpdateAnOrganizationRequest;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OrganizationsApi
 */
public class OrganizationsApiTest {

    private final OrganizationsApi api = new OrganizationsApi();

    /**
     * Remove an organization member.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAnOrganizationMemberTest() throws ApiException {
        //String organizationSlug = null;
        //String memberId = null;
        //api.deleteAnOrganizationMember(organizationSlug, memberId);
        // TODO: test validations
    }

    /**
     * Return a list of commits for a given repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listARepositorysCommitsTest() throws ApiException {
        //String organizationSlug = null;
        //String repoId = null;
        //List<ListARepositorySCommits200ResponseInner> response = api.listARepositorysCommits(organizationSlug, repoId);
        // TODO: test validations
    }

    /**
     * Return a list of projects bound to a organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAnOrganizationsProjectsTest() throws ApiException {
        //String organizationSlug = null;
        //String cursor = null;
        //List<ListAnOrganizationSProjects200ResponseInner> response = api.listAnOrganizationsProjects(organizationSlug, cursor);
        // TODO: test validations
    }

    /**
     * Return a list of version control repositories for a given organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAnOrganizationsRepositoriesTest() throws ApiException {
        //String organizationSlug = null;
        //List<ListAnOrganizationSRepositories200ResponseInner> response = api.listAnOrganizationsRepositories(organizationSlug);
        // TODO: test validations
    }

    /**
     * Return a list of users that belong to a given organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAnOrganizationsUsersTest() throws ApiException {
        //String organizationSlug = null;
        //String project = null;
        //List<ListAnOrganizationSUsers200ResponseInner> response = api.listAnOrganizationsUsers(organizationSlug, project);
        // TODO: test validations
    }

    /**
     * Return a list of organizations available to the authenticated session.  This is particularly useful for requests with an user bound context.  For API key based requests this will only return the organization that belongs to the key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listYourOrganizationsTest() throws ApiException {
        //Boolean owner = null;
        //String cursor = null;
        //List<RetrieveATeam200ResponseOrganization> response = api.listYourOrganizations(owner, cursor);
        // TODO: test validations
    }

    /**
     * This resolves a short ID to the project slug and internal issue ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resolveAShortIDTest() throws ApiException {
        //String organizationSlug = null;
        //String shortId = null;
        //ResolveAShortID200Response response = api.resolveAShortID(organizationSlug, shortId);
        // TODO: test validations
    }

    /**
     * This resolves an event ID to the project slug and internal issue ID and internal event ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resolveAnEventIDTest() throws ApiException {
        //String organizationSlug = null;
        //String eventId = null;
        //ResolveAnEventID200Response response = api.resolveAnEventID(organizationSlug, eventId);
        // TODO: test validations
    }

    /**
     * Return details on an individual organization including various details such as membership access, features, and teams.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveAnOrganizationTest() throws ApiException {
        //String organizationSlug = null;
        //RetrieveAnOrganization200Response response = api.retrieveAnOrganization(organizationSlug);
        // TODO: test validations
    }

    /**
     * Retrieve an organization member&#39;s details.  Will return a pending invite as long as it&#39;s already approved.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveAnOrganizationMemberTest() throws ApiException {
        //String organizationSlug = null;
        //String memberId = null;
        //RetrieveAnOrganizationMember200Response response = api.retrieveAnOrganizationMember(organizationSlug, memberId);
        // TODO: test validations
    }

    /**
     * This endpoint is deprecated in favor of [Organization Stats V2](/api/organizations/retrieve-event-counts-for-an-organization-v2/).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveEventCountsForAnOrganizationTest() throws ApiException {
        //String organizationSlug = null;
        //String stat = null;
        //OffsetDateTime since = null;
        //OffsetDateTime until = null;
        //String resolution = null;
        //List<List<Integer>> response = api.retrieveEventCountsForAnOrganization(organizationSlug, stat, since, until, resolution);
        // TODO: test validations
    }

    /**
     * Query event counts for your Organization. Select a field, define a date range, and group or filter by columns.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveEventCountsForAnOrganizationV2Test() throws ApiException {
        //String organizationSlug = null;
        //List<String> groupBy = null;
        //String field = null;
        //String statsPeriod = null;
        //String interval = null;
        //OffsetDateTime start = null;
        //OffsetDateTime end = null;
        //List<String> project = null;
        //String category = null;
        //String outcome = null;
        //String reason = null;
        //RetrieveEventCountsForAnOrganizationV2200Response response = api.retrieveEventCountsForAnOrganizationV2(organizationSlug, groupBy, field, statsPeriod, interval, start, end, project, category, outcome, reason);
        // TODO: test validations
    }

    /**
     * Update various attributes and configurable settings for the given organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAnOrganizationTest() throws ApiException {
        //String organizationSlug = null;
        //UpdateAnOrganizationRequest updateAnOrganizationRequest = null;
        //RetrieveAnOrganization200Response response = api.updateAnOrganization(organizationSlug, updateAnOrganizationRequest);
        // TODO: test validations
    }

}
